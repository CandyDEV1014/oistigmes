{"version":3,"sources":["api/categoriesClient.ts","api/attributesClient.ts","views/photoOrder/products/components/AttributesSelector.tsx","views/photoOrder/products/components/PriceRangeSelector.tsx","views/photoOrder/PhotoOrderHelper.ts","components/pages/SingleLightbox.js","helpers/FileHelper.ts","components/modals/delete/DeleteModal.tsx","views/photoOrder/default.tsx","views/photoOrder/overview/index.tsx","views/photoOrder/updates/index.tsx","views/settings/default.tsx","views/photoOrder/products/addProduct.tsx","views/photoOrder/products/deleteProductModal.tsx","views/photoOrder/products/editProduct.tsx","views/photoOrder/products/components/CategoryItem.tsx","views/photoOrder/products/components/MainProductItem.tsx","views/photoOrder/products/components/SubProductItem.tsx","views/photoOrder/products/index.tsx","views/photoOrder/wizard/WizardStandard.tsx","components/wizard/TopNavigation.js","components/wizard/BottomNavigation.js","views/photoOrder/wizard/Wizard3D.tsx","views/photoOrder/products/components/TemplateSelector.tsx","views/photoOrder/wizard/WizardPage.tsx","views/photoOrder/settings/advertisement/advertisementForm.tsx","views/photoOrder/settings/advertisement/advertisementListItem.tsx","views/photoOrder/settings/advertisement/index.tsx","views/photoOrder/settings/index.tsx","views/photoOrder/attributes/attributeListItem.tsx","views/photoOrder/attributes/addEditAttributeGroupModal.tsx","views/photoOrder/attributes/addEditAttributeModal.tsx","views/photoOrder/attributes/index.tsx","views/photoOrder/categories/categorylistitem.tsx","views/photoOrder/categories/categoryAddEditModal.tsx","views/photoOrder/categories/index.tsx","components/cards/IconCard.js","views/dashboards/default.tsx","views/photoHosting/overview/index.tsx","views/photoHosting/updates/index.tsx","views/photoHosting/events/event.tsx","views/photoHosting/events/addevent.tsx","views/photoHosting/events/editevent.tsx","views/photoHosting/events/index.tsx","views/photoHosting/events/subfolderitem.tsx","views/photoHosting/events/subfolders/addSubfolder.tsx","views/photoHosting/events/subfolders/editSubfolder.tsx","views/photoHosting/events/subfolders.tsx"],"names":["CategoryClient","settings","globalSettings","window","localStorage","getItem","data","JSON","parse","headers","Token","this","key","Axios","get","category","post","categoryId","delete","put","positions","s","baseProductId","position","CategoryId","BaseProductId","Position","productIds","ProductsIdAsc","AttributesClient","withCredentials","attributeGroup","attributeGroupId","AttributeSelector","props","convertAttributeGroupToItem","attributeGroups","map","attrG","id","Id","attributes","x","attributeGroupsToSelect","attr","label","Name","value","attributesToSelect","attributs","attribute","addGroup","groups","state","selectedAttributeGroups","push","setState","triggerOnChange","onSelectAttributeGroup","index","findIndex","onSelectAttribute","removeAttributeGroup","splice","getAttributeGroup","item","find","getAttribute","reduce","a","b","concat","attributeGroupItemToSelect","attributeListToSelect","ids","attributeId","prevProps","prevState","_","onChange","attributegGroup","className","xxs","defaultValue","name","options","length","isMulti","color","outline","onClick","React","Component","PriceRangeInput","e","target","valueAsNumber","isButtonDisabled","price","to","undefined","from","onAddPriceRange","clear","isInfinity","type","placeholder","event","addonType","disabled","onRemoveLast","PriceRangeSelector","addPriceRange","ranges","priceRange","lastFrom","removeLast","items","pop","initialValues","range","responseItemToCategory","Description","description","FilePath","imageUrl","IsHidden","isHidden","ProductsPositions","responseItemToAttributeGroup","i","Key","forEach","PriceCorrectionPercent","priceCorrectionPercent","PriceCorrectionCurrent","priceCorrectionCurrent","AttributeGroupId","responseAttributeItemToAttribute","SingleLightbox","thumb","large","useState","isOpen","setIsOpen","location","src","alt","mainSrc","onCloseRequest","FileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","DeleteModal","toggle","header","body","style","display","justifyContent","onDelete","DefaultPhotoOrder","heading","match","lg","xl","injectIntl","OverviewView","homeClient","HomeClient","title","icon","PhotographerDetails","then","response","Error","NotificationManager","Data","AddEditPhotographerPopUpViewModel","EventSubscription","sm","flexDirection","fontWeight","flex","alignItems","xss","UpdatesView","DefaultSettings","form","photoClient","PhotoClient","currencies","Nickname","Login","Street","PostalCode","Phone","CompanyName","IsPrivate","Discrict","City","WebSiteUrl","IsPremiumChecked","VideoGallery","PhotoGalleryUrlOpenLogin","SelectedPremiumType","number","MAC3","MAC2","MAC","PayPalAccountID","VivwaWalletId","IBAN","ShippingPrice","Currency","MinimalOrderValue","formData","onSubmit","values","setSubmitting","info","EditPhotographer","success","enableReinitialize","handleSubmit","setFieldValue","handleChange","setFieldTouched","handleBlur","errors","touched","isSubmitting","for","field","meta","enableSearch","inputClass","country","phone","console","log","onBlur","hidden","selected","currency","AddProductModal","categoriesClient","attributesClient","Size","Price","SizeSelect","File","categories","QuantityRangeMin","QuantityRangeMax","PriceRange","formik","FormData","append","toString","attributesGroups","Array","prototype","apply","attrId","isNaN","AddProduct","onCreate","toggleModal","customSize","List","submitForm","Modal","modalOpen","wrapClassName","backdrop","ModalHeader","ModalBody","FormGroup","Label","maxLength","FormText","InputGroup","CustomInput","currentTarget","files","defaultChecked","InputGroupAddon","InputGroupText","Row","classNamePrefix","ModalFooter","Button","DeleteProductModal","EditProductModal","product","IsMainProduct","EditProduct","onEdit","EditAutogeneratedProduct","selectedCategories","list","filter","indexOf","getAttributeGroupsFromAttributeList","att","group","Object","keys","Number","initialPriceRanges","ProductPrices","PriceLevelFrom","PriceLevelTo","AttributesIds","CategoriesIds","MainProductId","attrGroup","CategoryItem","isImage","isCollapsed","onImageError","Card","NavLink","onError","onCollapse","cursor","width","classnames","Badge","pill","MainProductItem","authService","AuthService","getCategory","categoryListName","categoriesIds","c","asd","join","attributeListName","onDownloadQrCode","pngUrl","document","getElementById","toDataURL","replace","downloadLink","createElement","href","download","appendChild","click","removeChild","qrCodeValue","WEB_ORDERING_BASE_URL","getId","FileUrl","products","productPrice","toFixed","size","level","includeMargin","UncontrolledDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","SubProductItem","marginLeft","marginRight","onChangeVisible","mapAttributes","mapAttributeItemToAttribute","mapItemToAttributeGroup","mapCategories","Products","categoryClient","attributeClient","setModalOpen","modal","modalEditOpen","refreshCategories","tree","createTree","refreshAll","loading","getProducts","expandedKeys","changeCollapse","startsWith","nodes","categoryNode","n","visible","children","categoryProducts","p","orderedCP","finded","productNode","paddingLeft","onChangeProductVisible","onDeleteRequest","subProduct","subProductNode","emptyCategory","ListProducts","responseProducts","productDictionary","mainProduct","modalDelete","deleteProductGroup","productGroup","editedProductGroup","DeleteProduct","refresh","SetProductVisible","allowDrop","draggingNode","dropPosition","dropNode","isDraggable","node","getItemKeys","split","productId","isReorder","dragNode","dragItemKeys","dropItemKeys","isClone","arraymove","arr","fromIndex","toIndex","element","onDrop","categoryIndex","treeCategory","moveIndex","UpdateCategoryProductsPositions","dragItem","CloneProductToCategory","onDragStart","Breadcrumb","draggable","treeData","autoExpandParent","dropIndicatorRender","onShow","action","show","WizardType","TopNavigation","disableNav","topNavClick","getClassName","steps","step","stepItem","isDone","render","next","previous","go","hideTopNav","itemClick","desc","BottomNavigation","onClickPrev","prevLabel","onClickNext","nextLabel","WizardStandardProduct","goToNext","goToPrev","marginTop","saving","saved","height","margin","blockInterface","TemplateSelector","onAddWindow","templates","positionX","positionY","sizeX","sizeY","template","Wizard3D","productClient","ProductsClient","API_BASE","modelList","get3DModels","models","as","selectedModel","selectedIndex","model","ProductWizard","ProductType","ProductTemplates","Model3D","wizardType","Standard","attributesIds","imageFile","fileName","layerImageFile","productPrices","ProductPriceDTO","priceLevelFrom","priceLevelTo","sizes","ProductsTemplateDTO","model3D","add3DProduct","CardBody","ThreeD","WizardStandard","AdvertisementForm","advertisementClient","AdvertisementClient","fileClient","FileClient","useFormik","AdvertisementDTO","photographerId","advertisement","mobileFile","fileResponse","mobileFileResponse","upload","MultimediaTypesEnum","AdvertisementSlider","fileGuid","guid","url","mobileFileGuid","mobileFileName","mobileImageUrl","update","create","onClose","openFile","open","useEffect","setValues","buttonText","externalUrl","AdvertisementListItem","entity","draggableId","provided","snapshot","ref","innerRef","draggableProps","collect","dragHandleProps","onCheckItem","faBars","AdvertisementsList","advertisements","setAdvertisements","editAdvertisement","setEditAdvertisement","populateAdvertisements","reorder","startIndex","endIndex","removed","source","destination","onSetVisible","catch","CardTitle","onDragEnd","droppableId","droppableProps","Settings","photographerClient","PhotographerClient","MobileToken","SaveSoftwareSettings","Logo","Promotion","LabId","softwareSettings","AttributeListItem","images","isAttrImage","groupDragHandler","onAddAttribute","Collapse","orderedAttributes","onEditAttribute","onDeleteAttribute","sort","AddEditAttributeGroupModal","_initialValues","onSave","AddEditAttributeModal","AttribiuteGroupId","Descriptipn","CorrectionPrice","CorrectionPercent","CorrectionType","Attributes","edit","assign","Update","attributeGroupToCreateAttributeGroup","dataKey","Add","Delete","cindex","attributeToCreateAttrbute","createAttribute","requestData","responseAttrGr","attrGroupIndex","editAttribute","requestGroup","indexOfAttr","indexOfAttrGroup","deleteAttribute","attrIndex","onSaveAttribute","deleteAttributeGroup","onReorderAttributes","onReorderAttributesGroups","Positions","editedAttributeGroup","componentDidMount","attributesGroup","orderedAttributeGroups","CategoryListItem","AddEditCategoryModal","fileBase64","FileAsBase64","FileName","Categories","responseCategory","cat","changeVisible","isVisible","saveCategory","deletingCategory","editedCategory","orderedCategories","v","memo","IntlMessages","DefaultDashboard","MobileSubscription","EventListItemView","eventClient","onCopyDirectLink","preventDefault","directLink","NoPassKey","origin","EventClient","CardImg","top","FileSrc","PassProtected","onClickCapture","text","onCopy","CardSubtitle","connect","authUser","AddNewEventModal","imageTypes","TimeToDelete","AdditionalInfo","EmailToClient","FirstFormat","FourthFormat","LinkForEmail","uuidv4","Password","SecondFormat","ThirdFormat","IsPasswordProtected","NoPricing","FirstFormatPrice","SecondFormatPrice","ThirdFormatPrice","FourthFormatPrice","removeFormat","formats","uuid","resetUUid","addFormat","AddEvent","validate","rows","loadingIcon","checked","nopricing","isPasswordProtected","EmailLinkType","Input","faSpinner","spin","EditEventModal","FaceBookModel","EditEvent","onEdited","DefaultView","pageSizes","populateData","currentPage","Page","totalPage","PageCount","events","EventsList","deleteEvent","editEvent","GetAddEventDialog","editedEvent","onContextMenuClick","onContextMenu","user","params","parallaxData","canEdit","CanEdit","coverPhoto","CoverPhoto","Top","mode","Mode","objectId","ObjectId","ev","Pagination","onChangePage","detail","BASE_URL","reverse","CoverPhotoUrl","CoverOffset","PhotographerId","SubfolderListItemView","FolderId","folderId","eventId","ThumbSrc","AddNewSubfolder","EventId","FolderCoverPhoto","SaveFolder","EditSubfolder","subfolder","SubfoldersView","nextEvent","previouseEvent","currentIndex","nextIntex","previouseIndex","EventFoldersList","eventData","editSubfolder","eventFolderList","Folders","editedSubfolder","deleteSubfolder","DeleteFolder","d","sendToApplication","GenerateEventXML","droprownMenuShow","EventName","ButtonDropdown","fontSize","right"],"mappings":"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","file":"static/js/dashboard-default.73de44bd.chunk.js","sourcesContent":["import Axios, { AxiosRequestConfig } from \"axios\";\nimport * as globalSettings from \"./settings\";\nimport { IApiResponse } from \"./IApiResponse\";\nimport { layer } from \"@fortawesome/fontawesome-svg-core\";\nimport { ICategory, ISaveCategory } from \"../views/photoOrder/categories/category\";\n\nexport class CategoryClient {\n    settings: AxiosRequestConfig = {};\n\n    constructor() {\n        let settings = { ...globalSettings.CONFIG }\n        // settings.withCredentials = false;\n        if (window.localStorage.getItem(\"loginData\")) {\n            let data = JSON.parse(window.localStorage.getItem(\"loginData\") as string);\n\n            settings.headers[\"Authorization\"] = data.Token;\n            this.settings = settings;\n        }\n    }\n\n    List(key: string) {\n        var config = {\n            ...this.settings,\n        }\n        return Axios.get<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/category/getcategory?key=${key}`, this.settings);\n    }\n\n    Add(category: ISaveCategory, key: string) {\n        return Axios.post<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/category/CreateNewCategory`, category, this.settings);\n    }\n\n    Delete(categoryId: number) {\n        return Axios.delete<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/category/DeleteCategory?id=${categoryId}`, this.settings);\n\n    }\n\n    Update(category: ISaveCategory, key: string) {\n        return Axios.put<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/category/UpdateCategory`, category, this.settings);\n    }\n\n    Positions(positions: { id: number, position: number }[]) {\n        let s = { ...this.settings }\n        s.headers[\"Content-Type\"] = \"application/json\";\n        return Axios.put<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/category/UpdateCategoryPosition`, positions, s);\n    }\n\n    CloneProductToCategory(baseProductId: number, categoryId: number, position?: number | null) {\n        let s = { ...this.settings }\n        s.headers[\"Content-Type\"] = \"application/json\";\n        return Axios.post<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/category/CloneProductToCategory`, { CategoryId: categoryId, BaseProductId: baseProductId, Position: position }, s);\n    }\n\n    UpdateCategoryProductsPositions(categoryId: number, productIds: number[]) {\n        let s = { ...this.settings }\n        s.headers[\"Content-Type\"] = \"application/json\";\n        return Axios.put<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/category/UpdateCategoryProductsPositions`, { CategoryId: categoryId, ProductsIdAsc: productIds }, s);\n\n    }\n}","import Axios, { AxiosRequestConfig } from \"axios\";\nimport * as globalSettings from \"./settings\";\nimport { IApiResponse } from \"./IApiResponse\";\nimport { layer } from \"@fortawesome/fontawesome-svg-core\";\nimport { ICategory } from \"../views/photoOrder/categories/category\";\nimport { IAttributeGroup, ICreateAttributeGroup } from \"../views/photoOrder/attributes/attribute\";\n\nexport class AttributesClient {\n    settings: AxiosRequestConfig = {};\n\n    constructor() {\n        let settings = { ...globalSettings.CONFIG }\n        settings.withCredentials = false;\n        if (window.localStorage.getItem(\"loginData\")) {\n            let data = JSON.parse(window.localStorage.getItem(\"loginData\") as string);\n\n            settings.headers[\"Authorization\"] = data.Token;\n            this.settings = settings;\n        }\n    }\n\n    List(key: string) {\n        var config = {\n            ...this.settings,\n        }\n        return Axios.get<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/Attributes/GetAttributesGroup?key=${key}`, this.settings);\n    }\n\n    Add(attributeGroup: ICreateAttributeGroup, key: string) {\n        return Axios.post<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/Attributes/CreateNewAttributesGroup`, attributeGroup, this.settings);\n    }\n\n    Delete(attributeGroupId: number) {\n        return Axios.delete<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/attributes/DeleteAttributeGroup?id=${attributeGroupId}`, this.settings);\n\n    }\n\n    Update(attributeGroup: ICreateAttributeGroup, key: string) {\n        return Axios.put<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/attributes/UpdateAttributeGroup`, attributeGroup, this.settings);\n    }\n\n    Positions(positions: { id: number, position: number }[]) {\n        return Axios.put<IApiResponse<any>>(`${globalSettings.BASE_URL}/api2/attributes/UpdateAttributesGroupPosition`, positions, this.settings);\n    }\n}","import React from \"react\";\nimport { Button, Row } from \"reactstrap\";\nimport { IAttribute, IAttributeGroup } from \"../../attributes/attribute\";\nimport * as _ from \"underscore\";\nimport Select from 'react-select'\nimport shortid from \"shortid\";\nimport { Colxx } from \"../../../../components/common/CustomBootstrap\";\n\nexport interface IAttributeGroupItem {\n    id: number,\n    attributes: number[]\n}\n\nexport interface IAttributeSelectorProps {\n    attributeGroups: IAttributeGroup[],\n    selectedAttributeGroups: IAttributeGroupItem[],\n    onChange: (items: IAttributeGroupItem[]) => void\n}\n\nexport interface IAttributeSelectorState {\n    selectedAttributeGroups: IAttributeGroupItem[]\n}\n\nexport class AttributeSelector extends React.Component<IAttributeSelectorProps, IAttributeSelectorState> {\n    constructor(props: IAttributeSelectorProps) {\n        super(props);\n        this.state = {\n            selectedAttributeGroups: []\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ selectedAttributeGroups: this.props.selectedAttributeGroups });\n    }\n\n    componentDidUpdate(prevProps: IAttributeSelectorProps, prevState: IAttributeSelectorState) {\n        if (!_.isEqual(prevProps.selectedAttributeGroups, this.props.selectedAttributeGroups)) {\n            this.setState({ selectedAttributeGroups: this.props.selectedAttributeGroups });\n        }\n    }\n\n    triggerOnChange() {\n        this.props.onChange(this.state.selectedAttributeGroups);\n    }\n\n    convertAttributeGroupToItem = (attributeGroups: IAttributeGroup[]): IAttributeGroupItem[] => {\n        return attributeGroups.map(attrG => ({ id: attrG.Id, attributes: attrG.attributes.map(x => x.Id) }));\n    }\n\n    attributeGroupsToSelect = (attributeGroups: IAttributeGroup[]) => {\n        return attributeGroups.map(attr => ({ label: attr.Name, value: attr.Id, attributeGroup: attr }));\n    }\n\n    attributesToSelect = (attributs: IAttribute[]) => {\n        return attributs.map(attr => ({ label: attr.Name, value: attr.Id, attribute: attr }));\n    }\n\n    addGroup = () => {\n        let groups = [...this.state.selectedAttributeGroups];\n        groups.push({ id: 0, attributes: [] });\n        this.setState({ selectedAttributeGroups: groups }, () => { this.triggerOnChange() });\n    }\n\n    onSelectAttributeGroup = (data: any, index: number) => {\n        let groups = [...this.state.selectedAttributeGroups];\n        if (groups.findIndex(x => x.id == data.value) < 0) {\n            groups[index].id = data.value;\n            groups[index].attributes = [];\n            this.setState({ selectedAttributeGroups: groups }, () => { this.triggerOnChange() });\n        }\n    }\n\n    onSelectAttribute = (data: { label: string, value: number, attribute: IAttribute }[], index: number) => {\n        let groups = [...this.state.selectedAttributeGroups];\n        groups[index].attributes = data ? data.map(x => x.value) : [];\n        this.setState({ selectedAttributeGroups: groups }, () => { this.triggerOnChange() });\n\n    }\n\n    removeAttributeGroup = (index: number) => {\n        let groups = [...this.state.selectedAttributeGroups];\n        groups.splice(index, 1);\n        this.setState({ selectedAttributeGroups: groups }, () => { this.triggerOnChange() });\n    }\n\n    getAttributeGroup = (id: number): IAttributeGroup => {\n        var item = this.props.attributeGroups.find(x => x.Id == id);\n        if (item) {\n            return item\n        }\n        return { attributes: [], id: 0 } as any\n    }\n\n    getAttribute = (id: number): IAttribute => {\n        let attributes = this.props.attributeGroups.map(x => x.attributes).reduce((a, b) => a.concat(b), []);\n        return attributes.find(x => x.Id == id) as IAttribute;\n    }\n\n    attributeGroupItemToSelect = (id: number) => {\n        let attributeGroup = this.getAttributeGroup(id);\n        if (attributeGroup) {\n            return { value: attributeGroup.Id, label: attributeGroup.Name }\n        }\n        return {}\n    }\n\n    attributeListToSelect = (ids: number[]) => {\n        return ids.map(attributeId => {\n            let attribute = this.getAttribute(attributeId);\n            return { value: attribute.Id, label: attribute.Name, attribute: attribute }\n        })\n    }\n\n    render() {\n        return (<>\n            <div>\n                {\n                    this.state.selectedAttributeGroups.map((attributegGroup, index) => {\n                        return (<div key={\"attr-group\" + index} className=\"mb-2\">\n                            <Row>\n                                <Colxx xxs=\"10\">\n                                    <Select defaultValue={this.attributeGroupItemToSelect(attributegGroup.id)} value={this.attributeGroupItemToSelect(attributegGroup.id)} name=\"attributeGroup\" options={this.attributeGroupsToSelect(this.props.attributeGroups)} onChange={(data) => this.onSelectAttributeGroup(data, index)} />\n                                    {(this.getAttributeGroup(attributegGroup.id) as any).attributes.length > 0 ? <Select defaultValue={this.attributeListToSelect(attributegGroup.attributes)} value={this.attributeListToSelect(attributegGroup.attributes)} isMulti name=\"attributes\" options={this.attributesToSelect(this.getAttributeGroup(attributegGroup.id).attributes)} onChange={(data) => this.onSelectAttribute(data, index)} /> : null}\n                                </Colxx>\n                                <Colxx xxs=\"2\" className=\"p-0\">\n                                    <Button color=\"danger\" outline onClick={() => this.removeAttributeGroup(index)}><i className=\"simple-icon-trash\" /></Button>\n                                </Colxx>\n                            </Row>\n                        </div>)\n                    })\n                }\n\n            </div>\n            <Button color=\"secondary\" outline onClick={() => this.addGroup()}>\n                <i className=\"simple-icon-plus\" /> Add attributes\n            </Button>\n        </>)\n    }\n}\n\nexport default AttributeSelector;","import React from \"react\";\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Row } from \"reactstrap\";\nimport { Colxx } from \"../../../../components/common/CustomBootstrap\";\nimport * as _ from \"underscore\";\n\nexport interface IPriceRange {\n    from?: number,\n    to?: number,\n    value: number\n}\n\nexport interface IPriceRangeSelectorProps {\n    //priceRange: IPriceRange[]\n    onChange: (priceRange: IPriceRange[]) => void;\n    initialValues: IPriceRange[];\n}\n\nexport interface IPriceRangeSelectorState {\n    priceRange: IPriceRange[]\n}\n\nexport class PriceRangeInput extends React.Component<{ from?: number, onChange: (data: IPriceRange) => void, onRemoveLast: () => void }, { to?: number, price?: number }> {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            price: undefined,\n            to: undefined\n        }\n    }\n\n    onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let state = { ...this.state }\n        if (e.target.value) {\n            state[e.target.name] = e.target.valueAsNumber\n        } else {\n            state[e.target.name] = null;\n        }\n\n        this.setState(state);\n    }\n\n    isButtonDisabled = () => {\n        //return !this.state.price || (this.state.to != null && this.state.to != 0 && this.state.to < this.props.from)\n        return !this.state.price || (this.state.to != null && this.props.from != undefined && this.state.to < this.props.from);\n    }\n\n    onAddPriceRange = () => {\n        this.props.onChange({ from: this.props.from, to: (this.state.to == 0 ? null : this.state.to) as number, value: this.state.price as number });\n        this.clear();\n    }\n\n    get isInfinity() {\n        return !this.props.from;\n    }\n\n    clear = () => {\n\n        let state = {}\n        this.setState(state);\n    }\n\n    render() {\n        return (\n            <>\n                {!this.isInfinity && <Row>\n                    <Colxx xxs={12}>\n                        <InputGroup>\n                            <input value={this.state.price} name=\"price\" type=\"number\" placeholder=\"Price\" className=\"form-control\" onChange={(event) => this.onChange(event)} />\n                            <InputGroupAddon addonType=\"append\">\n                                <InputGroupText>&euro;</InputGroupText>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Colxx>\n                </Row>}\n                <Row>\n                    {!this.isInfinity && <> <Colxx xxs={5} className=\"pr-0\">\n                        <InputGroup>\n                            <input value={this.props.from} disabled type=\"number\" placeholder=\"From\" className=\"form-control\" />\n                            <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>Piece</InputGroupText>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Colxx>\n                        <Colxx xxs={1} className=\"d-flex justify-content-center align-items-center p-0\">-</Colxx>\n                        <Colxx xxs={6} className=\"pl-0\">\n                            <InputGroup>\n                                <input value={this.state.to} name=\"to\" type=\"number\" placeholder=\"To\" className=\"form-control\" onChange={(event) => this.onChange(event)} />\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <InputGroupText>Piece</InputGroupText>\n                                </InputGroupAddon>\n                            </InputGroup>\n                        </Colxx>\n                    </>}\n                    <Colxx xxs={6} className=\"mt-1\">\n                        {!this.isInfinity &&\n                            <Button disabled={this.isButtonDisabled()} color=\"primary\" outline onClick={() => this.onAddPriceRange()}><i className=\"simple-icon-plus\" /> Add range</Button>\n                        }\n                    </Colxx>\n                    <Colxx xxs={6} className=\"mt-1 text-right\">\n                        <Button color=\"danger\" outline onClick={() => this.props.onRemoveLast()}><i className=\"simple-icon-trash\" /> Remove</Button>\n                    </Colxx>\n                </Row>\n            </>\n        )\n    }\n}\n\nexport class PriceRangeSelector extends React.Component<IPriceRangeSelectorProps, IPriceRangeSelectorState>\n{\n    constructor(props) {\n        super(props);\n        this.state = {\n            priceRange: []\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ priceRange: this.props.initialValues });\n    }\n\n    componentDidUpdate(prevProps: IPriceRangeSelectorProps, prevState: IPriceRangeSelectorState) {\n        if (!_.isEqual(prevProps.initialValues, this.props.initialValues)) {\n            this.setState({ priceRange: this.props.initialValues });\n        }\n    }\n\n    addPriceRange = (data: IPriceRange) => {\n        let ranges = [...this.state.priceRange];\n        ranges.push(data);\n        this.setState({ priceRange: ranges }, () => {\n            this.props.onChange(this.state.priceRange);\n        });\n    }\n\n    lastFrom = () => {\n        if (this.state.priceRange.length) {\n            if (this.state.priceRange[this.state.priceRange.length - 1].to) {\n                return this.state.priceRange[this.state.priceRange.length - 1].to as number + 1;\n            } else {\n                return undefined;\n            }\n\n        }\n        return 1;\n    }\n\n    removeLast = () => {\n        let items = [...this.state.priceRange];\n        items.pop();\n        this.setState({ priceRange: items }, () => {\n            this.props.onChange(this.state.priceRange);\n        });\n    }\n\n    render() {\n        return (<>\n            <Row>\n                {\n                    this.state.priceRange.map((range, index) => {\n                        return (\n                            <Colxx key={\"rang-\" + index} xxs={12}>\n                                <Row>\n                                    <Colxx xxs={8}>From <strong>{range.from}</strong> to <strong>{(range.to ? range.to : \"infinity\")}</strong> Pieces</Colxx>\n                                    <Colxx xxs={4} className={\"pl-0 text-right\"}><strong>{range.value} &euro;</strong></Colxx>\n                                </Row>\n                            </Colxx>\n                        );\n                    })\n                }\n\n            </Row>\n            <PriceRangeInput from={this.lastFrom()} onChange={(data) => this.addPriceRange(data)} onRemoveLast={() => this.removeLast()} />\n        </>)\n    }\n}\n\nexport default PriceRangeSelector;","import { ICategory } from \"./categories/category\";\nimport { IAttribute, IAttributeGroup } from \"./attributes/attribute\";\n\nexport const responseItemToCategory = (item: any): ICategory => {\n    var category: ICategory = {\n        Name: item.name,\n        Id: item.id,\n        Description: item.description,\n        FilePath: item.imageUrl,\n        Position: item.position,\n        IsHidden: item.isHidden,\n        ProductsPositions: item.ProductsPositions\n    }\n    return category;\n}\n\nexport const responseAttributeItemToAttribute = (item: any, attributeGroupId: number): IAttribute => {\n    return {\n        Id: item.id,\n        Name: item.name,\n        Description: item.description,\n        PriceCorrectionPercent: item.priceCorrectionPercent,\n        PriceCorrectionCurrent: item.priceCorrectionCurrent,\n        Position: item.position,\n        AttributeGroupId: attributeGroupId\n    }\n}\n\nexport const responseItemToAttributeGroup = (item: any): IAttributeGroup => {\n    let i = {\n        Id: item.id,\n        Name: item.name,\n        Key: item.key,\n        attributes: [],\n        Position: item.position\n    };\n\n    (item.attributes as any[]).forEach(attr => {\n        (i.attributes as any[]).push(responseAttributeItemToAttribute(attr, i.Id));\n    });\n\n    return i;\n}\n","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Lightbox from 'react-image-lightbox';\n\nconst SingleLightbox = ({ thumb, className, large }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <NavLink to=\"#\" location={{}} onClick={() => setIsOpen(true)}>\n        <img src={thumb} alt=\"thumbnail\" className={className} />\n      </NavLink>\n\n      {isOpen && (\n        <Lightbox mainSrc={large} onCloseRequest={() => setIsOpen(false)} />\n      )}\n    </>\n  );\n};\nexport default SingleLightbox;\n","export const FileToBase64 = (file: Blob) => new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = error => reject(error);\n});","import React from \"react\";\nimport { Modal, ModalHeader, ModalFooter, Button, ModalBody } from \"reactstrap\";\n\nexport interface IDeleteModalProps {\n    isOpen: boolean\n    onDelete: () => void\n    toggle: (show: boolean) => void\n    header: string,\n    body: string\n}\n\nexport class DeleteModal extends React.Component<IDeleteModalProps, any> {\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                toggle={() => this.props.toggle(!this.props.isOpen)}\n            >\n                <ModalHeader>\n                    {this.props.header}\n                </ModalHeader>\n                <ModalBody>\n                    {this.props.body}\n                </ModalBody>\n                <ModalFooter style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                    <Button\n                        color=\"secondary\"\n                        onClick={() => this.props.toggle(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        color=\"danger\"\n                        onClick={() => { this.props.onDelete(); this.props.toggle(false) }}\n                    >\n                        YES\n                    </Button>{' '}\n\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}","import React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row } from 'reactstrap';\nimport { Colxx, Separator } from '../../components/common/CustomBootstrap';\nimport Breadcrumb from '../../containers/navs/Breadcrumb';\n\nexport class DefaultPhotoOrder extends React.Component<any, any> {\n\n    state = {\n\n    }\n\n    render() {\n        return (\n            <>\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <Breadcrumb heading=\"Settings\" match={this.props.match} />\n                        <Separator className=\"mb-5\" />\n                    </Colxx>\n                </Row>\n                <Row>\n                    <Colxx lg=\"12\" xl=\"12\">\n                        settings\n                    </Colxx>\n\n                </Row>\n            </>);\n    }\n}\n\nexport default injectIntl(DefaultPhotoOrder);\n","import React from \"react\";\nimport { Row, Card, Badge, CustomInput, Button, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, CardBody } from \"reactstrap\";\nimport { NavLink } from 'react-router-dom';\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport classnames from \"classnames\";\n\nimport IntlMessages from \"../../../helpers/IntlMessages\";\n\nimport \"./index.scss\";\nimport { HomeClient } from \"../../../api/homeClient\";\nimport { PhotoClient } from \"../../../api/photoClient\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport IconCard from \"../../../components/cards/IconCard\";\n\n\n\nexport class OverviewView extends React.Component<any, any> {\n\n    homeClient: HomeClient = new HomeClient();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: { title: 'You can use photo order for', icon: 'iconsminds-clock', value: 0 },\n        }\n    }\n\n\n\n    componentDidMount() {\n        this.homeClient.PhotographerDetails().then(response => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Error', 3000, null, null, '');\n            } else {\n                this.setState({\n                    ...this.state.data,\n                    data: {\n                        value: response.data.Data.AddEditPhotographerPopUpViewModel.EventSubscription\n                    }\n                });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <Breadcrumb heading=\"Overview\" match={this.props.match} />\n                        <Separator className=\"mb-5\" />\n                    </Colxx>\n                </Row>\n                <Row>\n                    <Colxx xxs=\"12\" className=\"mb-3\">\n                        <Card className=\"mb-4\">\n                            <CardBody>\n                                <Row>\n                                    <Colxx sm=\"6\">\n                                        <img className=\"img-fluid border-radius\" src=\"/assets/img/photoorder.jpg\" />\n\n                                    </Colxx>\n                                    <Colxx sm=\"6\" className={\"d-flex\"} style={{ flexDirection: \"column\" }}>\n                                        <h3 style={{ fontWeight: \"bold\" }}>Photo Order - Best mobile photo kiosk</h3>\n                                        <p>\n                                            If you have a printer and want to increase the number of printed photos, the Photo Order system is the perfect solution for you.\n                                            <br />It allows your customers to send photos directly from their phone, informs about the price of the order and at the same time informs about special offers.\n                                            <br />It has never been so easy and fast to transfer photos from your phone.\n                                            <br />In addition, we will provide you with a special link that will expand your current website with a fully functional e-shop.\n                                            <br />Now your customers can send, pay, receive photos and more right from home.\n                                            <br /><br /><strong>Be online 24/7 !!!</strong>\n                                            <br /><br />Interested? Contact us !!!\n                                        </p>\n                                        <Row style={{ flex: \"1 1 auto\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                                            <Colxx xss=\"12\">\n                                                <div className='icon-cards-row text-center'>\n                                                    <div key={`icon_card_0`}>\n                                                        <i className={'iconsminds-clock'} />\n                                                        <p className=\"card-text font-weight-semibold mb-0\">\n                                                            You can use photo order for\n                                                        </p>\n                                                        <p className=\"lead text-center\">{this.state.data.value} days</p>\n                                                    </div>\n                                                </div>\n                                            </Colxx>\n                                        </Row>\n                                    </Colxx>\n                                </Row>\n                            </CardBody>\n                        </Card>\n                    </Colxx>\n                </Row>\n            </>\n        );\n    }\n}\n\n\nexport default OverviewView;","import React from \"react\";\nimport { Row, Card, Badge, CustomInput, Button, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, CardBody, CardSubtitle } from \"reactstrap\";\nimport { NavLink } from 'react-router-dom';\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport classnames from \"classnames\";\n\nimport IntlMessages from \"../../../helpers/IntlMessages\";\n\nimport \"./index.scss\";\nimport { HomeClient } from \"../../../api/homeClient\";\nimport { PhotoClient } from \"../../../api/photoClient\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport IconCard from \"../../../components/cards/IconCard\";\nimport SingleLightbox from \"../../../components/pages/SingleLightbox\";\n\n\n\nexport class UpdatesView extends React.Component<any, any> {\n\n    homeClient: HomeClient = new HomeClient();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: { title: 'You can use photo order for', icon: 'iconsminds-clock', value: 0 },\n        }\n    }\n\n\n\n    componentDidMount() {\n        this.homeClient.PhotographerDetails().then(response => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Error', 3000, null, null, '');\n            } else {\n                this.setState({\n                    ...this.state.data,\n                    data: {\n                        value: response.data.Data.AddEditPhotographerPopUpViewModel.EventSubscription\n                    }\n                });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <Breadcrumb heading=\"Plug-ins\" match={this.props.match} />\n                        <Separator className=\"mb-5\" />\n                    </Colxx>\n                </Row>\n                <Row>\n                    <Colxx sm=\"4\" className=\"mb-3 pr-4 pl-4\">\n                        <Card className=\"mb-4\">\n                            <SingleLightbox\n                                thumb=\"/assets/img/smsgate.jpg\"\n                                large=\"/assets/img/smsgate.jpg\"\n                                className=\"card-img-top\"\n                            />\n\n                            <CardBody>\n                                <p className=\"font-weight-bold\">\n                                    Promotion Cloud  beta version\n                                                 </p>\n                                <p className=\"mb-3\">\n                                    A good application is not enough? You're right, add this plugin and you will be able to send promotions to your customers via SMS, e-mail or push notifications.\n                                                 <br /><br />Be active, don't wait, increase your sales today !!\n                                    <br /><br />\n                                </p>\n                                <p>\n                                    <p className=\"text-muted text-small mb-2\">\n                                        Price\n                                                </p>\n                                    <p className=\"mb-3\">Free beta version</p>\n                                </p>\n                                <p className={\"text-center\"}>\n                                    <Button color=\"primary\">Buy</Button>\n                                </p>\n                            </CardBody>\n                        </Card>\n                    </Colxx>\n                    <Colxx sm=\"4\" className=\"mb-3 pr-4 pl-4\">\n                        <Card className=\"mb-4\">\n                            <SingleLightbox\n                                thumb=\"/assets/img/payment.jpg\"\n                                large=\"/assets/img/payment.jpg\"\n                                className=\"card-img-top\"\n                            />\n\n                            <CardBody>\n                                <p className=\"font-weight-bold\">\n                                    Payment gate  beta version                                                 </p>\n                                <p className=\"mb-3\">\n                                    Do you want to attract new customers? Do you want to increase the reach of your store but you are worried about how to withdraw money?\n                                    <br /><br />Just install this plugin and customers will be able to deposit money into your bank account, using a payment card, or connecting to a payment gate. Don't worry, we won't charge any additional or hidden fees.\n                                            </p>\n                                <p>\n                                    <p className=\"text-muted text-small mb-2\">\n                                        Price\n                                                </p>\n                                    <p className=\"mb-3\">Free beta version</p>\n                                </p>\n                                <p className={\"text-center\"}>\n                                    <Button color=\"primary\">Buy</Button>\n                                </p>\n                            </CardBody>\n                        </Card>\n                    </Colxx>\n                    <Colxx sm=\"4\" className=\"mb-3 pr-4 pl-4\">\n                        <Card className=\"mb-4\">\n                            <SingleLightbox\n                                thumb=\"/assets/img/screen.jpg\"\n                                large=\"/assets/img/screen.jpg\"\n                                className=\"card-img-top\"\n                            />\n\n                            <CardBody>\n                                <p className=\"font-weight-bold\">\n                                    My e-shop  beta version                                                 </p>\n                                <p className=\"mb-3\">\n                                    If you have a website then you absolutely need to add this plugin. You just copy the link, add it to your website, and then get orders from your customers.\n                                    <br />Your website is a fully functional e-shop\n                                    <br />Your customers do not need to install anything, they just need to visit your website and send orders !!!\n                                            </p>\n                                <p>\n                                    <p className=\"text-muted text-small mb-2\">\n                                        Price\n                                                </p>\n                                    <p className=\"mb-3\">Free beta version</p>\n                                </p>\n                                <p className={\"text-center\"}>\n                                    <Button color=\"primary\">Buy</Button>\n                                </p>\n                            </CardBody>\n                        </Card>\n                    </Colxx>\n                </Row>\n            </>\n        );\n    }\n}\n\n\nexport default UpdatesView;","import React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Card, CardTitle, CardBody, FormGroup, Label, Input, FormText, CustomInput, Button } from 'reactstrap';\nimport { Colxx, Separator } from '../../components/common/CustomBootstrap';\nimport Breadcrumb from '../../containers/navs/Breadcrumb';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { HomeClient } from '../../api/homeClient';\nimport { Formik, Field, Form } from 'formik';\nimport { string, number } from 'prop-types';\nimport { PhotoClient } from '../../api/photoClient';\nimport { NotificationManager } from '../../components/common/react-notifications';\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\n\nexport class DefaultSettings extends React.Component<any, any> {\n\n    state = {\n        form: null\n    }\n\n    homeClient: HomeClient = new HomeClient();\n    photoClient: PhotoClient = new PhotoClient();\n\n    currencies = [\"EUR\",\n        \"AUD\",\n        \"BRL\",\n        \"CAD\",\n        \"CZK\",\n        \"DKK\",\n        \"HKD\",\n        \"HUF\",\n        \"INR\",\n        \"ILS\",\n        \"JPY\",\n        \"MYR\",\n        \"MXN\",\n        \"TWD\",\n        \"NZD\",\n        \"NOK\",\n        \"PHP\",\n        \"PLN\",\n        \"GBP\",\n        \"RUB\",\n        \"SGD\",\n        \"SEK\",\n        \"CHF\",\n        \"THB\",\n        \"USD\"]\n\n    initialValues = {\n        Nickname: \"\",\n        Login: \"\",\n        Street: \"\",\n        PostalCode: \"\",\n        Phone: \"\",\n        CompanyName: \"\",\n        IsPrivate: false,\n        Discrict: \"\",\n        City: \"\",\n        WebSiteUrl: \"\",\n        IsPremiumChecked: false,\n        VideoGallery: \"\",\n        PhotoGalleryUrlOpenLogin: \"\",\n        SelectedPremiumType: number,\n        MAC3: \"\",\n        MAC2: \"\",\n        MAC: \"\",\n        PayPalAccountID: \"\",\n        VivwaWalletId: \"\",\n        IBAN: \"\",\n        ShippingPrice: 0,\n        Currency: null,\n        MinimalOrderValue: null\n    }\n\n    constructor(props: any) {\n        super(props);\n\n        this.homeClient.PhotographerDetails().then((response) => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Error', 3000, null, null, '');\n            } else {\n                this.setState({ form: response.data.Data.AddEditPhotographerPopUpViewModel })\n            }\n\n        });\n    }\n\n    formData = () => {\n        return this.state.form != null ? this.state.form : this.initialValues;\n    }\n\n    onSubmit = (values, { setSubmitting }) => {\n        NotificationManager.info(\"Saving data...\", 'Saving data', 3000, null, null, '');\n        this.photoClient.EditPhotographer(values).then((response) => {\n\n            if (response.data.Data) {\n                NotificationManager.success(\"All data saved to database\", 'Data saved', 3000, null, null, '');\n            } else {\n                NotificationManager.error(response.data.Error, 'Saving error', 3000, null, null, '');\n            }\n            setSubmitting(false);\n\n        });\n\n    }\n\n    render() {\n        return (\n            <>\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <Breadcrumb heading=\"Settings\" match={this.props.match} />\n                        <Separator className=\"mb-5\" />\n                    </Colxx>\n                </Row>\n                <Formik\n                    enableReinitialize={true}\n                    initialValues={this.formData() as any}\n                    onSubmit={this.onSubmit}\n                >\n                    {({\n                        handleSubmit,\n                        setFieldValue,\n                        setFieldTouched,\n                        handleChange,\n                        handleBlur,\n                        values,\n                        errors,\n                        touched,\n                        isSubmitting,\n                    }) => (<>\n                        <Form>\n                            <Row>\n                                <Colxx lg=\"12\" xl=\"12\">\n\n                                    <Card className=\"mb-3\">\n                                        <CardBody>\n                                            <CardTitle>\n                                                Main informations\n                                            </CardTitle>\n\n                                            <FormGroup>\n                                                <Label for=\"Nickname\">\n                                                    Display name\n                                                </Label>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    name=\"Nickname\"\n                                                    type=\"text\"\n                                                    id=\"Nickname\"\n                                                    placeholder={\"\"}\n                                                />\n\n                                            </FormGroup>\n                                            <FormGroup>\n                                                <Label for=\"Login\">\n                                                    E-mail\n                                                </Label>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    name=\"Login\"\n                                                    type=\"email\"\n                                                    id=\"Login\"\n                                                    placeholder={\"\"}\n                                                />\n                                            </FormGroup>\n                                            <FormGroup>\n                                                <Label for=\"Phone\">\n                                                    Phone number\n                                                </Label>\n\n                                                <Field name=\"Phone\">\n                                                    {({\n                                                        field,\n                                                        form: { touched, errors },\n                                                        meta,\n                                                    }) => (\n                                                        <PhoneInput enableSearch={true} inputClass=\"w-100\" placeholder={\"Phone\"} country={'gr'} value={field.value} onChange={phone => { console.log(phone, field); setFieldValue(\"Phone\", `+${phone}`) }} />\n                                                    )}\n                                                </Field>\n                                            </FormGroup>\n                                            <FormGroup>\n                                                <Label for=\"WebSiteUrl\">\n                                                    Website\n                                                </Label>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    name=\"WebSiteUrl\"\n                                                    type=\"text\"\n                                                    id=\"WebSiteUrl\"\n                                                    placeholder={\"\"}\n                                                />\n                                            </FormGroup>\n                                        </CardBody>\n                                    </Card>\n                                    <Card className=\"mb-3\">\n                                        <CardBody>\n                                            <CardTitle>\n                                                Company informations\n                                            </CardTitle>\n\n                                            <FormGroup>\n                                                <Label for=\"CompanyName\">\n                                                    Company name\n                                                </Label>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    name=\"CompanyName\"\n                                                    type=\"text\"\n                                                    id=\"CompanyName\"\n                                                    placeholder={\"\"}\n                                                />\n                                            </FormGroup>\n                                            <FormGroup>\n                                                <Label for=\"Street\">\n                                                    Address\n                                                </Label>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    name=\"Street\"\n                                                    type=\"text\"\n                                                    id=\"Street\"\n                                                    placeholder={\"\"}\n                                                />\n                                            </FormGroup>\n                                            <Row>\n                                                <Colxx sm={6}>\n                                                    <FormGroup>\n                                                        <Label for=\"PostalCode\">\n                                                            VAT Number\n                                                        </Label>\n                                                        <Field\n                                                            className=\"form-control\"\n                                                            name=\"PostalCode\"\n                                                            type=\"text\"\n                                                            id=\"PostalCode\"\n                                                            placeholder={\"\"}\n                                                        />\n                                                    </FormGroup>\n                                                </Colxx>\n                                                <Colxx sm={6}>\n                                                    <FormGroup>\n                                                        <Label for=\"Discrict\">\n                                                            Tax Office\n                                                        </Label>\n                                                        <Field\n                                                            className=\"form-control\"\n                                                            name=\"Discrict\"\n                                                            type=\"text\"\n                                                            id=\"Discrict\"\n                                                            placeholder={\"\"}\n                                                        />\n                                                    </FormGroup>\n                                                </Colxx>\n                                            </Row>\n                                            <FormGroup>\n                                                <Label for=\"City\">\n                                                    Profession\n                                                </Label>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    name=\"City\"\n                                                    type=\"text\"\n                                                    id=\"City\"\n                                                    placeholder={\"\"}\n                                                />\n                                            </FormGroup>\n                                        </CardBody>\n                                    </Card>\n                                    <Card className=\"mb-3\">\n                                        <CardBody>\n                                            <CardTitle>\n                                                Accounting\n                                            </CardTitle>\n\n                                            <FormGroup>\n                                                <Label for=\"iban\">\n                                                    IBAN\n                                                </Label>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    name=\"IBAN\"\n                                                    type=\"text\"\n                                                    id=\"IBAN\"\n                                                    placeholder={\"\"}\n                                                />\n                                            </FormGroup>\n                                            <Row>\n                                                <Colxx sm={6}>\n                                                    <FormGroup>\n                                                        <Label for=\"PayPalAccountID\">\n                                                            PayPal Account ID\n                                                        </Label>\n                                                        <Field\n                                                            className=\"form-control\"\n                                                            name=\"PayPalAccountID\"\n                                                            type=\"text\"\n                                                            id=\"PayPalAccountID\"\n                                                            placeholder={\"\"}\n                                                        />\n                                                    </FormGroup>\n                                                </Colxx>\n                                                <Colxx sm={6}>\n                                                    <FormGroup>\n                                                        <Label for=\"VivaWalletId\">\n                                                            VivaWallet ID\n                                                        </Label>\n                                                        <Field\n                                                            className=\"form-control\"\n                                                            name=\"VivaWalletId\"\n                                                            type=\"text\"\n                                                            id=\"VivaWalletId\"\n                                                            placeholder={\"\"}\n                                                        />\n                                                    </FormGroup>\n                                                </Colxx>\n                                            </Row>\n                                            <Row>\n                                                <Colxx sm={6}>\n                                                    <FormGroup>\n                                                        <Label for=\"ShippingPrice\">\n                                                            Shipping price\n                                                        </Label>\n                                                        <Field\n                                                            className=\"form-control\"\n                                                            name=\"ShippingPrice\"\n                                                            type=\"number\"\n                                                            id=\"ShippingPrice\"\n                                                            placeholder={\"\"}\n                                                        />\n                                                    </FormGroup>\n                                                </Colxx>\n                                                <Colxx sm={6}>\n                                                    <FormGroup>\n                                                        <Label for=\"Currency\">\n                                                            Currency\n                                                        </Label>\n                                                        <select\n                                                            id=\"Currency\"\n                                                            name=\"Currency\"\n                                                            className=\"form-control\"\n                                                            value={values.Currency}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                        >\n                                                            <option disabled hidden selected></option>\n                                                            {this.currencies.map((currency, index) => {\n                                                                return (<option value={index}>{currency}</option>)\n                                                            })}\n                                                        </select>\n\n                                                    </FormGroup>\n                                                </Colxx>\n                                                <Colxx sm={6}>\n                                                    <FormGroup>\n                                                        <Label for=\"MinimalOrderValue\">\n                                                            Minimal Order Value\n                                                        </Label>\n                                                        <Field\n                                                            className=\"form-control\"\n                                                            name=\"MinimalOrderValue\"\n                                                            type=\"number\"\n                                                            id=\"MinimalOrderValue\"\n                                                            placeholder={\"\"}\n                                                        />\n\n                                                    </FormGroup>\n                                                </Colxx>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                    <Card className=\"mb-3\">\n                                        <CardBody>\n                                            <CardTitle>\n                                                Devices\n                                            </CardTitle>\n\n                                            <FormGroup>\n                                                <Label for=\"MAC3\">\n                                                    ID number for photo order app\n                                                </Label>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    name=\"MAC3\"\n                                                    type=\"text\"\n                                                    id=\"MAC3\"\n                                                    placeholder={\"\"}\n                                                />\n                                            </FormGroup>\n\n                                            <Row>\n                                                <Colxx sm={6}>\n                                                    <FormGroup>\n                                                        <Label for=\"MAC\">\n                                                            ID number for photo hosting service\n                                                        </Label>\n                                                        <Field\n                                                            className=\"form-control\"\n                                                            name=\"MAC\"\n                                                            type=\"text\"\n                                                            id=\"MAC\"\n                                                            placeholder={\"\"}\n                                                        />\n                                                    </FormGroup>\n                                                </Colxx>\n                                                <Colxx sm={6}>\n                                                    <FormGroup>\n                                                        <Label for=\"MAC2\">\n                                                            ID number for photo hosting service\n                                                        </Label>\n                                                        <Field\n                                                            className=\"form-control\"\n                                                            name=\"MAC2\"\n                                                            type=\"text\"\n                                                            id=\"MAC2\"\n                                                            placeholder={\"\"}\n                                                        />\n                                                    </FormGroup>\n                                                </Colxx>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                    <Card>\n                                        <CardBody>\n                                            <Button color=\"primary\" type=\"submit\">\n                                                Save\n                                            </Button>\n                                        </CardBody>\n                                    </Card>\n\n                                </Colxx>\n\n                            </Row>\n                        </Form>\n                    </>)}\n                </Formik>\n            </>);\n    }\n}\n\nexport default injectIntl(DefaultSettings);\n","import React from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    FormGroup,\n    InputGroup,\n    CustomInput,\n    InputGroupAddon,\n    InputGroupText,\n    FormText,\n    Row,\n} from 'reactstrap';\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport { Formik, Form, Field } from 'formik';\nimport { PhotoClient } from '../../../api/photoClient';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport Select from 'react-select'\nimport { CategoryClient } from '../../../api/categoriesClient';\nimport { ICategory } from '../categories/category';\nimport { AttributesClient } from '../../../api/attributesClient';\nimport { IAttributeGroup, IAttribute } from '../attributes/attribute';\nimport { responseItemToCategory, responseItemToAttributeGroup } from '../PhotoOrderHelper';\nimport AttributeSelector, { IAttributeGroupItem } from './components/AttributesSelector';\nimport PriceRangeSelector from './components/PriceRangeSelector';\n\nexport interface IAddProductModalProps {\n    modalOpen: boolean,\n    toggleModal: () => void,\n    onCreate: () => void\n}\n\nexport interface IAddProductModalState {\n    customSize: boolean,\n    categories: ICategory[],\n    attributeGroups: IAttributeGroup[]\n}\n\nexport class AddProductModal extends React.Component<IAddProductModalProps, IAddProductModalState> {\n\n    photoClient: PhotoClient = new PhotoClient();\n\n    categoriesClient: CategoryClient = new CategoryClient();\n    attributesClient: AttributesClient = new AttributesClient();\n\n    initialValues = {\n        Name: \"\",\n        Size: 0,\n        Description: \"\",\n        Price: null,\n        SizeSelect: 0,\n        File: null,\n        attributeGroups: [],\n        categories: [],\n        QuantityRangeMin: \"\",\n        QuantityRangeMax: \"\",\n        PriceRange: []\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customSize: false,\n            categories: [],\n            attributeGroups: []\n        }\n\n        this.categoriesClient.List(\"ProductCategories\").then(response => {\n            let data = response.data.Data.map(x => responseItemToCategory(x))\n            this.setState({ categories: data })\n        });\n\n        this.attributesClient.List(\"ProductAttributes\").then(response => {\n            let data = response.data.Data.map(x => responseItemToAttributeGroup(x))\n            this.setState({ attributeGroups: data })\n        });\n    }\n\n\n\n    onSubmit = async (values, formik) => {\n        let formData = new FormData();\n        formData.append(\"Description\", values.Description);\n        formData.append(\"Name\", values.Name);\n        formData.append(\"Price\", \"0\");\n        formData.append(\"Size\", values.Size);\n        formData.append(\"FileAsBase64\", values.File);\n        formData.append(\"QuantityRangeMin\", values.QuantityRangeMin);\n        formData.append(\"QuantityRangeMax\", values.QuantityRangeMax);\n\n        values.PriceRange.forEach((x, index) => {\n            formData.append(`ProductPrices[${index}].PriceLevelFrom`, x.from);\n            if (x.to) {\n                formData.append(`ProductPrices[${index}].PriceLevelTo`, x.to);\n            }\n\n            formData.append(`ProductPrices[${index}].Price`, x.value);\n            formData.append(`ProductPrices[${index}].IsDeleted`, \"false\");\n        });\n\n        values.categories.forEach(x => {\n            formData.append(\"CategoriesIds\", x.toString());\n        });\n\n        let attributesGroups: IAttributeGroupItem[] = values.attributeGroups;\n        Array.prototype.concat.apply([], attributesGroups.map(x => x.attributes)).forEach((attrId: number) => {\n            if (!isNaN(attrId)) {\n                formData.append(\"AttributesIds\", attrId.toString());\n            }\n        });\n\n        NotificationManager.info(\"Saving data...\", 'Saving data', 3000, null, null, '');\n        this.photoClient.AddProduct(formData).then((response) => {\n            if (response.data.Error) {\n                NotificationManager.error(\"Saving error\", response.data.Error, 3000, null, null, '');\n            } else {\n                NotificationManager.success(\"Data saved to database.\", \"Saving data success\", 3000, null, null, '');\n                this.props.onCreate();\n                this.props.toggleModal();\n            }\n            formik.setSubmitting(false);\n        });\n    }\n\n    get categories() {\n        return this.state.categories.map(category => ({ value: category.Id, label: category.Name }));\n    }\n\n    get attributeGroups() {\n        let data: any[] = [];\n        this.state.attributeGroups.forEach(x => {\n            data.push({\n                label: x.Name,\n                options: x.attributes.map(attr => ({ label: attr.Name, value: attr.Id }))\n            })\n        });\n        return data;\n    }\n\n    render() {\n        return (<Formik\n            initialValues={this.initialValues}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n        >\n            {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                isSubmitting,\n                submitForm\n            }) => (\n                <Form><Modal\n                    isOpen={this.props.modalOpen}\n                    toggle={this.props.toggleModal}\n                    wrapClassName=\"modal-right\"\n                    backdrop=\"static\"\n                >\n                    <ModalHeader toggle={this.props.toggleModal}>\n                        Add product\n                        </ModalHeader>\n                    <ModalBody>\n\n                        <FormGroup>\n                            <Label for=\"Name\">\n                                Name\n                        </Label>\n                            <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Name\"} maxLength={20} />\n                            <FormText color=\"muted\">\n                                Maximum 20 letters\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"Description\">\n                                Description\n                                </Label>\n                            <Field className=\"form-control\" name=\"Description\" type=\"text\" id=\"Description\" placeholder={\"Description\"} maxLength={100} />\n                            <FormText color=\"muted\">\n                                Maximum 100 letters\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"File\">\n                                Image\n                                </Label>\n                            <InputGroup>\n                                <CustomInput\n                                    type=\"file\"\n                                    id=\"File\"\n                                    name=\"File\"\n\n                                    onChange={(event) => {\n                                        if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                            setFieldValue(\"File\", event.currentTarget.files[0]);\n                                        }\n                                    }} />\n                            </InputGroup>\n                            <FormText color=\"muted\">\n                                Maximum 800x800 pixels\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"Price\">\n                                Price\n                                </Label>\n\n                            <div>\n                                <PriceRangeSelector initialValues={[]} onChange={(data) => { setFieldValue(\"PriceRange\", data); }} />\n                            </div>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"Size\">\n                                Size\n                                 </Label>\n                            <select\n                                id=\"SizeSelect\"\n                                name=\"SizeSelect\"\n                                className=\"form-control\"\n                                value={values.SizeSelect}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            >\n                                <option disabled hidden defaultChecked></option>\n                                <option value={0}>Original size</option>\n                                <option value={1}>Custom size</option>\n                            </select>\n                            {this.state.customSize && <FormText color=\"muted\">\n                                For the longer size of photo\n                                </FormText>}\n                            {values.SizeSelect == 1 && <InputGroup className=\"mt-2\">\n                                <Field className=\"form-control\" name=\"Size\" type=\"number\" id=\"Size\" placeholder={\"Size\"} />\n                                <InputGroupAddon addonType=\"append\">\n                                    <InputGroupText>px</InputGroupText>\n                                </InputGroupAddon>\n                            </InputGroup>}\n                        </FormGroup>\n                        <Row>\n                            <FormGroup className=\"col-6 mb-0\">\n                                <Label>\n                                    Min. quantity\n                                </Label>\n                                <Field className=\"form-control\" name=\"QuantityRangeMin\" type=\"number\" id=\"QuantityRangeMin\" placeholder={\"\"} />\n                            </FormGroup>\n                            <FormGroup className=\"col-6 mb-0\">\n                                <Label>\n                                    Max quantity\n                            </Label>\n                                <Field className=\"form-control\" name=\"QuantityRangeMax\" type=\"number\" id=\"QuantityRangeMax\" placeholder={\"\"} />\n\n                            </FormGroup>\n                            <FormGroup className=\"col-12\">\n                                <FormText color=\"muted\">\n                                    Leave empty if not set\n                                </FormText>\n                            </FormGroup>\n\n                        </Row>\n\n\n                        <FormGroup>\n                            <Label for=\"Categories\">\n                                Categories\n                            </Label>\n                            <Select isMulti name=\"colors\" options={this.categories} classNamePrefix=\"select\" onChange={(data) => { setFieldValue('categories', data ? data.map(x => x.value) : []) }} />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"Attributes\">\n                                Attributes\n                                 </Label>\n                            <div>\n                                <AttributeSelector onChange={(data) => setFieldValue('attributeGroups', data)} attributeGroups={this.state.attributeGroups} selectedAttributeGroups={[]} />\n\n                            </div>\n\n\n                            {/* <Select isMulti name=\"attributes\" options={this.attributeGroups} classNamePrefix=\"select\" /> */}\n                        </FormGroup>\n\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" outline onClick={this.props.toggleModal}>\n                            Cancel\n                            </Button>\n                        <Button color=\"primary\" type=\"submit\" onClick={submitForm}>\n                            Save\n                            </Button>\n                    </ModalFooter>\n                </Modal>\n                </Form>)\n            }\n        </Formik>\n        );\n    }\n}\n\nexport default AddProductModal;\n","import React from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\nimport IntlMessages from \"../../../helpers/IntlMessages\";\nimport { IProduct } from \"./product\";\n\nexport interface IDeleteProductModalProps {\n    isOpen: boolean\n    onDelete: () => void\n    toggle: (show: boolean) => void\n    title: string,\n    description: string\n}\n\nexport class DeleteProductModal extends React.Component<IDeleteProductModalProps, any> {\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                toggle={() => this.props.toggle(!this.props.isOpen)}\n            >\n                <ModalHeader>\n                    {this.props.title}\n                </ModalHeader>\n                <ModalBody>\n                    {this.props.description}\n                </ModalBody>\n                <ModalFooter style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                    <Button\n                        color=\"secondary\"\n                        onClick={() => this.props.toggle(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        color=\"danger\"\n                        onClick={() => { this.props.onDelete(); this.props.toggle(false) }}\n                    >\n                        YES\n                    </Button>{' '}\n\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}","import React from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    FormGroup,\n    InputGroup,\n    CustomInput,\n    InputGroupAddon,\n    InputGroupText,\n    FormText,\n    Row,\n} from 'reactstrap';\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport { Formik, Form, Field } from 'formik';\nimport { PhotoClient } from '../../../api/photoClient';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport Select from 'react-select'\nimport { CategoryClient } from '../../../api/categoriesClient';\nimport { ICategory } from '../categories/category';\nimport { AttributesClient } from '../../../api/attributesClient';\nimport { IAttributeGroup, IAttribute } from '../attributes/attribute';\nimport { responseItemToCategory, responseItemToAttributeGroup } from '../PhotoOrderHelper';\nimport AttributeSelector, { IAttributeGroupItem } from './components/AttributesSelector';\nimport PriceRangeSelector, { IPriceRange } from './components/PriceRangeSelector';\nimport { IProduct } from './product';\n\nexport interface IEditProductModalProps {\n    modalOpen: boolean,\n    toggleModal: () => void,\n    onEdit: () => void\n    product: IProduct\n}\n\nexport interface IeDITProductModalState {\n    customSize: boolean,\n    categories: ICategory[],\n    attributeGroups: IAttributeGroup[]\n}\n\nexport class EditProductModal extends React.Component<IEditProductModalProps, IeDITProductModalState> {\n\n    photoClient: PhotoClient = new PhotoClient();\n\n    categoriesClient: CategoryClient = new CategoryClient();\n    attributesClient: AttributesClient = new AttributesClient();\n\n    get initialValues() {\n        return {\n            Name: this.props.product.Name,\n            Size: this.props.product.Size,\n            Description: this.props.product.Description,\n            Price: this.props.product.Price,\n            SizeSelect: this.props.product.Size > 0 ? 1 : 0,\n            File: null,\n            attributeGroups: this.getAttributeGroupsFromAttributeList(this.props.product.AttributesIds),\n            categories: this.props.product.CategoriesIds,\n            QuantityRangeMin: this.props.product.QuantityRangeMin,\n            QuantityRangeMax: this.props.product.QuantityRangeMax,\n            PriceRange: []\n        }\n    }\n\n    get IsMainProduct(): boolean {\n        return !this.props.product.MainProductId;\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customSize: false,\n            categories: [],\n            attributeGroups: []\n        }\n\n        this.categoriesClient.List(\"ProductCategories\").then(response => {\n            let data = response.data.Data.map(x => responseItemToCategory(x))\n            this.setState({ categories: data })\n        });\n\n        this.attributesClient.List(\"ProductAttributes\").then(response => {\n            let data = response.data.Data.map(x => responseItemToAttributeGroup(x))\n            this.setState({ attributeGroups: data })\n        });\n    }\n\n\n\n    onSubmit = async (values, formik) => {\n        let formData = new FormData();\n        formData.append(\"Id\", this.props.product.Id.toString());\n        formData.append(\"Description\", values.Description);\n        formData.append(\"Name\", values.Name);\n        formData.append(\"Price\", \"0\");\n        formData.append(\"Size\", values.Size);\n        formData.append(\"FileAsBase64\", values.File);\n\n        if (values.QuantityRangeMin != null) {\n            formData.append(\"QuantityRangeMin\", values.QuantityRangeMin);\n        }\n\n        if (values.QuantityRangeMax != null) {\n            formData.append(\"QuantityRangeMax\", values.QuantityRangeMax);\n        }\n\n\n\n        if (this.IsMainProduct) {\n            values.PriceRange.forEach((x, index) => {\n                formData.append(`ProductPrices[${index}].PriceLevelFrom`, x.from);\n                if (x.to) {\n                    formData.append(`ProductPrices[${index}].PriceLevelTo`, x.to);\n                }\n                formData.append(`ProductPrices[${index}].Price`, x.value);\n                formData.append(`ProductPrices[${index}].IsDeleted`, \"false\");\n            });\n\n            values.categories.forEach(x => {\n                formData.append(\"CategoriesIds\", x.toString());\n            });\n\n            let attributesGroups: IAttributeGroupItem[] = values.attributeGroups;\n            Array.prototype.concat.apply([], attributesGroups.map(x => x.attributes)).forEach((attrId: number) => {\n                if (!isNaN(attrId)) {\n                    formData.append(\"AttributesIds\", attrId.toString());\n                }\n            });\n            NotificationManager.info(\"Saving data...\", 'Saving data', 3000, null, null, '');\n            this.photoClient.EditProduct(formData).then((response) => {\n                if (response.data.Error) {\n                    NotificationManager.error(\"Saving error\", response.data.Error, 3000, null, null, '');\n                } else {\n                    NotificationManager.success(\"Data saved to database.\", \"Saving data success\", 3000, null, null, '');\n                    this.props.onEdit();\n                    this.props.toggleModal();\n                }\n                formik.setSubmitting(false);\n            });\n        } else {\n            NotificationManager.info(\"Saving data...\", 'Saving data', 3000, null, null, '');\n            this.photoClient.EditAutogeneratedProduct(formData).then((response) => {\n                if (response.data.Error) {\n                    NotificationManager.error(\"Saving error\", response.data.Error, 3000, null, null, '');\n                } else {\n                    NotificationManager.success(\"Data saved to database.\", \"Saving data success\", 3000, null, null, '');\n                    this.props.onEdit();\n                    this.props.toggleModal();\n                }\n                formik.setSubmitting(false);\n            });\n        }\n\n\n\n        // this.photoClient.EditProduct(formData).then((response) => {\n        //     if (response.data.Error) {\n        //         NotificationManager.error(\"Saving error\", response.data.Error, 3000, null, null, '');\n        //     } else {\n        //         NotificationManager.success(\"Data saved to database.\", \"Saving data success\", 3000, null, null, '');\n        //         this.props.onEdit();\n        //         this.props.toggleModal();\n        //     }\n        //     formik.setSubmitting(false);\n        // });\n    }\n\n    get categories() {\n        return this.state.categories.map(category => ({ value: category.Id, label: category.Name }));\n    }\n\n    selectedCategories = (list: number[]) => {\n        var categories = this.state.categories;\n        return categories.filter(x => list.indexOf(x.Id) > -1).map(x => ({ value: x.Id, label: x.Name }))\n    }\n\n    get attributeGroups() {\n        let data: any[] = [];\n        this.state.attributeGroups.forEach(x => {\n            data.push({\n                label: x.Name,\n                options: x.attributes.map(attr => ({ label: attr.Name, value: attr.Id }))\n            })\n        });\n        return data;\n    }\n\n    getAttributeGroup(attributeId: number) {\n        var attrGroup = this.state.attributeGroups.find(x => x.attributes.findIndex(x => x.Id == attributeId) > -1);\n        return attrGroup ? attrGroup.Id : 0\n    }\n\n    getAttributeGroupsFromAttributeList = (attributes: number[]): IAttributeGroupItem[] => {\n        var att = {\n\n        }\n        attributes.forEach((attr) => {\n            var group = this.getAttributeGroup(attr);\n            if (group) {\n                if (!att[group]) {\n                    att[group] = [];\n                }\n                att[group].push(attr);\n            }\n        });\n        var data = Object.keys(att).map<IAttributeGroupItem>(x => ({ id: Number(x), attributes: att[x] }));\n        return data;\n    }\n\n    initialPriceRanges = (): IPriceRange[] => {\n        let data = this.props.product.ProductPrices.map<IPriceRange>(x => ({ from: x.PriceLevelFrom, to: x.PriceLevelTo, value: x.Price }))\n        return data;\n    }\n\n    render() {\n        return (<Formik\n            initialValues={this.initialValues}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n        >\n            {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                isSubmitting,\n                submitForm\n            }) => (\n                <Form><Modal\n                    isOpen={this.props.modalOpen}\n                    toggle={this.props.toggleModal}\n                    wrapClassName=\"modal-right\"\n                    backdrop=\"static\"\n                >\n                    <ModalHeader toggle={this.props.toggleModal}>\n                        Edit product\n                        </ModalHeader>\n                    <ModalBody>\n\n                        <FormGroup>\n                            <Label for=\"Name\">\n                                Name\n                        </Label>\n                            <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Name\"} maxLength={20} />\n                            <FormText color=\"muted\">\n                                Maximum 20 letters\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"Description\">\n                                Description\n                                </Label>\n                            <Field className=\"form-control\" name=\"Description\" type=\"text\" id=\"Description\" placeholder={\"Description\"} maxLength={100} />\n                            <FormText color=\"muted\">\n                                Maximum 100 letters\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"File\">\n                                Image\n                                </Label>\n                            <InputGroup>\n                                <CustomInput\n                                    type=\"file\"\n                                    id=\"File\"\n                                    name=\"File\"\n\n                                    onChange={(event) => {\n                                        if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                            setFieldValue(\"File\", event.currentTarget.files[0]);\n                                        }\n                                    }} />\n                            </InputGroup>\n                            <FormText color=\"muted\">\n                                Maximum 800x800 pixels\n                                </FormText>\n                        </FormGroup>\n                        {this.IsMainProduct && <FormGroup>\n                            <Label for=\"Price\">\n                                Price\n                                </Label>\n\n                            <div>\n                                <PriceRangeSelector initialValues={this.initialPriceRanges()} onChange={(data) => { setFieldValue(\"PriceRange\", data); }} />\n                            </div>\n                        </FormGroup>}\n                        <FormGroup>\n                            <Label for=\"Size\">\n                                Size\n                                 </Label>\n                            <select\n                                id=\"SizeSelect\"\n                                name=\"SizeSelect\"\n                                className=\"form-control\"\n                                value={values.SizeSelect}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            >\n                                <option disabled hidden defaultChecked></option>\n                                <option value={0}>Original size</option>\n                                <option value={1}>Custom size</option>\n                            </select>\n                            {this.state.customSize && <FormText color=\"muted\">\n                                For the longer size of photo\n                                </FormText>}\n                            {values.SizeSelect == 1 && <InputGroup className=\"mt-2\">\n                                <Field className=\"form-control\" name=\"Size\" type=\"number\" id=\"Size\" placeholder={\"Size\"} />\n                                <InputGroupAddon addonType=\"append\">\n                                    <InputGroupText>px</InputGroupText>\n                                </InputGroupAddon>\n                            </InputGroup>}\n                        </FormGroup>\n                        <Row>\n                            <FormGroup className=\"col-6 mb-0\">\n                                <Label>\n                                    Min. quantity\n                                </Label>\n                                <Field className=\"form-control\" name=\"QuantityRangeMin\" type=\"number\" id=\"QuantityRangeMin\" placeholder={\"\"} />\n                            </FormGroup>\n                            <FormGroup className=\"col-6 mb-0\">\n                                <Label>\n                                    Max quantity\n                            </Label>\n                                <Field className=\"form-control\" name=\"QuantityRangeMax\" type=\"number\" id=\"QuantityRangeMax\" placeholder={\"\"} />\n                            </FormGroup>\n                            <FormGroup className=\"col-12\">\n                                <FormText color=\"muted\">\n                                    Leave empty if not set\n                                </FormText>\n                            </FormGroup>\n                        </Row>\n\n\n                        {this.IsMainProduct && <FormGroup>\n                            <Label for=\"Categories\">\n                                Categories\n                            </Label>\n                            <Select value={this.selectedCategories(values.categories)} isMulti name=\"colors\" options={this.categories} classNamePrefix=\"select\" onChange={(data) => { setFieldValue('categories', data ? data.map(x => x.value) : []) }} />\n                        </FormGroup>}\n                        {this.IsMainProduct && <FormGroup>\n                            <Label for=\"Attributes\">\n                                Attributes\n                                 </Label>\n                            <div>\n                                <AttributeSelector onChange={(data) => setFieldValue('attributeGroups', data)} attributeGroups={this.state.attributeGroups} selectedAttributeGroups={this.getAttributeGroupsFromAttributeList(this.props.product.AttributesIds)} />\n\n                            </div>\n\n\n                            {/* <Select isMulti name=\"attributes\" options={this.attributeGroups} classNamePrefix=\"select\" /> */}\n                        </FormGroup>\n                        }\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" outline onClick={this.props.toggleModal}>\n                            Cancel\n                            </Button>\n                        <Button color=\"primary\" type=\"submit\" onClick={submitForm}>\n                            Save\n                            </Button>\n                    </ModalFooter>\n                </Modal>\n                </Form>)\n            }\n        </Formik>\n        );\n    }\n}\n\nexport default EditProductModal;\n","import React from \"react\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport { Card, NavLink, Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport { Colxx } from \"../../../../components/common/CustomBootstrap\";\nimport { ICategory } from \"../../categories/category\";\nimport classnames from \"classnames\";\n\ninterface ICategoryListItemProps {\n    category: ICategory;\n    onCollapse: (id) => void;\n    onDelete: (product: ICategory) => void;\n    onEdit: (product: ICategory) => void;\n    onChangeVisible: (category: ICategory, visible: boolean) => void;\n    isCollapsed: boolean\n}\n\nexport class CategoryItem extends React.Component<ICategoryListItemProps, any> {\n    state = {\n        isImage: true,\n        isCollapsed: false\n    }\n\n    onImageError = () => {\n        this.setState({ isImage: false });\n    }\n\n    render() {\n        return (<Colxx xxs=\"12\" className=\"productList\" >\n            <Card className={\"d-flex flex-row productList__card\"}>\n                < NavLink className=\"d-flex\">\n                    <img alt={this.props.category.Name} src={this.state.isImage ? (this.props.category.FilePath || \"\") : \"https://via.placeholder.com/400?text=No%20image\"} className=\"list-thumbnail responsive border-0 card-img-left\" onError={() => this.onImageError()} />\n                </NavLink>\n                <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\n                    <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\n                        <NavLink to={`?p=1`} className=\"w-30\" onClick={() => this.props.onCollapse(this.props.category.Id)}>\n                            <div style={{ cursor: \"pointer\" }} className=\"list-item-heading mb-1 truncate d-flex align-items-center\">\n                                {this.props.category.Name}\n\n                                <div className=\"d-inline-block ml-3\" style={{ width: \"20px\", }}>\n                                    <div className={classnames(\"glyph-icon\", { \"simple-icon-arrow-left\": this.props.isCollapsed, 'simple-icon-arrow-down': !this.props.isCollapsed })} />\n                                </div>\n                            </div>\n                        </NavLink>\n                        <NavLink to={`?p=1`} className=\"w-15\">\n                            <p className=\"list-item-heading mb-1 truncate\">\n                                {this.props.category.Name}\n                            </p>\n                        </NavLink>\n                        <p className=\"mb-1 text-muted text-small w-50\">{this.props.category.Description}</p>\n                        <p className=\"mb-1  w-10 text-right\">\n                            <Badge color={this.props.category.IsHidden ? \"danger\" : \"light\"} pill>\n                                {this.props.category.IsHidden ? \"Hidden\" : \"Visible\"}\n                            </Badge>\n                        </p>\n\n\n                    </div>\n                </div>\n            </Card>\n        </Colxx >)\n    }\n}\n\nexport default CategoryItem;","import React from \"react\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport { Badge, Card, Collapse, DropdownItem, DropdownMenu, DropdownToggle, NavLink, Row, UncontrolledDropdown } from \"reactstrap\";\nimport { Colxx } from \"../../../../components/common/CustomBootstrap\";\nimport { IProduct } from \"../product\";\nimport classnames from \"classnames\";\nimport { ICategory } from \"../../categories/category\";\nimport { IAttribute, IAttributeGroup } from \"../../attributes/attribute\";\n\nimport \"./ProductListItem.scss\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { WEB_ORDERING_BASE_URL } from \"../../../../api/settings\";\nimport { AuthService } from \"../../../../services/auth.service\";\nimport QRCode from \"qrcode.react\";\n\ninterface IThumbListView {\n    product: IProduct;\n    onDelete: (product: IProduct) => void;\n    onEdit: (product: IProduct) => void;\n    categories: ICategory[],\n    attributesGroups: IAttributeGroup[],\n    onChangeVisible: (product: IProduct, visible: boolean) => void;\n    onCollapse: (id) => void;\n    isCollapsed: boolean;\n}\n\ninterface IProductListItemState {\n    isImage: boolean,\n}\n\n\n\nexport class MainProductItem extends React.Component<IThumbListView, IProductListItemState> {\n\n    authService: AuthService = new AuthService();\n\n\n    state = {\n        isImage: true\n    }\n\n    onImageError = () => {\n        this.setState({ isImage: false });\n    }\n\n    getCategory = (categoryId: number): ICategory | undefined => {\n        if (this.props.categories) {\n            return this.props.categories.find(x => x.Id == categoryId);\n        }\n        return undefined;\n    }\n\n    getAttribute = (attributeId: number): IAttribute | undefined => {\n        if (this.props.attributesGroups) {\n            var attributes: IAttribute[] = Array.prototype.concat.apply([], this.props.attributesGroups.map(x => x.attributes))\n            return attributes.find(x => x.Id == attributeId);\n        }\n        return undefined;\n    }\n\n    categoryListName = (categoriesIds: number[]) => {\n        var categories: ICategory[] | undefined = [];\n        categoriesIds.forEach(c => {\n            var asd = this.getCategory(c);\n            if (asd) {\n                categories?.push(asd);\n            }\n        });\n        return categories.map(x => x.Name).join(\", \")\n    }\n\n    attributeListName = (categoriesIds: number[]) => {\n        var categories: IAttribute[] | undefined = [];\n        categoriesIds.forEach(c => {\n            var asd = this.getAttribute(c);\n            if (asd) {\n                categories?.push(asd);\n            }\n        });\n        return categories.map(x => x.Name).join(\", \")\n    }\n\n    onDownloadQrCode = (product: IProduct) => {\n        const canvas: any = document.getElementById(`qrcodedownload-${this.props.product.Id}`);\n        const pngUrl = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        let downloadLink = document.createElement(\"a\");\n        downloadLink.href = pngUrl;\n        downloadLink.download = `qrcode-${product.Id}.png`;\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n    }\n\n    qrCodeValue = () => {\n        if (this.props.product.CategoriesIds.length) {\n            return `${WEB_ORDERING_BASE_URL}/photographer/${this.authService.getId()}/categories/${this.props.product.CategoriesIds[0]}/${this.props.product.Id}`\n        }\n\n        return \"\"\n    }\n\n    render() {\n        return (\n            <Colxx xxs=\"12\" key={this.props.product.Id} className=\"productList\" >\n                <Card className={\"d-flex flex-row productList__card\"}>\n                    <NavLink to={`?p=${this.props.product.Id}`} className=\"d-flex\">\n                        <img alt={this.props.product.Name} src={this.state.isImage ? this.props.product.FileUrl : \"https://via.placeholder.com/400?text=No%20image\"} className=\"list-thumbnail responsive border-0 card-img-left\" onError={() => this.onImageError()} />\n                    </NavLink>\n                    <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\n                        <div className=\"card-body align-self-center d-flex flex-column flex-lg-row min-width-zero align-items-lg-center\">\n                            <NavLink to={`?p=1`} className=\"w-30\" onClick={() => this.props.onCollapse(this.props.product.Id)}>\n                                <div style={{ cursor: \"pointer\" }} className=\"list-item-heading mb-1 truncate d-flex align-items-center\">\n                                    {this.props.product.Name} <span className=\"text-muted text-small ml-2\">({this.props.product.Id})</span>\n\n                                    <div className=\"d-inline-block ml-3\" style={{ width: \"20px\", }}>\n                                        {this.props.product.products?.length > 0 && <div className={classnames(\"glyph-icon\", { \"simple-icon-arrow-left\": this.props.isCollapsed, 'simple-icon-arrow-down': !this.props.isCollapsed })} />}\n                                    </div>\n                                </div>\n                            </NavLink>\n                            <p className=\"mb-1 text-muted text-small w-40\">{this.props.product.Description}</p>\n                            <div className=\"d-flex w-20 text-small text-muted\">\n                                <Row>\n                                    <Colxx>\n                                        {this.props.product.ProductPrices.map(productPrice => (<>\n                                            <div>\n                                                From <strong>{productPrice.PriceLevelFrom}</strong> to <strong>{productPrice.PriceLevelTo == 0 ? \"infinity\" : productPrice.PriceLevelTo}</strong> Pieces - {productPrice.Price.toFixed(2)} &euro;\n                                            </div>\n                                        </>))}\n                                    </Colxx>\n                                </Row>\n                            </div>\n                            <div className=\"d-flex justify-content-end align-items-center w-10\">\n                                <div className=\"qrCode-main\" style={{ display: \"none\" }}>\\\n                                    <QRCode\n                                        id={`qrcodedownload-${this.props.product.Id}`}\n                                        value={this.qrCodeValue()}\n                                        size={400}\n                                        level={\"H\"}\n                                        includeMargin={true}\n                                    />\n                                </div>\n                                <div className=\"mr-4\">\n                                    <UncontrolledDropdown className=\"productList__dropdown\">\n                                        <DropdownToggle caret color=\"secondary\" outline>\n                                            Actions\n                                        </DropdownToggle>\n                                        <DropdownMenu>\n                                            {this.qrCodeValue() != \"\" && <DropdownItem onClick={() => this.onDownloadQrCode(this.props.product)}>\n                                                <i className=\"glyph-icon iconsminds-qr-code\" /> <span>Download QR Code</span>\n                                            </DropdownItem>}\n                                            <DropdownItem onClick={() => this.props.onEdit(this.props.product)}>\n                                                <i className=\"simple-icon-docs\" /> <span>Edit</span>\n                                            </DropdownItem>\n                                            <DropdownItem onClick={() => this.props.onDelete(this.props.product)}>\n                                                <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                                            </DropdownItem>\n                                        </DropdownMenu>\n                                    </UncontrolledDropdown>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Card>\n                {/* <Row>\n                    <Colxx className={\"pl-3\"}>\n                        {\n                            this.props.product.products?.length > 0 && <Collapse isOpen={!this.state.isCollapsed}>\n                                {\n                                    this.props.product.products.map(subProd => {\n                                        return (<Card style={{ marginLeft: \"3rem\" }} key={\"subprod-\" + subProd.Id} onClick={(event) => this.props.onCheckItem(event, subProd.Id)} className={\"mt-1 d-flex flex-row productList__card\"}>\n                                            <NavLink to={`?p=${subProd.Id}`} className=\"d-flex align-items-center\">\n                                                <img alt={subProd.Name} src={this.state.isImage ? subProd.FileUrl : \"https://via.placeholder.com/400?text=No%20image\"} className=\"list-thumbnail responsive border-0 card-img-left\" onError={() => this.onImageError()} />\n                                            </NavLink>\n                                            <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\n                                                <div className=\"card-body align-self-center d-flex flex-column flex-lg-row min-width-zero align-items-lg-center\">\n                                                    <NavLink to={`?p=1`} className=\"w-30 w-sm-100\" style={{ marginRight: 25 }}>\n                                                        <p className=\"list-item-heading mb-1 truncate\">\n                                                            {subProd.Name} <span className=\"text-muted text-small ml-2\">({this.props.product.Id}-{subProd.Id})</span>\n                                                        </p>\n                                                    </NavLink>\n                                                    <p className=\"mb-1 text-muted text-small w-40\">{subProd.Description}</p>\n                                                    <div className=\"mb-1 text-muted text-small w-30 w-sm-100\">\n                                                        <Row>\n                                                            <Colxx>\n                                                                <div>\n                                                                    Category: <strong>{this.categoryListName(subProd.CategoriesIds)}</strong>\n                                                                </div>\n                                                                <div>\n                                                                    Attributes: <strong>{this.attributeListName(subProd.AttributesIds)}</strong>\n                                                                </div>\n                                                                <div className=\"d-flex align-items-center\">\n                                                                    Is hidden:\n                                                                    <Badge color={subProd.IsHidden ? \"danger\" : \"light\"} pill>\n                                                                        {subProd.IsHidden ? \"Yes\" : \"No\"}\n                                                                    </Badge>\n                                                                </div>\n                                                            </Colxx>\n\n                                                        </Row>\n                                                    </div>\n                                                    <div className=\"d-flex justify-content-end align-items-center w-15\">\n                                                        <div>\n                                                            <UncontrolledDropdown className=\"productList__dropdown\">\n                                                                <DropdownToggle caret color=\"secondary\" outline>\n                                                                    Actions\n                                                                            </DropdownToggle>\n                                                                <DropdownMenu>\n                                                                    <DropdownItem onClick={() => this.props.onEditSubProduct(subProd)}>\n                                                                        <i className=\"simple-icon-docs\" /> <span>Edit</span>\n                                                                    </DropdownItem>\n                                                                    <DropdownItem onClick={() => this.props.onChangeVisible(subProd, subProd.IsHidden ? true : false)}>\n                                                                        <i className=\"simple-icon-trash\" /> <span>Set {subProd.IsHidden ? \"Visible\" : \"Hidden\"}</span>\n                                                                    </DropdownItem>\n                                                                    <DropdownItem onClick={() => this.props.onDelete(subProd)}>\n                                                                        <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                                                                    </DropdownItem>\n                                                                </DropdownMenu>\n                                                            </UncontrolledDropdown>\n                                                        </div>\n                                                        <a style={{ width: \"20px\" }} href=\"#\"> </a>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </Card>)\n                                    })\n                                }\n                            </Collapse>\n                        }\n                    </Colxx>\n                </Row> */}\n            </Colxx>\n        );\n    }\n}\n\nexport default MainProductItem;","import React from \"react\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport { Badge, Card, Collapse, DropdownItem, DropdownMenu, DropdownToggle, NavLink, Row, UncontrolledDropdown } from \"reactstrap\";\nimport { Colxx } from \"../../../../components/common/CustomBootstrap\";\nimport { IProduct } from \"../product\";\nimport classnames from \"classnames\";\nimport { ICategory } from \"../../categories/category\";\nimport { IAttribute, IAttributeGroup } from \"../../attributes/attribute\";\nimport QRCode from 'qrcode.react';\nimport \"./ProductListItem.scss\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { WEB_ORDERING_BASE_URL } from \"../../../../api/settings\";\nimport { AuthService } from \"../../../../services/auth.service\";\n\ninterface IThumbListView {\n    product: IProduct;\n    onDelete: (product: IProduct) => void;\n    onEdit: (product: IProduct) => void;\n    categories: ICategory[],\n    attributesGroups: IAttributeGroup[],\n    onChangeVisible: (product: IProduct, visible: boolean) => void;\n    onCollapse: (id) => void;\n    isCollapsed: boolean;\n}\n\ninterface IProductListItemState {\n    isImage: boolean,\n}\n\n\n\nexport class SubProductItem extends React.Component<IThumbListView, IProductListItemState> {\n\n    authService: AuthService = new AuthService();\n\n    state = {\n        isImage: true\n    }\n\n    onImageError = () => {\n        this.setState({ isImage: false });\n    }\n\n    getCategory = (categoryId: number): ICategory | undefined => {\n        if (this.props.categories) {\n            return this.props.categories.find(x => x.Id == categoryId);\n        }\n        return undefined;\n    }\n\n    getAttribute = (attributeId: number): IAttribute | undefined => {\n        if (this.props.attributesGroups) {\n            var attributes: IAttribute[] = Array.prototype.concat.apply([], this.props.attributesGroups.map(x => x.attributes))\n            return attributes.find(x => x.Id == attributeId);\n        }\n        return undefined;\n    }\n\n    categoryListName = (categoriesIds: number[]) => {\n        var categories: ICategory[] | undefined = [];\n        categoriesIds.forEach(c => {\n            var asd = this.getCategory(c);\n            if (asd) {\n                categories?.push(asd);\n            }\n        });\n        return categories.map(x => x.Name).join(\", \")\n    }\n\n    attributeListName = (categoriesIds: number[]) => {\n        var categories: IAttribute[] | undefined = [];\n        categoriesIds.forEach(c => {\n            var asd = this.getAttribute(c);\n            if (asd) {\n                categories?.push(asd);\n            }\n        });\n        return categories.map(x => x.Name).join(\", \")\n    }\n\n    onDownloadQrCode = (product: IProduct) => {\n        const canvas: any = document.getElementById(`qrcodedownload-${this.props.product.Id}`);\n        const pngUrl = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        let downloadLink = document.createElement(\"a\");\n        downloadLink.href = pngUrl;\n        downloadLink.download = `qrcode-${product.Id}.png`;\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n    }\n\n    qrCodeValue = () => {\n        if (this.props.product.CategoriesIds.length) {\n            return `${WEB_ORDERING_BASE_URL}/photographer/${this.authService.getId()}/categories/${this.props.product.CategoriesIds[0]}/${this.props.product.MainProductId}`\n        }\n\n        return \"\";\n    }\n\n    render() {\n        return (\n            <Colxx xxs=\"12\" key={this.props.product.Id} className=\"productList\" >\n                <Card style={{ marginLeft: \"3rem\" }} key={\"subprod-\" + this.props.product.Id} className={\"d-flex flex-row productList__card\"}>\n                    <NavLink to={`?p=${this.props.product.Id}`} className=\"d-flex align-items-center\">\n                        <img alt={this.props.product.Name} src={this.state.isImage ? this.props.product.FileUrl : \"https://via.placeholder.com/400?text=No%20image\"} className=\"list-thumbnail responsive border-0 card-img-left\" onError={() => this.onImageError()} />\n                    </NavLink>\n                    <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\n                        <div className=\"card-body align-self-center d-flex flex-column flex-lg-row min-width-zero align-items-lg-center\">\n                            <NavLink to={`?p=1`} className=\"w-30 w-sm-100\" style={{ marginRight: 25 }}>\n                                <p className=\"list-item-heading mb-1 truncate\">\n                                    {this.props.product.Name} <span className=\"text-muted text-small ml-2\">({this.props.product.Id}-{this.props.product.Id})</span>\n                                </p>\n                            </NavLink>\n                            <p className=\"mb-1 text-muted text-small w-40\">{this.props.product.Description}</p>\n                            <div className=\"mb-1 text-muted text-small w-30 w-sm-100\">\n                                <Row>\n                                    <Colxx>\n                                        <div>\n                                            Category: <strong>{this.categoryListName(this.props.product.CategoriesIds)}</strong>\n                                        </div>\n                                        <div>\n                                            Attributes: <strong>{this.attributeListName(this.props.product.AttributesIds)}</strong>\n                                        </div>\n                                        <div className=\"d-flex align-items-center\">\n                                            Is hidden:\n                                            <Badge color={this.props.product.IsHidden ? \"danger\" : \"light\"} pill>\n                                                {this.props.product.IsHidden ? \"Yes\" : \"No\"}\n                                            </Badge>\n                                        </div>\n                                    </Colxx>\n\n                                </Row>\n                            </div>\n                            <div className=\"d-flex justify-content-end align-items-center w-15\">\n                                <div className=\"qrCode\" style={{ display: \"none\" }}>\\\n                                    <QRCode\n                                        id={`qrcodedownload-${this.props.product.Id}`}\n                                        value={this.qrCodeValue()}\n                                        size={400}\n                                        level={\"H\"}\n                                        includeMargin={true}\n                                    />\n                                </div>\n                                <div>\n                                    <UncontrolledDropdown className=\"productList__dropdown\">\n                                        <DropdownToggle caret color=\"secondary\" outline>\n                                            Actions\n                                        </DropdownToggle>\n                                        <DropdownMenu>\n                                            {this.qrCodeValue() != \"\" && <DropdownItem onClick={() => this.onDownloadQrCode(this.props.product)}>\n                                                <i className=\"glyph-icon iconsminds-qr-code\" /> <span>Download QR Code</span>\n                                            </DropdownItem>}\n                                            <DropdownItem onClick={() => this.props.onEdit(this.props.product)}>\n                                                <i className=\"simple-icon-docs\" /> <span>Edit</span>\n                                            </DropdownItem>\n                                            <DropdownItem onClick={() => this.props.onChangeVisible(this.props.product, this.props.product.IsHidden ? true : false)}>\n                                                <i className=\"simple-icon-trash\" /> <span>Set {this.props.product.IsHidden ? \"Visible\" : \"Hidden\"}</span>\n                                            </DropdownItem>\n                                            <DropdownItem onClick={() => this.props.onDelete(this.props.product)}>\n                                                <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                                            </DropdownItem>\n\n\n                                        </DropdownMenu>\n                                    </UncontrolledDropdown>\n                                </div>\n                                <a style={{ width: \"20px\" }} href=\"#\"> </a>\n                            </div>\n                        </div>\n                    </div>\n                </Card>\n            </Colxx>\n        );\n    }\n}\n\nexport default SubProductItem;","import React from \"react\";\nimport { Row, Card, Badge, CustomInput, Button, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\n\n\nimport \"./index.scss\";\nimport { HomeClient } from \"../../../api/homeClient\";\nimport { PhotoClient } from \"../../../api/photoClient\";\nimport { CategoryClient } from \"../../../api/categoriesClient\";\nimport { AttributesClient } from \"../../../api/attributesClient\";\nimport Tree, { TreeNode, } from \"rc-tree\";\nimport { IProduct } from \"./product\";\nimport { ICategory } from \"../categories/category\";\nimport { IAttribute, IAttributeGroup } from \"../attributes/attribute\";\nimport { DataNode, EventDataNode, Key } from \"rc-tree/lib/interface\";\nimport AddProductModal from \"./addProduct\";\nimport { ContextMenu, MenuItem } from \"react-contextmenu\";\nimport { DeleteProductModal } from \"./deleteProductModal\";\nimport EditProductModal from \"./editProduct\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport CategoryItem from \"./components/CategoryItem\";\nimport MainProductItem from \"./components/MainProductItem\";\nimport SubProductItem from \"./components/SubProductItem\";\nimport { NodeDragEventParams } from \"rc-tree/lib/contextTypes\";\n\nexport interface IProductState {\n    products: IProduct[];\n    modalOpen: boolean,\n    modalEditOpen: boolean,\n    modalDelete: boolean,\n    deleteProductGroup?: IProduct,\n    editedProductGroup?: IProduct,\n    categories: ICategory[],\n    attributeGroup: IAttributeGroup[];\n    expandedKeys: string[],\n    tree: DataNode[],\n    loading: boolean,\n}\n\nexport interface IData {\n    categries\n}\n\nconst mapAttributeItemToAttribute = (item: any, attributeGroupId: number): IAttribute => {\n    return {\n        Id: item.id,\n        Name: item.name,\n        Description: item.description,\n        PriceCorrectionPercent: item.priceCorrectionPercent,\n        PriceCorrectionCurrent: item.priceCorrectionCurrent,\n        Position: item.position,\n        AttributeGroupId: attributeGroupId\n    }\n}\n\nconst mapItemToAttributeGroup = (item: any): IAttributeGroup => {\n    let i = {\n        Id: item.id,\n        Name: item.name,\n        Key: item.key,\n        attributes: [],\n        Position: item.position\n    };\n\n    (item.attributes as any[]).forEach(attr => {\n        (i.attributes as any[]).push(mapAttributeItemToAttribute(attr, i.Id));\n    });\n\n    return i;\n}\n\nconst mapAttributes = (item: any[]): IAttributeGroup[] => {\n    let group: IAttributeGroup[] = [];\n\n    item.forEach(x => {\n        group.push(mapItemToAttributeGroup(x))\n    });\n\n    return group;\n}\n\nconst mapCategories = (item: any[]): ICategory[] => {\n    let categories: ICategory[] = [];\n    item.forEach(item => {\n        var category: ICategory = {\n            Name: item.name,\n            Id: item.id,\n            Description: item.description,\n            FilePath: item.imageUrl,\n            Position: item.position,\n            IsHidden: item.isHidden,\n            ProductsPositions: item.ProductsPositions\n        }\n        categories.push(category)\n    });\n    return categories;\n}\n\n\nexport class Products extends React.Component<any, IProductState> {\n    homeClient: HomeClient = new HomeClient();\n    photoClient: PhotoClient = new PhotoClient();\n    categoryClient: CategoryClient = new CategoryClient();\n    attributeClient: AttributesClient = new AttributesClient();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            products: [],\n            modalOpen: false,\n            modalEditOpen: false,\n            modalDelete: false,\n            categories: [],\n            attributeGroup: [],\n            expandedKeys: [],\n            tree: []\n        }\n    }\n\n    populateData() {\n\n    }\n\n    setModalOpen = (modalOpen: boolean, modal: \"Create\" | \"Edit\") => {\n        if (modal == \"Create\") {\n            this.setState({ modalOpen: modalOpen });\n        } else if (modal == \"Edit\") {\n            this.setState({ modalEditOpen: modalOpen });\n        }\n    }\n\n    refreshCategories = async () => {\n        let categories: ICategory[] = mapCategories((await this.categoryClient.List(\"ProductCategories\")).data.Data);\n        this.setState({ categories: categories, tree: this.createTree(categories, this.state.products) });\n\n    }\n\n    refreshAll = async () => {\n        this.setState({ loading: true });\n        NotificationManager.info(\"Please wait.\", 'Refreshing product list', 3000, null, null, '');\n        let categories: ICategory[] = mapCategories((await this.categoryClient.List(\"ProductCategories\")).data.Data);\n        let products: IProduct[] = await this.getProducts();\n        let attributes: IAttributeGroup[] = mapAttributes((await this.attributeClient.List(\"ProductAttributes\")).data.Data);\n        this.setState({ categories: categories, attributeGroup: attributes, products: products, tree: this.createTree(categories, products) });\n        NotificationManager.info(\"Your product list is up to date.\", 'Refreshing ended', 3000, null, null, '');\n        this.setState({ loading: false });\n    }\n\n    async componentDidMount() {\n        this.setState({ loading: true });\n        let categories: ICategory[] = mapCategories((await this.categoryClient.List(\"ProductCategories\")).data.Data);\n        let attributes: IAttributeGroup[] = mapAttributes((await this.attributeClient.List(\"ProductAttributes\")).data.Data);\n        let products: IProduct[] = await this.getProducts();\n        this.setState({ categories: categories, attributeGroup: attributes, products: products, tree: this.createTree(categories, products), loading: false });\n    }\n\n    isCollapsed = (key: string) => {\n        return this.state.expandedKeys.indexOf(key) == -1;\n    }\n\n    changeCollapse = (key: string) => {\n        let data = [...this.state.expandedKeys];\n        if (this.state.expandedKeys.indexOf(key) > -1) {\n            data = data.filter(x => !x.startsWith(key));\n        } else {\n            data.push(key);\n        }\n        this.setState({ expandedKeys: data });\n    }\n\n    createTree = (categories: ICategory[], products: IProduct[]): DataNode[] => {\n        let nodes: DataNode[] = [];\n        categories.forEach(c => {\n            var categoryNode: any = {\n                key: c.Id.toString(),\n                title: (n) => <CategoryItem key={`cat-${n.key}`} isCollapsed={this.isCollapsed(n.key.toString())} category={n.category} onChangeVisible={(product, visible) => { }} onCollapse={(id) => this.changeCollapse(n.key.toString())} onDelete={() => { }} onEdit={() => { }} />,\n                children: [],\n                category: c,\n                className: \"node-category\"\n            }\n\n            var categoryProducts: IProduct[] = products.filter(p => p.CategoriesIds.indexOf(c.Id) > -1 && p.MainProductId == null);\n            var orderedCP = categoryProducts;\n            if (c.ProductsPositions && c.ProductsPositions.length) {\n                orderedCP = [];\n                c.ProductsPositions.forEach(p => {\n                    let finded = categoryProducts.findIndex(x => x.Id == p);\n                    if (finded > -1) {\n                        orderedCP.push(categoryProducts[finded]);\n                        categoryProducts.splice(finded, 1);\n                    }\n                });\n                orderedCP = orderedCP.concat(categoryProducts);\n            }\n            orderedCP.forEach(product => {\n                var productNode: any = {\n                    key: `${c.Id}-${product.Id}`,\n                    title: (n) => <div style={{ paddingLeft: \"3rem\" }}><MainProductItem key={`mainprod-${n.key}`} product={n.product} onChangeVisible={(product, visible) => this.onChangeProductVisible(product, visible)} attributesGroups={this.state.attributeGroup} categories={this.state.categories} isCollapsed={this.isCollapsed(n.key.toString())} onCollapse={(id) => this.changeCollapse(n.key.toString())} onDelete={(p) => this.onDeleteRequest(p)} onEdit={(product) => this.onEdit(product)} /></div>,\n                    children: [],\n                    product: product,\n                    className: \"node-product\"\n                }\n\n                if (product.products) {\n                    product.products.forEach(subProduct => {\n                        var subProductNode: any = {\n                            key: `${c.Id}-${product.Id}-${subProduct.Id}`,\n                            title: (n) => <div style={{ paddingLeft: \"6rem\" }}><SubProductItem key={`mainprod-${n.key}`} product={n.product} onChangeVisible={(product, visible) => this.onChangeProductVisible(product, visible)} attributesGroups={this.state.attributeGroup} categories={this.state.categories} isCollapsed={this.isCollapsed(n.key.toString())} onCollapse={(id) => this.changeCollapse(n.key.toString())} onDelete={(p) => this.onDeleteRequest(p)} onEdit={(product) => this.onEdit(product)} /></div>,\n                            children: [],\n                            product: subProduct,\n                            className: \"node-subproduct\"\n                        }\n                        productNode.children.push(subProductNode);\n                    });\n                }\n\n\n\n                categoryNode.children.push(productNode);\n            });\n            nodes.push(categoryNode);\n        });\n\n        if (products.filter(x => x.CategoriesIds.length == 0).length > 0) {\n            var emptyCategory: ICategory = { Id: 9999, Name: \"Others\", IsHidden: false, Description: \"\", FilePath: \"\", Position: 999999 }\n            var categoryNode: any = {\n                key: emptyCategory.Id.toString(),\n                title: (n) => <CategoryItem key={`cat-${n.key}`} isCollapsed={this.isCollapsed(n.key.toString())} category={n.category} onChangeVisible={(product, visible) => { }} onCollapse={(id) => this.changeCollapse(n.key.toString())} onDelete={() => { }} onEdit={() => { }} />,\n                children: [],\n                category: emptyCategory,\n                className: \"node-category\"\n            }\n\n            products.filter(x => x.CategoriesIds.length == 0).forEach(product => {\n                var productNode: any = {\n                    key: `${emptyCategory.Id}-${product.Id}`,\n                    title: (n) => <div style={{ paddingLeft: \"3rem\" }}><MainProductItem key={`mainprod-${n.key}`} product={n.product} onChangeVisible={(product, visible) => this.onChangeProductVisible(product, visible)} attributesGroups={this.state.attributeGroup} categories={this.state.categories} isCollapsed={this.isCollapsed(n.key.toString())} onCollapse={(id) => this.changeCollapse(n.key.toString())} onDelete={(p) => this.onDeleteRequest(p)} onEdit={(product) => this.onEdit(product)} /></div>,\n                    children: [],\n                    product: product,\n                    className: \"node-product\"\n                }\n\n                if (product.products) {\n                    product.products.forEach(subProduct => {\n                        var subProductNode: any = {\n                            key: `${emptyCategory.Id}-${product.Id}-${subProduct.Id}`,\n                            title: (n) => <div style={{ paddingLeft: \"6rem\" }}><SubProductItem key={`mainprod-${n.key}`} product={n.product} onChangeVisible={(product, visible) => this.onChangeProductVisible(product, visible)} attributesGroups={this.state.attributeGroup} categories={this.state.categories} isCollapsed={this.isCollapsed(n.key.toString())} onCollapse={(id) => this.changeCollapse(n.key.toString())} onDelete={(p) => this.onDeleteRequest(p)} onEdit={(product) => this.onEdit(product)} /></div>,\n                            children: [],\n                            product: subProduct,\n                            className: \"node-subproduct\"\n                        }\n                        productNode.children.push(subProductNode);\n                    });\n                }\n\n                categoryNode.children.push(productNode);\n            });\n            nodes.push(categoryNode);\n\n        }\n\n        return nodes;\n    }\n\n    getProducts = async () => {\n        let data = await this.photoClient.ListProducts();\n        let responseProducts: IProduct[] = data.data.Data;\n        let productDictionary = {}\n        responseProducts.filter(x => x.MainProductId == null).forEach(mainProduct => {\n            productDictionary[mainProduct.Id] = mainProduct;\n        });\n        responseProducts.filter(x => x.MainProductId != null).forEach(subProduct => {\n            if (productDictionary[subProduct.MainProductId]) {\n                if ((productDictionary[subProduct.MainProductId] as IProduct).products == null) {\n                    (productDictionary[subProduct.MainProductId] as IProduct).products = [];\n                }\n                (productDictionary[subProduct.MainProductId] as IProduct).products.push(subProduct);\n            }\n        });\n        var products: IProduct[] = Object.values(productDictionary).map(x => x) as IProduct[];\n        return products;\n    }\n\n    onDeleteRequest = (product: IProduct) => {\n        this.setState({\n            modalDelete: true, deleteProductGroup: product\n        });\n    }\n\n    onEdit = (productGroup: IProduct) => {\n        this.setState({ editedProductGroup: productGroup, modalEditOpen: true });\n    }\n\n\n    onDelete = async () => {\n\n        let product = this.state.deleteProductGroup;\n        if (product == null) {\n            return;\n        }\n\n        NotificationManager.info(\"Product is deleting...\", 'Deleting product', 3000, null, null, '');\n        var response = await this.photoClient.DeleteProduct(product.Id);\n        await this.refreshAll();\n        NotificationManager.success(\"Product is deleted.\", 'Product deleted sucessfully', 3000, null, null, '');\n    }\n\n    refresh = () => {\n        this.refreshAll();\n    }\n\n    onChangeProductVisible = async (product: IProduct, visible: boolean) => {\n        NotificationManager.info(\"Changing product visible...\", 'Changing state', 3000, null, null, '');\n        var response = await this.photoClient.SetProductVisible(product.Id, visible);\n        this.refresh();\n        NotificationManager.success(\"Product visible changed sucessfully.\", 'Product state changed', 3000, null, null, '');\n    }\n\n    allowDrop = (options): any => {\n        if (this.draggingNode == null || options.dropPosition < 0) {\n            return false;\n        }\n\n        return this.draggingNode.className == \"node-product\" && (options.dropNode.className == \"node-category\" || options.dropNode.className == \"node-product\");\n    }\n\n    isDraggable = (node: DataNode): boolean => {\n        if (node.className == \"node-subproduct\") {\n            return false;\n        }\n        return true;\n    }\n\n    getItemKeys = (node: EventDataNode): { categoryId: number, productId: number } => {\n        var categoryId, productId;\n        [categoryId, productId] = (node.key as string).split(\"-\");\n        return {\n            categoryId,\n            productId\n        }\n    }\n\n    isReorder = (dragNode: EventDataNode, dropNode: EventDataNode) => {\n        let dragItemKeys = this.getItemKeys(dragNode);\n        let dropItemKeys = this.getItemKeys(dropNode);\n        return dragItemKeys.categoryId == dropItemKeys.categoryId;\n    }\n\n    isClone = (dragNode: EventDataNode, dropNode: EventDataNode) => {\n        let dragItemKeys = this.getItemKeys(dragNode);\n        let dropItemKeys = this.getItemKeys(dropNode);\n        return dragItemKeys.categoryId != dropItemKeys.categoryId;\n    }\n\n    arraymove = (arr, fromIndex, toIndex) => {\n        var element = arr[fromIndex];\n        arr.splice(fromIndex, 1);\n        arr.splice(toIndex, 0, element);\n    }\n\n    onDrop = async (options: { dragNode: EventDataNode, dragNodesKeys: Key[], dropPosition: number, dropToGap: boolean, node: EventDataNode }) => {\n        if (this.isReorder(options.dragNode, options.node)) {\n            let position = 0;\n            if (options.node.className == \"node-product\") {\n                position = options.dropPosition;\n                if (position == 0) {\n                    position = 1;\n                }\n            }\n            else if (options.node.className == \"node-category\") {\n                let categoryIndex = this.state.categories.findIndex(x => x.Id == (options.node as any).category.Id);\n                if (categoryIndex == options.dropPosition) {\n                    position = 0;\n                } else if (categoryIndex < options.dropPosition) {\n                    position = -1;\n                }\n            }\n            var data = this.getItemKeys(options.dragNode);\n            var treeCategory = this.state.tree.find(x => x.key == data.categoryId);\n            if (treeCategory) {\n                var productIds = (treeCategory.children as any).map(x => x.product.Id);\n\n                if (position == -1) {\n                    position = productIds.length - 1;\n                }\n\n                let moveIndex = productIds.indexOf(Number(data.productId));\n                if (moveIndex > -1) {\n                    this.arraymove(productIds, moveIndex, position);\n                    NotificationManager.info('Please wait.', \"Updating positions...\", 3000, null, null, '');\n                    await this.categoryClient.UpdateCategoryProductsPositions(Number(data.categoryId), productIds);\n                    await this.refreshCategories();\n                    NotificationManager.success('Position updated.', \"Positions updated sucessfully.\", 3000, null, null, '');\n                }\n\n\n            }\n\n\n        }\n        else if (this.isClone(options.dragNode, options.node)) {\n            let position: number | null = -1;\n            let categoryId = -1;\n            let productId = -1;\n            let item = this.getItemKeys(options.node);\n            let dragItem = this.getItemKeys(options.dragNode);\n            if (options.node.className == \"node-product\") {\n                position = options.dropPosition;\n                if (position == 0) {\n                    position = 1;\n                }\n                categoryId = item.categoryId;\n                productId = dragItem.productId;\n\n            }\n            else if (options.node.className == \"node-category\") {\n                let categoryIndex = this.state.categories.findIndex(x => x.Id == (options.node as any).category.Id);\n                let category = this.state.categories[categoryIndex];\n                if (categoryIndex == options.dropPosition) {\n                    position = 1;\n                } else if (categoryIndex < options.dropPosition) {\n                    position = -1;\n                }\n                categoryId = category.Id;\n                productId = dragItem.productId;\n            }\n            console.log(productId, categoryId, position);\n            if (position < 1) {\n                position = null;\n            }\n            NotificationManager.info(\"Please wait\", 'Cloning product...', 3000, null, null, '');\n            await this.categoryClient.CloneProductToCategory(productId, categoryId, position);\n            await this.refreshAll();\n            NotificationManager.success(\"Cloning ended.\", \"Product cloned sucessfully\", 3000, null, null, '');\n            //await this.categoryClient.CloneProductToCategory()\n\n            //console.log(\"clone\", position item.productId)\n        }\n\n    }\n\n    draggingNode: EventDataNode | null = null;\n\n    onDragStart = (info: NodeDragEventParams) => {\n        this.draggingNode = info.node;\n    }\n\n\n\n    render() {\n        return (\n            <>\n                {this.state.loading && <div className=\"loading\" />}\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <div className=\"mb-2\">\n                            <div className=\"text-zero top-right-button-container\">\n                                <Button\n                                    color=\"primary\"\n                                    size=\"lg\"\n                                    className=\"top-right-button\"\n                                    onClick={() => this.setModalOpen(true, \"Create\")}\n                                >\n                                    <i className=\"simple-icon-plus\" /> ADD NEW PRODUCT\n                                </Button>\n                                {'  '}\n                            </div>\n                            <Breadcrumb heading=\"Products\" match={this.props.match} />\n                        </div>\n                        <Separator className=\"mb-5\" />\n                    </Colxx>\n                </Row>\n                <div className=\"draggable-container\">\n                    <Tree\n                        onDragStart={(info) => this.onDragStart(info)}\n                        onDrop={this.onDrop}\n                        draggable={(node) => this.isDraggable(node)}\n                        treeData={this.state.tree}\n                        expandedKeys={this.state.expandedKeys}\n                        autoExpandParent={true}\n                        allowDrop={this.allowDrop}\n                        dropIndicatorRender={(props) => <div>Place here</div>}\n                    ></Tree>\n                </div>\n\n                <ContextMenu id=\"product_menu\" onShow={(e) => { }} >\n                    <MenuItem onClick={(e, data) => { this.onEdit((data as any).product) }} data={{ action: 'settings' }}>\n                        <i className=\"simple-icon-docs\" /> <span>Edit</span>\n                    </MenuItem>\n\n                    <MenuItem onClick={(e, data) => { this.onDeleteRequest((data as any).product) }} data={{ action: 'delete' }}>\n                        <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                    </MenuItem>\n                </ContextMenu>\n                <AddProductModal modalOpen={this.state.modalOpen} toggleModal={() => this.setModalOpen(!this.state.modalOpen, \"Create\")} onCreate={this.refresh} />\n                {this.state.editedProductGroup && <EditProductModal modalOpen={this.state.modalEditOpen} toggleModal={() => this.setModalOpen(!this.state.modalEditOpen, \"Edit\")} onEdit={this.refresh} product={this.state.editedProductGroup as IProduct} />}\n                <DeleteProductModal title={\"Product delete\"} description={\"Do you really want delete product?\"} toggle={(show) => this.setState({ modalDelete: show })} onDelete={() => this.onDelete()} isOpen={this.state.modalDelete} />\n            </>\n        )\n    }\n}\n\nexport default Products;","import React from \"react\";\nimport { Card, CardBody, CustomInput, Form, FormGroup, FormText, InputGroup, InputGroupAddon, InputGroupText, Label, Row } from \"reactstrap\";\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\nimport TopNavigation from \"../../../components/wizard/TopNavigation\";\nimport { Wizard, Steps, Step } from 'react-albus';\nimport BottomNavigation from \"../../../components/wizard/BottomNavigation\";\nimport { PhotoClient } from \"../../../api/photoClient\";\nimport { CategoryClient } from \"../../../api/categoriesClient\";\nimport { AttributesClient } from \"../../../api/attributesClient\";\nimport { responseItemToAttributeGroup, responseItemToCategory } from \"../PhotoOrderHelper\";\nimport AttributeSelector, { IAttributeGroupItem } from \"../products/components/AttributesSelector\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport { Formik, Form as FormikForm, Field } from \"formik\";\nimport \"./WizardPage.scss\";\nimport PriceRangeSelector from \"../products/components/PriceRangeSelector\";\nimport Select from 'react-select'\nimport { Link } from \"react-router-dom\";\nimport { TemplateSelector } from \"../products/components/TemplateSelector\";\n\nenum WizardType { Standard, ThreeD }\n\nclass WizardStandardProduct extends React.Component<any, any> {\n    topNavClick = (stepItem, push) => {\n        push(stepItem.id);\n    }\n\n    onClickNext = (goToNext, steps, step) => {\n        step.isDone = true;\n        if (steps.length - 1 <= steps.indexOf(step)) {\n            return;\n        }\n        goToNext();\n    };\n\n    onClickPrev = (goToPrev, steps, step) => {\n        if (steps.indexOf(step) <= 0) {\n            return;\n        }\n        goToPrev();\n    };\n\n    render() {\n        return (\n            <Wizard>\n                <TopNavigation\n                    className=\"justify-content-center\"\n                    disableNav={false}\n                    topNavClick={this.topNavClick}\n                />\n                <Steps>\n                    <Step\n                        id=\"step1\"\n                        name={\"Basic information\"}\n                        desc={\"Set new product basic informations\"}\n                    >\n                        <div className=\"wizard-basic-step col-6 offset-3\">\n                            <h1 className=\"text-center w-100\">Basic informations</h1>\n\n                            <FormGroup>\n                                <Label for=\"Name\">\n                                    Name\n                                </Label>\n                                <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Name\"} maxLength={20} />\n                                <FormText color=\"muted\">\n                                    Maximum 20 letters\n                                </FormText>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"Description\">\n                                    Description\n                                </Label>\n                                <Field className=\"form-control\" name=\"Description\" type=\"text\" id=\"Description\" placeholder={\"Description\"} maxLength={100} />\n                                <FormText color=\"muted\">\n                                    Maximum 100 letters\n                                </FormText>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"File\">\n                                    Image\n                                </Label>\n                                <InputGroup>\n                                    <CustomInput\n                                        type=\"file\"\n                                        id=\"File\"\n                                        name=\"File\"\n\n                                        onChange={(event) => {\n                                            if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                                this.props.setFieldValue(\"File\", event.currentTarget.files[0]);\n                                            }\n                                        }} />\n                                </InputGroup>\n                                <FormText color=\"muted\">\n                                    Maximum 800x800 pixels\n                                </FormText>\n                            </FormGroup>\n                        </div>\n                    </Step>\n                    <Step\n                        id=\"step3\"\n                        name={\"Price ranges\"}\n                        desc={\"Set product price ranges\"}\n                    >\n                        <div className=\"wizard-basic-step col-6 offset-3\">\n                            <h1 className=\"text-center w-100\">Price ranges</h1>\n\n                            <FormGroup>\n                                <Label for=\"Price\">\n                                    Price\n                                </Label>\n                                <div>\n                                    <PriceRangeSelector initialValues={[]} onChange={(data) => { this.props.setFieldValue(\"PriceRange\", data); }} />\n                                </div>\n                            </FormGroup>\n\n                        </div>\n                    </Step>\n                    <Step\n                        id=\"step4\"\n                        name={\"Sizes & quantities\"}\n                        desc={\"Configure custom picture and amount of photos\"}\n                    >\n                        <div className=\"wizard-basic-step col-6 offset-3\">\n                            <h1 className=\"text-center w-100\">Sizes & quantities</h1>\n\n                            <FormGroup>\n                                <Label for=\"Size\">\n                                    Size\n                                </Label>\n                                <div className=\"alert alert-info\">Our software will automatically resize customer pictures during upload. You can set in pixels, the longer side of the image.\n                                    Please note, value 0 means original size and longer time of uploading of photo.\n                                </div>\n\n                                <select\n                                    id=\"SizeSelect\"\n                                    name=\"SizeSelect\"\n                                    className=\"form-control\"\n                                    value={this.props.values.SizeSelect}\n                                    onChange={this.props.handleChange}\n                                    onBlur={this.props.handleBlur}\n                                >\n                                    <option disabled hidden defaultChecked></option>\n                                    <option value={0}>Original size</option>\n                                    <option value={1}>Custom size</option>\n                                </select>\n                                {this.props.customSize && <FormText color=\"muted\">\n                                    For the longer size of photo\n                                </FormText>}\n                                {this.props.values.SizeSelect == 1 && <InputGroup className=\"mt-2\">\n                                    <Field className=\"form-control\" name=\"Size\" type=\"number\" id=\"Size\" placeholder={\"Size\"} />\n                                    <InputGroupAddon addonType=\"append\">\n                                        <InputGroupText>px</InputGroupText>\n                                    </InputGroupAddon>\n                                </InputGroup>}\n                            </FormGroup>\n                            <Row style={{ marginTop: \"3.5rem\" }}>\n                                <Colxx>\n                                    <div className=\"alert alert-info\">\n                                        You can set the minimum and maximum amount of photos in the product. Please note, the final price is constant\n                                        and independent from amount of photos (in range of minimum and maximum).\n                                    </div>\n                                    <Row>\n                                        <FormGroup className=\"col-6 mb-0\">\n                                            <Label>\n                                                Min. quantity\n                                            </Label>\n                                            <Field className=\"form-control\" name=\"QuantityRangeMin\" type=\"number\" id=\"QuantityRangeMin\" placeholder={\"\"} />\n                                        </FormGroup>\n                                        <FormGroup className=\"col-6 mb-0\">\n                                            <Label>\n                                                Max quantity\n                                            </Label>\n                                            <Field className=\"form-control\" name=\"QuantityRangeMax\" type=\"number\" id=\"QuantityRangeMax\" placeholder={\"\"} />\n\n                                        </FormGroup>\n                                    </Row>\n\n                                    <FormGroup className=\"col-12\">\n                                        <FormText color=\"muted\">\n                                            Leave empty if not set\n                                        </FormText>\n                                    </FormGroup>\n\n                                </Colxx>\n\n                            </Row>\n\n                        </div>\n                    </Step>\n                    <Step\n                        id=\"step5\"\n                        name={\"Categories & attributes\"}\n                        desc={\"Set categories and product attributes\"}\n                    >\n                        <div className=\"wizard-basic-step  col-6 offset-3\">\n                            <h1 className=\"text-center w-100\">Categories & attributes</h1>\n\n                            <FormGroup>\n                                <Label for=\"Categories\">\n                                    Categories\n                                </Label>\n                                <Select isMulti name=\"colors\" options={this.props.categories} classNamePrefix=\"select\" onChange={(data) => { this.props.setFieldValue('categories', data ? data.map(x => x.value) : []) }} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"Attributes\">\n                                    Attributes\n                                </Label>\n                                <div>\n                                    <AttributeSelector onChange={(data) => this.props.setFieldValue('attributeGroups', data)} attributeGroups={this.props.attributeGroups} selectedAttributeGroups={[]} />\n\n                                </div>\n                            </FormGroup>\n\n                        </div>\n                    </Step>\n                    <Step id=\"step6\" hideTopNav>\n                        <div className=\"wizard-basic-step text-center d-flex justify-content-center align-items-center success-view\">\n                            {(!this.props.saving && !this.props.saved) && <div>\n                                <h1>Your product is ready to launch!</h1>\n                                <p>Configuration for new product is ready. Please click button below to create Your brand new product!</p>\n                                <div>\n                                    <button className=\"btn btn-success btn-xl\" onClick={this.props.submitForm}>CREATE PRODUCT NOW</button>\n                                </div>\n\n                            </div>}\n                            {this.props.saving && <div>\n                                <h1>Creating new product...</h1>\n                                <div className=\"loading\" style={{ width: 80, height: 80, margin: \"auto\", display: \"block\", position: \"unset\" }} />\n                            </div>}\n                            {(!this.props.saving && this.props.saved) && <div>\n                                <h1 className=\"text-success\">Product created!</h1>\n                                <div className=\"glyph-icon simple-icon-check\"></div>\n                                <p>Now You can check product in product list!</p>\n                                <Link to=\"/photo-order/products\" className=\"btn btn-success\">Go to product list</Link>\n                            </div>}\n                        </div>\n                    </Step>\n                </Steps>\n                {!this.props.blockInterface && <BottomNavigation\n                    onClickNext={this.onClickNext}\n                    onClickPrev={this.onClickPrev}\n                    className=\"justify-content-center\"\n                    prevLabel={\"Previouse\"}\n                    nextLabel={'Next'}\n                />}\n            </Wizard>\n        );\n    }\n}\n\nexport default WizardStandardProduct;","/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { WithWizard } from 'react-albus';\nimport { NavLink } from 'react-router-dom';\n\nconst TopNavigation = ({ className, disableNav, topNavClick }) => {\n  const getClassName = (steps, step, index, stepItem) => {\n    if (steps.indexOf(step) === index) {\n      return 'step-doing';\n    }\n    if (steps.indexOf(step) > index || stepItem.isDone) {\n      stepItem.isDone = true;\n      return 'step-done';\n    }\n    return 'step';\n  };\n\n  const itemClick = (stepItem, push) => {\n    if (disableNav) {\n      return;\n    }\n    topNavClick(stepItem, push);\n  };\n\n  return (\n    <WithWizard\n      render={({ next, previous, step, steps, go, push }) => (\n        <ul\n          className={`nav nav-tabs ${className}${\n            disableNav ? ' disabled' : ''\n          }`}\n        >\n          {steps.map((stepItem, index) => {\n            if (!stepItem.hideTopNav) {\n              return (\n                <li\n                  key={`topNavStep_${index}`}\n                  className={`nav-item ${getClassName(\n                    steps,\n                    step,\n                    index,\n                    stepItem\n                  )}`}\n                >\n                  <NavLink\n                    to=\"#\"\n                    location={{}}\n                    className=\"nav-link\"\n                    onClick={() => itemClick(stepItem, push)}\n                  >\n                    <span>{stepItem.name}</span>\n                    <small>{stepItem.desc}</small>\n                  </NavLink>\n                </li>\n              );\n            }\n            return <span key={`topNavStep_${index}`} />;\n          })}\n        </ul>\n      )}\n    />\n  );\n};\n\nexport default TopNavigation;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { WithWizard } from 'react-albus';\nimport { Button } from 'reactstrap';\n\nconst BottomNavigation = ({\n  className,\n  onClickPrev,\n  prevLabel,\n  onClickNext,\n  nextLabel,\n}) => {\n  return (\n    <WithWizard\n      render={({ next, previous, step, steps }) => (\n        <div className={`wizard-buttons ${className}`}>\n          <Button\n            color=\"primary\"\n            className={`mr-1 ${steps.indexOf(step) <= 0 ? 'disabled' : ''}`}\n            onClick={() => {\n              onClickPrev(previous, steps, step);\n            }}\n          >\n            {prevLabel}\n          </Button>\n\n          <Button\n            color=\"primary\"\n            className={\n              steps.indexOf(step) >= steps.length - 1 ? 'disabled' : ''\n            }\n            onClick={() => {\n              onClickNext(next, steps, step);\n            }}\n          >\n            {nextLabel}\n          </Button>\n        </div>\n      )}\n    />\n  );\n};\nexport default BottomNavigation;\n","import React from \"react\";\nimport { Card, CardBody, CustomInput, Form, FormGroup, FormText, InputGroup, InputGroupAddon, InputGroupText, Label, Row } from \"reactstrap\";\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\nimport TopNavigation from \"../../../components/wizard/TopNavigation\";\nimport { Wizard, Steps, Step } from 'react-albus';\nimport BottomNavigation from \"../../../components/wizard/BottomNavigation\";\nimport { PhotoClient } from \"../../../api/photoClient\";\nimport { CategoryClient } from \"../../../api/categoriesClient\";\nimport { AttributesClient } from \"../../../api/attributesClient\";\nimport { responseItemToAttributeGroup, responseItemToCategory } from \"../PhotoOrderHelper\";\nimport AttributeSelector, { IAttributeGroupItem } from \"../products/components/AttributesSelector\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport { Formik, Form as FormikForm, Field } from \"formik\";\nimport \"./WizardPage.scss\";\nimport PriceRangeSelector from \"../products/components/PriceRangeSelector\";\nimport Select from 'react-select'\nimport { Link } from \"react-router-dom\";\nimport { TemplateSelector } from \"../products/components/TemplateSelector\";\nimport { Models3D, ProductsClient } from \"../../../api/ApiClient\";\nimport { API_BASE } from \"../../../api/ApiSettings\";\n\nenum WizardType { Standard, ThreeD }\n\ninterface Wizard3DState {\n    modelList: Models3D[]\n}\n\nclass Wizard3D extends React.Component<any, Wizard3DState> {\n    productClient: ProductsClient = new ProductsClient(API_BASE);\n\n    state = {\n        modelList: []\n    }\n    async componentDidMount() {\n        let models = await this.productClient.get3DModels();\n        this.setState({ modelList: models });\n        if (models) {\n            this.props.setFieldValue(\"Model3D\", models[0]);\n        }\n    }\n\n    topNavClick = (stepItem, push) => {\n        push(stepItem.id);\n    }\n\n    onClickNext = (goToNext, steps, step) => {\n        step.isDone = true;\n        if (steps.length - 1 <= steps.indexOf(step)) {\n            return;\n        }\n        goToNext();\n    };\n\n    onClickPrev = (goToPrev, steps, step) => {\n        if (steps.indexOf(step) <= 0) {\n            return;\n        }\n        goToPrev();\n    };\n\n    render() {\n        return (\n            <Wizard>\n                <TopNavigation\n                    className=\"justify-content-center\"\n                    disableNav={false}\n                    topNavClick={this.topNavClick}\n                />\n                <Steps>\n                    <Step\n                        id=\"step1\"\n                        name={\"Basic information\"}\n                        desc={\"Set new product basic informations\"}\n                    >\n                        <div className=\"wizard-basic-step col-6 offset-3\">\n                            <h1 className=\"text-center w-100\">Basic informations</h1>\n                            <FormGroup>\n                                <Label for=\"3dModel\">\n                                    3D Model\n                                </Label>\n                                <Field className=\"form-control\" name=\"Model3D\" as=\"select\" id=\"Model3D\" placeholder={\"Model 3D\"} onChange={(e) => {\n                                    var selectedModel: Models3D = this.state.modelList[e.currentTarget.selectedIndex]\n                                    this.props.setFieldValue(\"Model3D\", selectedModel);\n                                }}>\n                                    {\n                                        this.state.modelList.map((model: Models3D) => (<option key={model.id} value={model.id} >{model.name}</option>))\n                                    }\n                                </Field>\n                                <FormText color=\"muted\">\n                                    Select 3d model for product\n                                </FormText>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"Name\">\n                                    Name\n                                </Label>\n                                <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Name\"} maxLength={20} />\n                                <FormText color=\"muted\">\n                                    Maximum 20 letters\n                                </FormText>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"Description\">\n                                    Description\n                                </Label>\n                                <Field className=\"form-control\" name=\"Description\" type=\"text\" id=\"Description\" placeholder={\"Description\"} maxLength={100} />\n                                <FormText color=\"muted\">\n                                    Maximum 100 letters\n                                </FormText>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"File\">\n                                    Image\n                                </Label>\n                                <InputGroup>\n                                    <CustomInput\n                                        type=\"file\"\n                                        id=\"File\"\n                                        name=\"File\"\n\n                                        onChange={(event) => {\n                                            if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                                this.props.setFieldValue(\"File\", event.currentTarget.files[0]);\n                                            }\n                                        }} />\n                                </InputGroup>\n                                <FormText color=\"muted\">\n                                    Maximum 800x800 pixels\n                                </FormText>\n                            </FormGroup>\n                        </div>\n                    </Step>\n                    <Step\n                        id=\"step2\"\n                        name={\"Template\"}\n                        desc={\"Set template details\"}\n                    >\n                        <div className=\"wizard-basic-step col-6 offset-3\">\n                            <h1 className=\"text-center w-100\">Template</h1>\n                            <Row className=\"mb-2\">\n                                <Colxx xxs={2} className=\"pr-0\">\n                                    <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", alignItems: \"center\" }}>Layer image file</div>\n                                </Colxx>\n                                <Colxx xss={10}>\n                                    <InputGroup>\n                                        <CustomInput\n                                            type=\"file\"\n                                            id=\"layerImageFile\"\n                                            name=\"layerImageFile\"\n\n                                            onChange={(event) => {\n                                                if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                                    this.props.setFieldValue(\"layerImageFile\", event.currentTarget.files[0]);\n                                                }\n                                            }} />\n                                    </InputGroup>\n                                </Colxx>\n                            </Row>\n                            <TemplateSelector onChange={(templates) => {\n                                this.props.setFieldValue(\"ProductTemplates\", templates);\n                            }} />\n\n                        </div>\n                    </Step>\n                    <Step\n                        id=\"step3\"\n                        name={\"Price ranges\"}\n                        desc={\"Set product price ranges\"}\n                    >\n                        <div className=\"wizard-basic-step col-6 offset-3\">\n                            <h1 className=\"text-center w-100\">Price ranges</h1>\n\n                            <FormGroup>\n                                <Label for=\"Price\">\n                                    Price\n                                </Label>\n                                <div>\n                                    <PriceRangeSelector initialValues={[]} onChange={(data) => { this.props.setFieldValue(\"PriceRange\", data); }} />\n                                </div>\n                            </FormGroup>\n\n                        </div>\n                    </Step>\n                    <Step\n                        id=\"step5\"\n                        name={\"Categories & attributes\"}\n                        desc={\"Set categories and product attributes\"}\n                    >\n                        <div className=\"wizard-basic-step  col-6 offset-3\">\n                            <h1 className=\"text-center w-100\">Categories & attributes</h1>\n\n                            <FormGroup>\n                                <Label for=\"Categories\">\n                                    Categories\n                                </Label>\n                                <Select isMulti name=\"colors\" options={this.props.categories} classNamePrefix=\"select\" onChange={(data) => { this.props.setFieldValue('categories', data ? data.map(x => x.value) : []) }} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"Attributes\">\n                                    Attributes\n                                </Label>\n                                <div>\n                                    <AttributeSelector onChange={(data) => this.props.setFieldValue('attributeGroups', data)} attributeGroups={this.props.attributeGroups} selectedAttributeGroups={[]} />\n\n                                </div>\n                            </FormGroup>\n\n                        </div>\n                    </Step>\n                    <Step id=\"step6\" hideTopNav>\n                        <div className=\"wizard-basic-step text-center d-flex justify-content-center align-items-center success-view\">\n                            {(!this.props.saving && !this.props.saved) && <div>\n                                <h1>Your product is ready to launch!</h1>\n                                <p>Configuration for new product is ready. Please click button below to create Your brand new product!</p>\n                                <div>\n                                    <button className=\"btn btn-success btn-xl\" onClick={this.props.submitForm}>CREATE PRODUCT NOW</button>\n                                </div>\n\n                            </div>}\n                            {this.props.saving && <div>\n                                <h1>Creating new product...</h1>\n                                <div className=\"loading\" style={{ width: 80, height: 80, margin: \"auto\", display: \"block\", position: \"unset\" }} />\n                            </div>}\n                            {(!this.props.saving && this.props.saved) && <div>\n                                <h1 className=\"text-success\">Product created!</h1>\n                                <div className=\"glyph-icon simple-icon-check\"></div>\n                                <p>Now You can check product in product list!</p>\n                                <Link to=\"/photo-order/products\" className=\"btn btn-success\">Go to product list</Link>\n                            </div>}\n                        </div>\n                    </Step>\n                </Steps>\n                {!this.props.blockInterface && <BottomNavigation\n                    onClickNext={this.onClickNext}\n                    onClickPrev={this.onClickPrev}\n                    className=\"justify-content-center\"\n                    prevLabel={\"Previouse\"}\n                    nextLabel={'Next'}\n                />}\n            </Wizard>\n        );\n    }\n}\n\nexport default Wizard3D;","import React from \"react\";\nimport { Button, Col, CustomInput, InputGroup, InputGroupAddon, InputGroupText, Row } from \"reactstrap\";\nimport { Colxx } from \"../../../../components/common/CustomBootstrap\";\nimport * as _ from \"underscore\";\n\nexport interface ITemplateRange {\n    positionX: number,\n    positionY: number,\n    sizeX: number,\n    sizeY: number\n}\n\nexport interface ITemplateRangeProps {\n    //priceRange: IPriceRange[]\n    onChange: (data: { templates: ITemplateRange[] }) => void;\n}\n\nexport interface IPriceRangeSelectorState {\n    templates: ITemplateRange[],\n    form: {\n        positionX?: number,\n        positionY?: number,\n        sizeX?: number,\n        sizeY?: number\n    }\n}\n\nexport class TemplateSelector extends React.Component<ITemplateRangeProps, IPriceRangeSelectorState> {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            templates: [],\n            form: {\n                positionX: 0,\n                positionY: 0,\n                sizeX: 0,\n                sizeY: 0\n            }\n        }\n    }\n\n    onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let state = { ...this.state }\n        if (e.target.value) {\n            state.form[e.target.name] = e.target.valueAsNumber\n        } else {\n            state.form[e.target.name] = null;\n        }\n\n        this.setState(state);\n    }\n\n    isButtonDisabled = () => {\n        return false;\n        //return !this.state.form.positionX || !this.state.form.positionY || !this.state.form.sizeX || !this.state.form.sizeY;\n    }\n\n    onAddWindow = () => {\n        var item = { ...this.state.form };\n        var data = [...this.state.templates];\n        data.push((item as any));\n        this.setState({ templates: data }, () => {\n            this.props.onChange((data as any));\n            this.clear();\n\n        })\n\n    }\n\n\n    clear = () => {\n        console.log('clear');\n        let state = {\n            ...this.state,\n            form: {\n                positionX: 0,\n                positionY: 0,\n                sizeX: 0,\n                sizeY: 0\n            }\n        }\n        this.setState(state);\n    }\n\n    onRemoveLast = () => {\n        let list = [...this.state.templates];\n        list.pop();\n        this.setState({ templates: list }, () => {\n            this.props.onChange((list as any));\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <Row className=\"mt-2 mb-2\">\n                    <Colxx xxs={12}>\n                        {\n                            this.state.templates.map((template, index) => (\n                                <Row key={`template-${index}`}>\n                                    <Colxx xxs={2} className=\"pr-0\">\n                                        <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", alignItems: \"center\" }}>Window {index + 1}</div>\n                                    </Colxx>\n                                    <Colxx xxs={5} className=\"pr-0\">\n                                        <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", alignItems: \"center\" }}>Position&nbsp;<strong>{template.positionX}px {template.positionY}px</strong></div>\n                                    </Colxx>\n                                    <Colxx xxs={5} className=\"pr-0\">\n                                        <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", alignItems: \"center\" }}>Size&nbsp;<strong>{template.sizeX}px x {template.sizeY}px</strong></div>\n                                    </Colxx></Row>\n                            ))\n                        }\n\n\n                    </Colxx>\n\n                </Row>\n                <Row style={{ marginTop: \"3rem\" }}>\n                    <Colxx xxs={2} className=\"pr-0\">\n                        <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", alignItems: \"center\" }}>Position in px</div>\n\n                    </Colxx>\n                    <Colxx xxs={5} className=\"pr-0\">\n                        <InputGroup>\n                            <input onChange={(e) => this.onChange(e)} name=\"positionX\" value={this.state.form.positionX} type=\"number\" placeholder=\"X\" className=\"form-control\" />\n                            <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>x</InputGroupText>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Colxx>\n                    <Colxx xxs={5} className=\"pl-0\">\n                        <InputGroup>\n                            <input onChange={(e) => this.onChange(e)} name=\"positionY\" value={this.state.form.positionY} type=\"number\" placeholder=\"Y\" className=\"form-control\" />\n                            <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>y</InputGroupText>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Colxx>\n                    <Colxx xxs={2} className=\"pr-0\">\n                        <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", alignItems: \"center\" }}>Size in px</div>\n\n                    </Colxx>\n                    <Colxx xxs={5} className=\"pr-0\">\n                        <InputGroup>\n                            <input onChange={(e) => this.onChange(e)} name=\"sizeX\" value={this.state.form.sizeX} type=\"number\" placeholder=\"X\" className=\"form-control\" />\n                            <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>x</InputGroupText>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Colxx>\n                    <Colxx xxs={5} className=\"pl-0\">\n                        <InputGroup>\n                            <input onChange={(e) => this.onChange(e)} name=\"sizeY\" value={this.state.form.sizeY} type=\"number\" placeholder=\"Y\" className=\"form-control\" />\n                            <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>y</InputGroupText>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Colxx>\n\n                    <Colxx xxs={6} className=\"mt-1\">\n                        <Button disabled={this.isButtonDisabled()} color=\"primary\" outline onClick={() => this.onAddWindow()}><i className=\"simple-icon-plus\" /> Add new window</Button>\n                    </Colxx>\n                    <Colxx xxs={6} className=\"mt-1 text-right\">\n                        <Button color=\"danger\" outline onClick={() => this.onRemoveLast()}><i className=\"simple-icon-trash\" /> Remove</Button>\n                    </Colxx>\n                </Row>\n            </>\n        )\n    }\n}","import React from \"react\";\nimport { Card, CardBody, CustomInput, Form, FormGroup, FormText, InputGroup, InputGroupAddon, InputGroupText, Label, Row } from \"reactstrap\";\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\nimport TopNavigation from \"../../../components/wizard/TopNavigation\";\nimport { Wizard, Steps, Step } from 'react-albus';\nimport BottomNavigation from \"../../../components/wizard/BottomNavigation\";\nimport { PhotoClient } from \"../../../api/photoClient\";\nimport { CategoryClient } from \"../../../api/categoriesClient\";\nimport { AttributesClient } from \"../../../api/attributesClient\";\nimport { responseItemToAttributeGroup, responseItemToCategory } from \"../PhotoOrderHelper\";\nimport AttributeSelector, { IAttributeGroupItem } from \"../products/components/AttributesSelector\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport { Formik, Form as FormikForm, Field } from \"formik\";\nimport \"./WizardPage.scss\";\nimport PriceRangeSelector from \"../products/components/PriceRangeSelector\";\nimport Select from 'react-select'\nimport { Link } from \"react-router-dom\";\nimport { TemplateSelector } from \"../products/components/TemplateSelector\";\nimport WizardStandardProduct from \"./WizardStandard\";\nimport Wizard3D from \"./Wizard3D\";\nimport { ProductPriceDTO, ProductsClient, ProductsTemplateDTO } from \"../../../api/ApiClient\";\nimport { BASE_URL } from \"../../../api/settings\";\nimport { API_BASE } from \"../../../api/ApiSettings\";\nimport _ from \"underscore\";\n\nenum WizardType { Standard, ThreeD }\n\nexport class ProductWizard extends React.Component<any, any> {\n\n    photoClient: PhotoClient = new PhotoClient();\n\n    productClient: ProductsClient = new ProductsClient(API_BASE);\n\n    categoriesClient: CategoryClient = new CategoryClient();\n    attributesClient: AttributesClient = new AttributesClient();\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            customSize: false,\n            categories: [],\n            attributeGroups: [],\n            saving: false,\n            saved: false,\n            wizardType: null\n        }\n\n        this.categoriesClient.List(\"ProductCategories\").then(response => {\n            let data = response.data.Data.map(x => responseItemToCategory(x))\n            this.setState({ categories: data })\n        });\n\n        this.attributesClient.List(\"ProductAttributes\").then(response => {\n            let data = response.data.Data.map(x => responseItemToAttributeGroup(x))\n            this.setState({ attributeGroups: data })\n        });\n    }\n\n    initialValues = {\n        Name: \"\",\n        Size: 0,\n        Description: \"\",\n        Price: null,\n        SizeSelect: 0,\n        File: null,\n        attributeGroups: [],\n        categories: [],\n        QuantityRangeMin: \"\",\n        QuantityRangeMax: \"\",\n        PriceRange: [],\n        ProductType: 0,\n        ProductTemplates: [],\n        Model3D: null,\n    }\n\n    topNavClick = (stepItem, push) => {\n        if (this.blockInterface) {\n            return;\n        }\n        push(stepItem.id);\n    }\n\n    onClickNext = (goToNext, steps, step) => {\n        step.isDone = true;\n        if (steps.length - 1 <= steps.indexOf(step)) {\n            return;\n        }\n        goToNext();\n    };\n\n    onClickPrev = (goToPrev, steps, step) => {\n        if (steps.indexOf(step) <= 0) {\n            return;\n        }\n        goToPrev();\n    };\n\n    onSubmit = async (values, formik) => {\n        if (this.state.wizardType == WizardType.Standard) {\n            let formData = new FormData();\n            formData.append(\"Description\", values.Description);\n            formData.append(\"Name\", values.Name);\n            formData.append(\"Price\", \"0\");\n            formData.append(\"Size\", values.Size);\n            formData.append(\"FileAsBase64\", values.File);\n            formData.append(\"QuantityRangeMin\", values.QuantityRangeMin);\n            formData.append(\"QuantityRangeMax\", values.QuantityRangeMax);\n            formData.append(\"ProductType\", values.ProductType);\n\n            values.PriceRange.forEach((x, index) => {\n                formData.append(`ProductPrices[${index}].PriceLevelFrom`, x.from);\n                if (x.to) {\n                    formData.append(`ProductPrices[${index}].PriceLevelTo`, x.to);\n                }\n\n                formData.append(`ProductPrices[${index}].Price`, x.value);\n                formData.append(`ProductPrices[${index}].IsDeleted`, \"false\");\n            });\n\n            values.categories.forEach(x => {\n                formData.append(\"CategoriesIds\", x.toString());\n            });\n\n            let attributesGroups: IAttributeGroupItem[] = values.attributeGroups;\n            Array.prototype.concat.apply([], attributesGroups.map(x => x.attributes)).forEach((attrId: number) => {\n                if (!isNaN(attrId)) {\n                    formData.append(\"AttributesIds\", attrId.toString());\n                }\n            });\n\n            this.setState({ saving: true })\n            this.photoClient.AddProduct(formData).then((response) => {\n                if (response.data.Error) {\n                    this.setState({ saving: false })\n                } else {\n                    this.setState({ saved: true, saving: false })\n                }\n                formik.setSubmitting(false);\n            });\n        } else {\n            // var data = new Create3DProduct({\n            //     imageFile: { data: values.File, fileName: values.File.name },\n            //     layerImageFile: { data: values.layerImageFile, fileName: values.layerImageFile.name },\n            //     attributesIds: values.attributeGroups.map(x => x.id), //TO FIX\n            //     categoriesIds: values.categories, //TO FIX\n            //     description: values.Description,\n            //     name: values.Name,\n            //     productPrices: values.PriceRange.map(x => { return new ProductPriceDTO({ price: x.value, priceLevelFrom: x.from, priceLevelTo: x.to, id: 0 }) }),\n            //     sizes: values.ProductTemplates.map(x => { return new ProductsTemplateDTO({ id: 0, productId: 0, positionX: x.positionX, positionY: x.positionY, sizeX: x.sizeX, sizeY: x.sizeY }) }),\n            //     model3D: values.Model3D.id\n            // })\n            // var data = {\n            //     attributesIds: values.attributeGroups.map(x => x.id), //TO FIX\n            //     categoriesIds: values.categories, //TO FIX\n            //     description: values.Description,\n            //     imageFile: { data: values.File, fileName: values.File.name },\n            //     layerImageFile: { data: values.layerImageFile, fileName: values.layerImageFile.name },\n            //     name: values.Name,\n            //     productPrices: values.PriceRange.map(x => { return new ProductPriceDTO({ price: x.value, priceLevelFrom: x.from, priceLevelTo: x.to, id: 0 }) }),\n            //     sizes: values.ProductTemplates.map(x => { return new ProductsTemplateDTO({ id: 0, productId: 0, positionX: x.positionX, positionY: x.positionY, sizeX: x.sizeX, sizeY: x.sizeY }) }),\n            //     model3D: values.Model3D.id\n            // };\n\n            var data: any = {};\n            data.attributesIds = values.attributeGroups.map(x => x.id); //TO FIX\n            data.categoriesIds = values.categories; //TO FIX\n            data.description = values.Description;\n            data.imageFile = { data: values.File, fileName: values.File.name };\n            data.layerImageFile = { data: values.layerImageFile, fileName: values.layerImageFile.name };\n            data.name = values.Name;\n            data.productPrices = values.PriceRange.map(x => { return new ProductPriceDTO({ price: x.value, priceLevelFrom: x.from, priceLevelTo: x.to, id: 0 }).toString() });\n            data.sizes = values.ProductTemplates.map(x => { return new ProductsTemplateDTO({ id: 0, productId: 0, positionX: x.positionX, positionY: x.positionY, sizeX: x.sizeX, sizeY: x.sizeY }).toString() })\n            data.model3D = values.Model3D.id;\n\n            this.setState({ saving: true })\n            await this.productClient.add3DProduct(data.name, data.description, data.imageFile, data.layerImageFile, data.sizes, [], data.productPrices, [], data.categoriesIds, data.attributesIds, data.model3D);\n            this.setState({ saved: true, saving: false });\n            formik.setSubmitting(false);\n\n        }\n\n    }\n\n    get categories() {\n        return this.state.categories.map(category => ({ value: category.Id, label: category.Name }));\n    }\n\n    get attributeGroups() {\n        let data: any[] = [];\n        this.state.attributeGroups.forEach(x => {\n            data.push({\n                label: x.Name,\n                options: x.attributes.map(attr => ({ label: attr.Name, value: attr.Id }))\n            })\n        });\n        return data;\n    }\n\n    get blockInterface() {\n        return this.state.saved || this.state.saving\n    }\n\n    render() {\n        return (\n            <Formik\n                initialValues={this.initialValues}\n                onSubmit={this.onSubmit}\n                enableReinitialize={true}\n            >\n                {({\n                    handleSubmit,\n                    setFieldValue,\n                    setFieldTouched,\n                    handleChange,\n                    handleBlur,\n                    values,\n                    errors,\n                    touched,\n                    isSubmitting,\n                    submitForm\n                }) => (\n                    <FormikForm>\n                        <Card>\n                            <CardBody className=\"wizard wizard-default\">\n                                <h1 style={{ marginTop: 18 }}>Product wizard</h1>\n                                {this.state.wizardType == null && <>\n                                    <Row>\n                                        <Colxx className=\"text-center\">\n                                            <h1>Select product that you will create</h1>\n                                        </Colxx>\n                                    </Row>\n                                    <Row>\n                                        <Colxx className={\"text-right\"}>\n                                            <button onClick={() => this.setState({ wizardType: WizardType.Standard })} className=\"btn btn-primary btn-lg\">\n                                                Standard product\n                                            </button>\n                                        </Colxx>\n                                        <Colxx className={\"text-left\"}>\n                                            <button onClick={() => this.setState({ wizardType: WizardType.ThreeD })} className=\"btn btn-primary btn-lg\">\n                                                3D product\n                                            </button>\n                                        </Colxx>\n                                    </Row>\n                                </>}\n                                {this.state.wizardType == WizardType.Standard && <>\n                                    <WizardStandardProduct {...this.state} setFieldValue={setFieldValue} values={values} handleChange={handleChange} handleBlur={handleBlur} submitForm={submitForm} categories={this.categories} blockInterface={this.blockInterface} />\n                                </>}\n\n                                {this.state.wizardType == WizardType.ThreeD && <>\n                                    <Wizard3D {...this.state} setFieldValue={setFieldValue} values={values} handleChange={handleChange} handleBlur={handleBlur} submitForm={submitForm} categories={this.categories} blockInterface={this.blockInterface} />\n                                </>}\n\n                            </CardBody>\n                        </Card>\n                    </FormikForm>)\n                }\n            </Formik>)\n    }\n\n}\n\nexport default ProductWizard;","import { Formik, useFormik } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Card, CardBody, CardTitle, CustomInput, FormGroup, FormText, InputGroup, InputGroupAddon, Label, Modal, ModalBody, ModalFooter, ModalHeader, Row } from 'reactstrap';\nimport { AdvertisementClient, AdvertisementDTO, FileClient, FileDTO, MultimediaTypesEnum } from '../../../../api/ApiClient';\nimport { API_BASE } from '../../../../api/ApiSettings';\nimport { NotificationManager } from '../../../../components/common/react-notifications';\n\nexport function AdvertisementForm(props: any) {\n    const advertisementClient = new AdvertisementClient(API_BASE);\n    const fileClient = new FileClient(API_BASE);\n\n    const formik = useFormik({\n        initialValues: new AdvertisementDTO({ id: 0, photographerId: 0 }),\n        onSubmit: async values => {\n            await onSubmit(values);\n        },\n    });\n\n\n    useEffect(() => {\n        formik.setValues(props.advertisement, false);\n    }, []);\n\n    async function onSubmit(advertisement: AdvertisementDTO) {\n        NotificationManager.info(\"Saving...\", 'Saving banner.', 3000, null, null, '');\n        var file: File = (advertisement as any).file;\n        var mobileFile: File = (advertisement as any).mobileFile;\n\n        var fileResponse: FileDTO | null = null;\n        var mobileFileResponse: FileDTO | null = null;\n\n\n        if (file) {\n            fileResponse = await fileClient.upload({ data: file, fileName: file.name }, MultimediaTypesEnum.AdvertisementSlider);\n        }\n\n        if (mobileFile) {\n            mobileFileResponse = await fileClient.upload({ data: mobileFile, fileName: mobileFile.name }, MultimediaTypesEnum.AdvertisementSlider);\n        }\n\n        if (fileResponse) {\n            advertisement.fileGuid = fileResponse.guid;\n            advertisement.fileName = fileResponse.name;\n            advertisement.imageUrl = fileResponse.url;\n        }\n\n        if (mobileFileResponse) {\n            advertisement.mobileFileGuid = mobileFileResponse.guid;\n            advertisement.mobileFileName = mobileFileResponse.name;\n            advertisement.mobileImageUrl = mobileFileResponse.url;\n        }\n\n\n        if (advertisement.id) {\n            await advertisementClient.update(advertisement);\n        } else {\n            advertisement.id = 0;\n            advertisement.photographerId = 0;\n            await advertisementClient.create(advertisement);\n\n        }\n        NotificationManager.success(\"Banner saved.\", 'Success', 3000, null, null, '');\n        props.onClose();\n    }\n\n    function openFile(url: string | null | undefined) {\n        if (url) {\n            window.open(url as string, \"_blank\");\n        }\n    }\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <Modal\n                isOpen={true}\n                wrapClassName=\"modal-right\"\n                backdrop=\"static\"\n            >\n                <ModalHeader toggle={() => props.onClose()}>\n                    {formik.values.id ? \"Edit banner\" : \"Add banner\"}\n                </ModalHeader>\n                <ModalBody>\n\n                    <FormGroup>\n                        <Label for=\"buttonText\">\n                            Description\n                        </Label>\n                        <input onChange={formik.handleChange} className=\"form-control\" type=\"text\" placeholder=\"\" id=\"buttonText\" name=\"buttonText\" value={formik.values.buttonText || \"\"} />\n                        <FormText color=\"muted\">\n                            Maximum 100 letters\n                        </FormText>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"File\">\n                            Image\n                        </Label>\n                        <InputGroup>\n                            <CustomInput\n                                type=\"file\"\n                                id=\"file\"\n                                name=\"file\"\n                                onChange={(event) => {\n                                    if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                        formik.setFieldValue(\"file\", (event.currentTarget as any).files[0], false)\n                                    }\n                                }} />\n                            {formik.values.imageUrl ? <InputGroupAddon addonType=\"append\" onClick={() => openFile(formik.values.imageUrl)}>Show</InputGroupAddon> : null}\n                        </InputGroup>\n                        <FormText color=\"muted\">\n                            Maximum 1920x800 pixels\n                        </FormText>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"mobileFIle\">\n                            Mobile Image\n                        </Label>\n                        <InputGroup>\n                            <CustomInput\n                                type=\"file\"\n                                id=\"mobileFile\"\n                                name=\"mobileFile\"\n                                onChange={(event) => {\n                                    if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                        formik.setFieldValue(\"mobileFile\", (event.currentTarget as any).files[0], false)\n                                    }\n                                }} />\n                            {formik.values.mobileImageUrl ? <InputGroupAddon addonType=\"append\" onClick={() => openFile(formik.values.mobileImageUrl)}>Show</InputGroupAddon> : null}\n                        </InputGroup>\n                        <FormText color=\"muted\">\n                            Maximum 1280x1920 pixels\n                        </FormText>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"buttonText\">\n                            Url\n                        </Label>\n                        <input onChange={formik.handleChange} className=\"form-control\" type=\"text\" placeholder=\"\" id=\"externalUrl\" name=\"externalUrl\" value={formik.values.externalUrl || \"\"} />\n                    </FormGroup>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"secondary\" outline onClick={() => props.onClose()}>\n                        Cancel\n                    </Button>\n                    <Button color=\"primary\" type=\"submit\" onClick={formik.handleSubmit}>\n                        Save\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        </form>);\n}","import React from \"react\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport { NavLink, Card, UncontrolledDropdown, DropdownToggle, DropdownItem, DropdownMenu, Badge } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\"\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { AdvertisementDTO } from \"../../../../api/ApiClient\";\nimport { Colxx } from \"../../../../components/common/CustomBootstrap\";\n\n\ninterface IAdvertisementListItem {\n    entity: AdvertisementDTO;\n    onCheckItem: (e, id) => void;\n    onDelete: (entity: AdvertisementDTO) => void;\n    onEdit: (entity: AdvertisementDTO) => void;\n    onChangeVisible: (entity: AdvertisementDTO, visible: boolean) => void;\n    index: number\n}\n\nexport class AdvertisementListItem extends React.Component<IAdvertisementListItem, any> {\n\n    state = {\n        isImage: true\n    }\n\n    onImageError = () => {\n        console.log('err');\n        this.setState({ isImage: false });\n    }\n\n    render() {\n        return (\n            <Draggable key={this.props.entity.id} draggableId={\"category-\" + this.props.entity.id} index={this.props.index}>\n                {(provided, snapshot) => (\n                    <div ref={provided.innerRef} {...provided.draggableProps} key={this.props.entity.id}>\n                        <Colxx xxs=\"12\" className=\"mb-3 productList\" >\n                            <ContextMenuTrigger id=\"product_menu\" collect={(props) => { return { data: props.data, product: this.props.entity } }}>\n                                <Card\n                                    {...provided.dragHandleProps}\n                                    onClick={(event) => this.props.onCheckItem(event, this.props.entity.id)}\n                                    className={\"d-flex flex-row productList__card\"}>\n                                    < NavLink to={`?p=${this.props.entity.id}`} className=\"d-flex\">\n                                        <img src={this.state.isImage ? (this.props.entity.imageUrl || \"\") : \"https://via.placeholder.com/400?text=No%20image\"} className=\"list-thumbnail responsive border-0 card-img-left\" onError={() => this.onImageError()} />\n                                    </NavLink>\n                                    <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\n                                        <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\n                                            <NavLink to={`?p=1`} className=\"w-15\">\n                                                <p className=\"list-item-heading mb-1 truncate\">\n                                                    {this.props.entity.buttonText}\n                                                </p>\n                                            </NavLink>\n                                            <p className=\"mb-1 text-muted text-small w-50\">{this.props.entity.externalUrl}</p>\n                                            <p className=\"mb-1  w-10 text-right\">\n                                                <Badge color={this.props.entity.isHidden ? \"danger\" : \"light\"} pill>\n                                                    {this.props.entity.isHidden ? \"Hidden\" : \"Visible\"}\n                                                </Badge>\n                                            </p>\n                                            <div className=\"mb-1 w-25 text-right pr-3\">\n                                                <UncontrolledDropdown className=\"productList__dropdown\">\n                                                    <DropdownToggle caret color=\"secondary\" outline>\n                                                        Actions\n                                                    </DropdownToggle>\n                                                    <DropdownMenu>\n                                                        <DropdownItem onClick={() => this.props.onEdit(this.props.entity)}>\n                                                            <i className=\"simple-icon-docs\" /> <span>Edit</span>\n                                                        </DropdownItem>\n                                                        <DropdownItem onClick={() => this.props.onChangeVisible(this.props.entity, this.props.entity.isHidden ? true : false)}>\n                                                            <i className=\"simple-icon-docs\" /> <span>Set {this.props.entity.isHidden ? \"Visible\" : \"Hidden\"}</span>\n                                                        </DropdownItem>\n                                                        <DropdownItem onClick={() => this.props.onDelete(this.props.entity)}>\n                                                            <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                                                        </DropdownItem>\n                                                    </DropdownMenu>\n                                                </UncontrolledDropdown>\n                                            </div>\n                                            <div  >\n                                                <FontAwesomeIcon icon={faBars} />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </Card>\n                            </ContextMenuTrigger>\n                        </Colxx>\n                    </div>\n                )}\n            </Draggable>\n        );\n    }\n}\n\nexport default AdvertisementListItem;","import React, { useEffect, useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { Button, Card, CardBody, CardTitle, Row } from 'reactstrap';\nimport { AdvertisementClient, AdvertisementDTO } from '../../../../api/ApiClient';\nimport { API_BASE } from '../../../../api/ApiSettings';\nimport { Colxx, Separator } from '../../../../components/common/CustomBootstrap';\nimport { NotificationManager } from '../../../../components/common/react-notifications';\nimport { AdvertisementForm } from './advertisementForm';\nimport AdvertisementListItem from './advertisementListItem';\n\nexport function AdvertisementsList() {\n    const advertisementClient = new AdvertisementClient(API_BASE);\n    const [advertisements, setAdvertisements] = useState<AdvertisementDTO[]>([])\n    const [editAdvertisement, setEditAdvertisement] = useState<AdvertisementDTO | null>(null);\n\n    const populateAdvertisements = async () => {\n        setAdvertisements(await advertisementClient.list())\n    }\n\n    const reorder = (list: AdvertisementDTO[], startIndex: number, endIndex: number): AdvertisementDTO[] => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n\n        return result;\n    };\n\n    useEffect(() => {\n        populateAdvertisements().catch(console.error);\n    }, [])\n\n    function onAdd() {\n        console.log()\n        setEditAdvertisement(new AdvertisementDTO());\n    }\n\n    async function onCloseForm() {\n        await populateAdvertisements()\n        setEditAdvertisement(null);\n    }\n\n    async function onDragEnd(result: DropResult) {\n        if (result.source && result.destination) {\n            const items = reorder(advertisements, result.source.index, result.destination.index);\n            setAdvertisements(items);\n            let ids = items.map(x => x.id);\n            await advertisementClient.reorder(ids);\n            await populateAdvertisements();\n        }\n    }\n\n    async function onSetVisible(entity: AdvertisementDTO, visible: boolean) {\n        entity.isHidden = !visible;\n        NotificationManager.info(\"Updating visible.\", 'Updating...', 3000, null, null, '');\n        await advertisementClient.update(entity);\n        NotificationManager.success(\"Updated.\", 'Success', 3000, null, null, '');\n        await populateAdvertisements();\n    }\n\n    async function onDelete(entity: AdvertisementDTO) {\n        NotificationManager.info(\"Deleting banner\", 'Deleting...', 3000, null, null, '');\n        await advertisementClient.delete(entity.id);\n        NotificationManager.success(\"Deleted.\", 'Success', 3000, null, null, '');\n        await populateAdvertisements();\n    }\n\n    async function onEdit(entity: AdvertisementDTO) {\n        setEditAdvertisement(entity);\n    }\n\n    return (<>\n        <Card>\n            <CardBody>\n                <CardTitle>\n                    Banner settings\n                    <div className=\"text-zero top-right-button-container\">\n                        <Button\n                            color=\"primary\"\n                            size=\"lg\"\n                            className=\"top-right-button\"\n                            onClick={onAdd}\n                        >\n                            <i className=\"simple-icon-plus\" /> ADD BANNER\n                        </Button>\n                        {'  '}\n                    </div>\n                </CardTitle>\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <DragDropContext onDragEnd={onDragEnd}>\n                            <Droppable droppableId=\"categories\">\n                                {(provided, snapshot) => (\n                                    <div {...provided.droppableProps} ref={provided.innerRef}>\n                                        {advertisements.map((p, index) => {\n                                            return (\n                                                <AdvertisementListItem onChangeVisible={onSetVisible} key={\"advitem\" + index} entity={p} onDelete={onDelete} onEdit={onEdit} onCheckItem={() => { }} index={index} />\n                                            )\n                                        })}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n\n                        </DragDropContext>\n                    </Colxx>\n                </Row>\n            </CardBody>\n        </Card>\n        {editAdvertisement != null ? <AdvertisementForm advertisement={editAdvertisement} onClose={onCloseForm} /> : null}\n    </>)\n}\n\n","import React from \"react\";\nimport { Row, Card, CardBody, CardTitle, FormGroup, Label, Input, FormText, CustomInput, Button, InputGroup, InputGroupAddon } from \"reactstrap\";\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport IntlMessages from \"../../../helpers/IntlMessages\";\nimport { HomeClient } from \"../../../api/homeClient\";\nimport { Formik, Form, Field } from \"formik\";\nimport { PhotoClient } from \"../../../api/photoClient\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport { PhotographerClient, UserSettingsDTO } from \"../../../api/ApiClient\";\nimport { API_BASE } from \"../../../api/ApiSettings\";\nimport { AuthService } from \"../../../services/auth.service\";\nimport { AdvertisementsList } from \"./advertisement\";\nimport { WEB_ORDERING_BASE_URL } from \"../../../api/settings\";\n\nexport class Settings extends React.Component<any, any> {\n\n    homeClient: HomeClient = new HomeClient();\n    photoClient: PhotoClient = new PhotoClient();\n\n    photographerClient: PhotographerClient = new PhotographerClient(API_BASE)\n    authService: AuthService = new AuthService();\n    state = {\n        MobileToken: \"\",\n\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.homeClient.PhotographerDetails().then((response) => {\n            if (response.data.Data) {\n                this.setState({ MobileToken: response.data.Data.MobileToken })\n            }\n        });\n\n    }\n\n    get initialValues() {\n        return {\n            LabId: this.state.MobileToken || \"\",\n            Promotion: null,\n            Logo: null\n        }\n    }\n\n    onSubmit = async (values, formik) => {\n\n        let softwareSettings = await this.photoClient.SaveSoftwareSettings(values.Logo, values.Promotion, values.LabId);\n\n        if (softwareSettings.data.Error) {\n            NotificationManager.error(\"Saving error\", softwareSettings.data.Error, 3000, null, null, '');\n        }\n\n        if (!softwareSettings.data.Error) {\n            NotificationManager.success(\"Data saved\", \"Data saved correctly\", 3000, null, null, '');\n        }\n\n        this.setState({ MobileToken: values.LabId })\n\n        formik.setSubmitting(false);\n    }\n\n    render() {\n        return (\n            <>\n                <Formik\n                    initialValues={this.initialValues}\n                    onSubmit={this.onSubmit}\n                    enableReinitialize={true}\n                >\n                    {({\n                        handleSubmit,\n                        setFieldValue,\n                        setFieldTouched,\n                        handleChange,\n                        handleBlur,\n                        values,\n                        errors,\n                        touched,\n                        isSubmitting,\n                        submitForm\n                    }) => (\n                        <Form>\n                            <Row>\n                                <Colxx xxs=\"12\">\n                                    <Breadcrumb heading=\"Settings\" match={this.props.match} />\n                                    <Separator className=\"mb-5\" />\n                                </Colxx>\n                            </Row>\n                            <Row>\n                                <Colxx xxs=\"12\">\n                                    <Card>\n                                        <CardBody>\n                                            <CardTitle>\n                                                Software settings\n                                            </CardTitle>\n                                            <Form>\n                                                <FormGroup>\n                                                    <Label for=\"LabId\">\n                                                        Lab ID\n                                                    </Label>\n                                                    <InputGroup>\n                                                        <Field className=\"form-control\" name=\"LabId\" type=\"text\" id=\"LabId\" placeholder={\"LabId\"} disabled={this.state.MobileToken ? \"disabled\" : \"\"} />\n                                                    </InputGroup>\n\n                                                </FormGroup>\n                                                <FormGroup>\n                                                    <Label for=\"logo\">\n                                                        Logo\n                                                    </Label>\n                                                    <InputGroup>\n                                                        <CustomInput\n                                                            type=\"file\"\n                                                            id=\"logo\"\n                                                            name=\"logo\"\n                                                            onChange={(event) => {\n                                                                if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                                                    setFieldValue(\"Logo\", event.currentTarget.files[0]);\n                                                                }\n                                                            }} />\n                                                        <InputGroupAddon addonType=\"append\">Show</InputGroupAddon>\n                                                    </InputGroup>\n                                                    <FormText color=\"muted\">\n                                                        (maximum size 1270x1270 72ppi .jpg or .png)\n                                                    </FormText>\n                                                </FormGroup>\n\n                                                <FormGroup>\n                                                    <Label for=\"promotion\">\n                                                        Promotion\n                                                    </Label>\n                                                    <InputGroup>\n                                                        <CustomInput\n                                                            type=\"file\"\n                                                            id=\"promotion\"\n                                                            name=\"promotion\"\n                                                            onChange={(event) => {\n                                                                if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                                                    setFieldValue(\"Promotion\", event.currentTarget.files[0]);\n                                                                }\n                                                            }} />\n                                                        <InputGroupAddon addonType=\"append\">Show</InputGroupAddon>\n                                                    </InputGroup>\n                                                    <FormText color=\"muted\">\n                                                        (maximu size 1440x2560 72ppi .jpg or .png\n                                                    </FormText>\n                                                </FormGroup>\n                                                <Button type=\"submit\" color=\"primary\" className=\"mt-4\">\n                                                    Save\n                                                </Button>\n                                            </Form>\n                                        </CardBody>\n                                    </Card>\n                                </Colxx>\n                            </Row>\n                        </Form>\n                    )}\n                </Formik>\n                <Row className=\"mt-4\">\n                    <Colxx xxs=\"12\">\n                        <AdvertisementsList />\n                    </Colxx>\n                </Row>\n                <Row className=\"mt-3\">\n                    <Colxx xxs=\"12\">\n                        <Card>\n                            <CardBody>\n                                <CardTitle>\n                                    Direct link to your web-ordering\n                                </CardTitle>\n\n                                <div className=\"row\">\n                                    <div className=\"col-xs-12\">\n                                        <a href={`${WEB_ORDERING_BASE_URL}/photographer/${this.authService.getId()}`} target=\"_blank\">{`${WEB_ORDERING_BASE_URL}/photographer/${this.authService.getId()}`}</a>\n                                    </div>\n                                </div>\n\n                            </CardBody>\n                        </Card>\n                    </Colxx>\n                </Row>\n            </>\n        );\n    }\n}\n\nexport default Settings;","import React from \"react\";\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport { NavLink, Card, UncontrolledDropdown, DropdownToggle, DropdownItem, DropdownMenu, Row, Collapse } from \"reactstrap\";\nimport { IAttributeGroup, IAttribute } from \"./attribute\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\"\nimport { DraggableProvidedDragHandleProps, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport classnames from \"classnames\";\nimport shortid from \"shortid\";\n\ninterface ICategoryListItem {\n    attributeGroup: IAttributeGroup;\n    onCheckItem: (e, id) => void;\n    onDelete: (attributeGroup: IAttributeGroup) => void;\n    onEdit: (attributeGroup: IAttributeGroup) => void;\n    onAddAttribute: (attributeGroup: IAttributeGroup) => void;\n    onDeleteAttribute: (attribute: IAttribute) => void;\n    onEditAttribute: (attribute: IAttribute) => void;\n    groupDragHandler: DraggableProvidedDragHandleProps | undefined;\n}\n\n\n\nexport class AttributeListItem extends React.Component<ICategoryListItem, any> {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCollapsed: false,\n            isAttrImage: {\n\n            }\n        }\n    }\n\n    isImage(attrId: number) {\n        return this.state.isAttrImage[attrId] == null || this.state.isAttrImage[attrId] == true;\n    }\n\n    onImageError = (attrId: number) => {\n        console.log('on image-error');\n        let images = { ... this.state.isAttrImage }\n        images[attrId] = false\n        this.setState({ isAttrImage: images });\n    }\n\n    get orderedAttributes() {\n        let attributes: IAttribute[] = this.props.attributeGroup.attributes;\n        return attributes.sort((a, b) => a.Position - b.Position);\n    }\n\n    render() {\n        return (\n            <Colxx xxs=\"12\" key={\"attrgroup-\" + this.props.attributeGroup.Id} className=\"mb-3 productList\">\n                <ContextMenuTrigger id=\"product_menu\" collect={(props) => { return { data: props.data, product: this.props.attributeGroup } }}>\n                    <Card  {...this.props.groupDragHandler} onClick={(event) => this.props.onCheckItem(event, this.props.attributeGroup.Id)} className={\"d-flex flex-row productList__card\"}>\n                        <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\n                            <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\n                                <NavLink to={`?p=1`} className=\"w-70\">\n                                    <p style={{ cursor: \"pointer\" }} className=\"list-item-heading mb-1 truncate d-flex align-items-center\">\n                                        {this.props.attributeGroup.Name}\n                                        <a className=\"ml-3\" style={{ width: \"20px\", cursor: \"grab\", display: \"inline-block\" }} >\n                                            {this.props.attributeGroup.attributes?.length > 0 && <div onClick={() => this.setState({ isCollapsed: !this.state.isCollapsed })} style={{ cursor: \"pointer\" }} className={classnames(\"glyph-icon\", { \"simple-icon-arrow-left\": this.state.isCollapsed, 'simple-icon-arrow-down': !this.state.isCollapsed })} />}\n                                        </a>\n                                    </p>\n                                </NavLink>\n                                <div className=\"mb-1 w-30 text-right pr-3\">\n                                    <UncontrolledDropdown className=\"productList__dropdown\">\n                                        <DropdownToggle caret color=\"secondary\" outline>\n                                            Actions\n                                        </DropdownToggle>\n                                        <DropdownMenu>\n                                            <DropdownItem onClick={() => this.props.onAddAttribute(this.props.attributeGroup)}>\n                                                <i className=\"simple-icon-docs\" /> <span>Add attribute</span>\n                                            </DropdownItem>\n                                            <DropdownItem onClick={() => this.props.onEdit(this.props.attributeGroup)}>\n                                                <i className=\"simple-icon-docs\" /> <span>Edit</span>\n                                            </DropdownItem>\n                                            <DropdownItem onClick={() => this.props.onDelete(this.props.attributeGroup)}>\n                                                <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                                            </DropdownItem>\n                                        </DropdownMenu>\n                                    </UncontrolledDropdown>\n                                </div>\n                                <div>\n                                    <FontAwesomeIcon icon={faBars} />\n                                </div>\n                            </div>\n                        </div>\n                    </Card>\n                    <Collapse isOpen={this.state.isCollapsed}>\n                        <Row>\n                            <Colxx className={\"pl-3\"}>\n                                <Droppable droppableId={this.props.attributeGroup.Id.toString()} type={\"attributeGroup-\" + this.props.attributeGroup.Id}>\n                                    {(provided, snapshot) => (\n                                        <div ref={provided.innerRef}>\n                                            {this.orderedAttributes.map((attribute, index) => {\n                                                return (\n                                                    <Draggable key={'attributeDragable-' + attribute.Id} draggableId={attribute.Id.toString()} index={index}>\n                                                        {(provided, snapshot) => (\n                                                            <div ref={provided.innerRef}  {...provided.draggableProps}>\n                                                                <Card {...provided.dragHandleProps} key={'attribute-' + attribute.Id} onClick={(event) => this.props.onCheckItem(event, this.props.attributeGroup.Id)} className={\"d-flex flex-row productList__card mt-1\"} style={{ marginLeft: \"3rem\" }}>\n                                                                    <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\n                                                                        <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\n                                                                            <NavLink to={`?p=1`} className=\"w-20\">\n                                                                                <p className=\"list-item-heading mb-1 truncate\">\n                                                                                    {attribute.Name}\n                                                                                </p>\n                                                                            </NavLink>\n                                                                            <p className={classnames(\"mb-1 text-muted text-small w-40\")}>{attribute.Description}</p>\n                                                                            <div className=\"w-30\">\n                                                                                Price correction:\n                                                                                <strong className=\"ml-1\">\n                                                                                    {attribute.PriceCorrectionCurrent > 0 ? attribute.PriceCorrectionCurrent.toFixed(2) + \"€\" : \"\"}\n                                                                                    {attribute.PriceCorrectionPercent > 0 ? attribute.PriceCorrectionPercent.toFixed(2) + \"%\" : \"\"}\n                                                                                    {attribute.PriceCorrectionPercent == 0 && attribute.PriceCorrectionCurrent == 0 ? \"No price correction\" : \"\"}\n                                                                                </strong>\n\n                                                                            </div>\n                                                                            {/* {attribute.PriceCorrectionCurrent > 0 && <p className=\"mb-1 text-muted text-small w-20 w-sm-100\">{attribute.PriceCorrectionCurrent} &euro;</p>}\n                                                                            {attribute.PriceCorrectionPercent > 0 && <p className=\"mb-1 text-muted text-small w-20 w-sm-100\">{attribute.PriceCorrectionPercent}%</p>} */}\n                                                                            <div className=\"mb-1 w-10 text-right  pr-3\">\n                                                                                <UncontrolledDropdown className=\"productList__dropdown\">\n                                                                                    <DropdownToggle caret color=\"secondary\" outline>\n                                                                                        Actions\n                                                                                </DropdownToggle>\n                                                                                    <DropdownMenu>\n                                                                                        <DropdownItem onClick={() => this.props.onEditAttribute(attribute)}>\n                                                                                            <i className=\"simple-icon-docs\" /> <span>Edit</span>\n                                                                                        </DropdownItem>\n                                                                                        <DropdownItem onClick={() => this.props.onDeleteAttribute(attribute)}>\n                                                                                            <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                                                                                        </DropdownItem>\n                                                                                    </DropdownMenu>\n                                                                                </UncontrolledDropdown>\n                                                                            </div>\n                                                                            <div>\n                                                                                <FontAwesomeIcon icon={faBars} />\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </Card>\n                                                            </div>\n                                                        )}\n                                                    </Draggable>\n                                                )\n                                            })\n                                            }\n                                            {provided.placeholder}\n                                        </div>\n                                    )}\n                                </Droppable>\n                            </Colxx>\n                        </Row>\n                    </Collapse>\n\n                </ContextMenuTrigger>\n            </Colxx>\n        );\n    }\n}\n\nexport default AttributeListItem;","import React from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    FormGroup,\n    InputGroup,\n    CustomInput,\n    InputGroupAddon,\n    InputGroupText,\n    FormText,\n} from 'reactstrap';\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport { Formik, Form, Field } from 'formik';\nimport { PhotoClient } from '../../../api/photoClient';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport { IAttributeGroup } from './attribute';\n\nexport interface IAddEditAttributeGroupModalProps {\n    modalOpen: boolean,\n    toggleModal: () => void,\n    onSave: (category: IAttributeGroup) => void,\n    attributeGroup: IAttributeGroup | null\n}\n\nexport class AddEditAttributeGroupModal extends React.Component<IAddEditAttributeGroupModalProps, any> {\n    _initialValues = {\n        Name: \"\",\n        Id: 0\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customSize: false\n        }\n    }\n\n    get initialValues() {\n        if (this.props.attributeGroup) {\n            return {\n                Name: this.props.attributeGroup.Name,\n                Id: this.props.attributeGroup.Id,\n                File: null,\n                Key: this.props.attributeGroup.Key\n            }\n        }\n        return this._initialValues;\n    }\n\n    onSubmit = (values, formik) => {\n        this.props.onSave({ Id: values.Id, Position: 0, Name: values.Name, attributes: this.props.attributeGroup ? this.props.attributeGroup.attributes : [], Key: values.Key });\n        this.props.toggleModal();\n        formik.setSubmitting(false);\n    }\n\n    render() {\n        return (<Formik\n            initialValues={this.initialValues}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n        >\n            {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                isSubmitting,\n                submitForm\n            }) => (\n                <Form><Modal\n                    isOpen={this.props.modalOpen}\n                    toggle={this.props.toggleModal}\n                    wrapClassName=\"modal-right\"\n                    backdrop=\"static\"\n                >\n                    <ModalHeader toggle={this.props.toggleModal}>\n                        {this.props.attributeGroup?.Id == 0 ? \"Add attribute group\" : \"Edit attribute group\"}\n                    </ModalHeader>\n                    <ModalBody>\n\n                        <FormGroup>\n                            <Label for=\"Name\">\n                                Name\n                                </Label>\n                            <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Name\"} maxLength={20} />\n                            <FormText color=\"muted\">\n                                Maximum 20 letters\n                                </FormText>\n                        </FormGroup>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" outline onClick={this.props.toggleModal}>\n                            Cancel\n                            </Button>\n                        <Button color=\"primary\" type=\"submit\" onClick={submitForm}>\n                            Save\n                            </Button>\n                    </ModalFooter>\n                </Modal>\n                </Form>)\n            }\n        </Formik>\n        );\n    }\n}\n\nexport default AddEditAttributeGroupModal;\n","import React from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    FormGroup,\n    InputGroup,\n    CustomInput,\n    InputGroupAddon,\n    InputGroupText,\n    FormText,\n} from 'reactstrap';\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport { Formik, Form, Field } from 'formik';\nimport { PhotoClient } from '../../../api/photoClient';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport { IAttributeGroup, IAttribute, ICreateAttribute } from './attribute';\nimport { FileToBase64 } from '../../../helpers/FileHelper';\n\nexport interface IAddEditAttributeModalProps {\n    modalOpen: boolean,\n    toggleModal: () => void,\n    onSave: (attribute: ICreateAttribute) => void,\n    attribute: IAttribute | null\n}\n\nexport class AddEditAttributeModal extends React.Component<IAddEditAttributeModalProps, any> {\n    _initialValues = {\n        Name: \"\",\n        Id: 0,\n        AttribiuteGroupId: 0,\n        Descriptipn: \"\",\n        CorrectionPrice: 0,\n        CorrectionPercent: 0,\n        CorrectionType: 0\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customSize: false\n        }\n    }\n\n    get initialValues() {\n        if (this.props.attribute) {\n            return {\n                Name: this.props.attribute.Name,\n                Id: this.props.attribute.Id,\n                Description: this.props.attribute.Description,\n                CorrectionPrice: this.props.attribute.PriceCorrectionCurrent,\n                CorrectionPercent: this.props.attribute.PriceCorrectionPercent,\n                Position: this.props.attribute.Position,\n                AttributeGroupId: this.props.attribute.AttributeGroupId,\n                CorrectionType: this.props.attribute.PriceCorrectionPercent > 0 ? 1 : 0\n            }\n        }\n        return this._initialValues;\n    }\n\n    onSubmit = async (values, formik) => {\n        let fileName = \"\";\n        let fileBase64 = \"\";\n        if (values.File) {\n            fileName = values.File.name;\n            fileBase64 = await FileToBase64(values.File);\n        }\n        if (values.CorrectionType == 0) {\n            values.CorrectionPercent = 0;\n        } else {\n            values.CorrectionPrice = 0;\n        }\n\n        this.props.onSave({ Id: values.Id, Name: values.Name, Description: values.Description, PriceCorrectionPercent: values.CorrectionPercent, PriceCorrectionCurrent: values.CorrectionPrice, Position: values.Position, AttributeGroupId: values.AttributeGroupId });\n        this.props.toggleModal();\n        formik.setSubmitting(false);\n    }\n\n    render() {\n        return (<Formik\n            initialValues={this.initialValues}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n        >\n            {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                isSubmitting,\n                submitForm\n            }) => (\n                <Form><Modal\n                    isOpen={this.props.modalOpen}\n                    toggle={this.props.toggleModal}\n                    wrapClassName=\"modal-right\"\n                    backdrop=\"static\"\n                >\n                    <ModalHeader toggle={this.props.toggleModal}>\n                        {this.props.attribute?.Id == 0 ? \"Add attribute\" : \"Edit attribute\"}\n                    </ModalHeader>\n                    <ModalBody>\n                        <FormGroup>\n                            <Label for=\"Name\">\n                                Name\n                                </Label>\n                            <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Name\"} maxLength={20} />\n                            <FormText color=\"muted\">\n                                Maximum 20 letters\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"Description\">\n                                Description\n                                </Label>\n                            <Field className=\"form-control\" name=\"Description\" type=\"text\" id=\"Description\" placeholder={\"Description\"} maxLength={100} />\n                            <FormText color=\"muted\">\n                                Maximum 100 letters\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"CorrectionType\">\n                                Price correction type\n                                </Label>\n                            <select\n                                id=\"CorrectionType\"\n                                name=\"CorrectionType\"\n                                className=\"form-control\"\n                                value={values.CorrectionType}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            >\n                                <option value={1}>Percentage (%)</option>\n                                <option value={0}>Currency (€)</option>\n                            </select>\n                        </FormGroup>\n                        {values.CorrectionType == 0 &&\n                            <FormGroup>\n                                <Label for=\"Price\">\n                                    Price correction [&euro;]\n                                </Label>\n                                <InputGroup className=\"mb-3\">\n                                    <Field className=\"form-control\" name=\"CorrectionPrice\" type=\"number\" id=\"CorrectionPrice\" placeholder={\"Correction Price\"} />\n                                    <InputGroupAddon addonType=\"append\">\n                                        <InputGroupText>&euro;</InputGroupText>\n                                    </InputGroupAddon>\n                                </InputGroup>\n                            </FormGroup>\n                        }\n                        {values.CorrectionType == 1 &&\n                            <FormGroup>\n                                <Label for=\"Price\">\n                                    Percentage correction [%]\n                                </Label>\n                                <InputGroup className=\"mb-3\">\n                                    <Field className=\"form-control\" name=\"CorrectionPercent\" type=\"number\" id=\"CorrectionPercent\" placeholder={\"Correction Percent\"} />\n                                    <InputGroupAddon addonType=\"append\">\n                                        <InputGroupText>%</InputGroupText>\n                                    </InputGroupAddon>\n                                </InputGroup>\n                            </FormGroup>\n                        }\n\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" outline onClick={this.props.toggleModal}>\n                            Cancel\n                            </Button>\n                        <Button color=\"primary\" type=\"submit\" onClick={submitForm}>\n                            Save\n                            </Button>\n                    </ModalFooter>\n                </Modal>\n                </Form>)\n            }\n        </Formik>\n        );\n    }\n}\n\nexport default AddEditAttributeModal;\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\"\nimport { DeleteModal } from \"../../../components/modals/delete/DeleteModal\";\nimport { AttributeListItem } from \"./attributeListItem\";\nimport { IAttributeGroup, IAttribute, ICreateAttribute, ICreateAttributeGroup } from \"./attribute\";\nimport AddEditAttributeGroupModal from \"./addEditAttributeGroupModal\";\nimport AddEditAttributeModal from \"./addEditAttributeModal\";\nimport { DragDropContext, Draggable, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { AttributesClient } from \"../../../api/attributesClient\";\nimport NotificationManager from \"../../../components/common/react-notifications/NotificationManager\";\n\nexport interface IAttributesState {\n    attributesGroups: IAttributeGroup[],\n    editedAttributeGroup: IAttributeGroup | null,\n    deleteAttributeGroup: IAttributeGroup | null,\n    editAttribute: IAttribute | null,\n    deleteAttribute: IAttribute | null,\n    loading: boolean\n}\n\nconst reorder = (list: any[], startIndex: number, endIndex: number): any[] => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nexport class Attributes extends React.Component<any, IAttributesState> {\n\n    //private static Key: string = \"ProductAttributes\"\n\n    attributesClient: AttributesClient = new AttributesClient();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            attributesGroups: [],\n            editedAttributeGroup: null,\n            deleteAttributeGroup: null,\n            deleteAttribute: null,\n            editAttribute: null,\n            loading: true\n        }\n    }\n\n    responseAttributeItemToAttribute = (item: any, attributeGroupId: number): IAttribute => {\n        return {\n            Id: item.id,\n            Name: item.name,\n            Description: item.description,\n            PriceCorrectionPercent: item.priceCorrectionPercent,\n            PriceCorrectionCurrent: item.priceCorrectionCurrent,\n            Position: item.position,\n            AttributeGroupId: attributeGroupId\n        }\n    }\n\n    responseItemToAttributeGroup = (item: any): IAttributeGroup => {\n        let i = {\n            Id: item.id,\n            Name: item.name,\n            Key: item.key,\n            attributes: [],\n            Position: item.position\n        };\n\n        (item.attributes as any[]).forEach(attr => {\n            (i.attributes as any[]).push(this.responseAttributeItemToAttribute(attr, i.Id));\n        });\n\n        return i;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.dataKey != prevProps.dataKey) {\n            this.setState({\n                attributesGroups: [],\n                editedAttributeGroup: null,\n                deleteAttributeGroup: null,\n                deleteAttribute: null,\n                editAttribute: null\n            }, () => {\n                this.componentDidMount();\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true })\n        this.attributesClient.List(this.props.dataKey).then(response => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'List attribute error', 3000, null, null, '');\n                return;\n            }\n            console.log(response);\n            var attributesGroup: IAttributeGroup[] = [];\n            response.data.Data.forEach(item => {\n                attributesGroup.push(this.responseItemToAttributeGroup(item));\n            });\n            this.setState({ attributesGroups: attributesGroup });\n            this.setState({ loading: false })\n        });\n    }\n\n\n    edit = (attributeGroup: IAttributeGroup) => {\n        let attributesGroups = [...this.state.attributesGroups];\n        let c = attributesGroups.find(x => x.Id == attributeGroup.Id);\n        c = Object.assign(c, attributeGroup);\n        NotificationManager.info(\"Saving attribute group\", 'Saving...', 3000, null, null, '');\n        this.attributesClient.Update(this.attributeGroupToCreateAttributeGroup(c), this.props.dataKey).then(response => {\n            NotificationManager.success(\"Atribute group saved.\", 'Saved', 3000, null, null, '');\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Update category error', 3000, null, null, '');\n                return;\n            }\n            this.setState({ attributesGroups: attributesGroups });\n        })\n    }\n\n    create = (attributeGroup: IAttributeGroup) => {\n        let attributesGroups = [...this.state.attributesGroups];\n        NotificationManager.info(\"Saving attribute group\", 'Saving...', 3000, null, null, '');\n        this.attributesClient.Add(this.attributeGroupToCreateAttributeGroup(attributeGroup), this.props.dataKey).then(response => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Create category error', 3000, null, null, '');\n                return;\n            }\n            NotificationManager.success(\"Atribute group saved.\", 'Saved', 3000, null, null, '');\n            var attrGroup = this.responseItemToAttributeGroup(response.data.Data);\n            attributesGroups.push(attrGroup);\n            this.setState({ attributesGroups: attributesGroups });\n        });\n\n    }\n\n    delete = (attributeGroup: IAttributeGroup) => {\n        let attributesGroups = [...this.state.attributesGroups];\n        NotificationManager.info(\"Deleting attribute group\", 'Deleting...', 3000, null, null, '');\n        this.attributesClient.Delete(attributeGroup.Id).then(response => {\n            let cindex = attributesGroups.findIndex(x => x.Id == attributeGroup.Id);\n            if (cindex > -1) {\n                NotificationManager.success(\"Atribute group deleted.\", 'Deleted', 3000, null, null, '');\n                attributesGroups.splice(cindex, 1);\n                this.setState({ attributesGroups: attributesGroups });\n            }\n        });\n    }\n\n    attributeToCreateAttrbute = (attribute: IAttribute): ICreateAttribute => {\n        let data: ICreateAttribute = {\n            AttributeGroupId: attribute.AttributeGroupId,\n            Description: attribute.Description,\n            Id: attribute.Id,\n            Name: attribute.Name,\n            Position: attribute.Position,\n            PriceCorrectionCurrent: attribute.PriceCorrectionCurrent,\n            PriceCorrectionPercent: attribute.PriceCorrectionPercent\n        }\n        return data;\n    }\n\n    attributeGroupToCreateAttributeGroup = (group: IAttributeGroup): ICreateAttributeGroup => {\n        let data: ICreateAttributeGroup = {\n            Id: group.Id,\n            Name: group.Name,\n            Key: group.Key,\n            attributes: group.attributes.map(attr => this.attributeToCreateAttrbute(attr))\n        }\n        return data;\n    }\n\n    createAttribute = (attribute: ICreateAttribute) => {\n        let attributesGroups = [...this.state.attributesGroups];\n        let attrGroup = attributesGroups.find(attrG => attrG.Id == attribute.AttributeGroupId);\n        if (attrGroup) {\n            let requestData = this.attributeGroupToCreateAttributeGroup(attrGroup);\n            requestData.attributes.push(attribute);\n            NotificationManager.info(\"Saving attribute\", 'Saving...', 3000, null, null, '');\n            this.attributesClient.Update(requestData, this.props.dataKey).then(response => {\n                if (response.data.Error) {\n                    NotificationManager.error(response.data.Error, 'Update attribute error', 3000, null, null, '');\n                    return;\n                }\n                NotificationManager.success(\"Atribute saved.\", 'Saved', 3000, null, null, '');\n                let responseAttrGr = this.responseItemToAttributeGroup(response.data.Data);\n                let attrGroupIndex = attributesGroups.findIndex(x => x.Id == (responseAttrGr as any).Id);\n                if (attrGroupIndex > -1) {\n                    attributesGroups[attrGroupIndex] = responseAttrGr;\n                }\n                this.setState({ attributesGroups: attributesGroups });\n            });\n        }\n    }\n\n    editAttribute = (attribute: ICreateAttribute) => {\n        let attributesGroups = [...this.state.attributesGroups];\n        let attrGroup = attributesGroups.find(attrG => attrG.Id == attribute.AttributeGroupId);\n        if (attrGroup) {\n            let attr = attrGroup.attributes.find(x => x.Id == attribute.Id);\n            if (attr) {\n                let requestGroup = this.attributeGroupToCreateAttributeGroup(attrGroup);\n                let indexOfAttr = requestGroup.attributes.findIndex(attr => attr.Id == attribute.Id);\n                if (indexOfAttr > -1) {\n                    requestGroup.attributes[indexOfAttr] = attribute;\n                }\n                NotificationManager.info(\"Saving attribute\", 'Saving...', 3000, null, null, '');\n                this.attributesClient.Update(requestGroup, this.props.dataKey).then(response => {\n                    if (response.data.Error) {\n                        NotificationManager.error(response.data.Error, 'Update category error', 3000, null, null, '');\n                        return;\n                    }\n                    NotificationManager.success(\"Attribute saved.\", 'Saved', 3000, null, null, '');\n                    attrGroup = this.responseItemToAttributeGroup(response.data.Data);\n                    var indexOfAttrGroup = attributesGroups.findIndex(x => x.Id == (attrGroup as any).Id);\n                    if (indexOfAttrGroup > -1) {\n                        attributesGroups[indexOfAttrGroup] = attrGroup;\n                    }\n                    this.setState({ attributesGroups: attributesGroups });\n                });\n            }\n        }\n    }\n\n    deleteAttribute = (attribute: IAttribute) => {\n        let attributesGroups = [...this.state.attributesGroups];\n        let attrGroup = attributesGroups.find(attrG => attrG.Id == attribute.AttributeGroupId);\n        if (attrGroup) {\n            let attrIndex = attrGroup.attributes.findIndex(x => x.Id == attribute.Id);\n            if (attrIndex > -1) {\n\n                attrGroup.attributes.splice(attrIndex, 1);\n                NotificationManager.info(\"Deleting attribute\", 'Deleting', 3000, null, null, '');\n                this.attributesClient.Update(this.attributeGroupToCreateAttributeGroup(attrGroup), this.props.dataKey).then(response => {\n                    if (response.data.Error) {\n                        NotificationManager.error(response.data.Error, 'Update category error', 3000, null, null, '');\n                        return;\n                    }\n                    NotificationManager.success(\"Attribute deleted\", 'Deleted', 3000, null, null, '');\n                    attrGroup = Object.assign(attrGroup, this.responseItemToAttributeGroup(response.data.Data));\n\n                    this.setState({ attributesGroups: attributesGroups });\n                });\n            }\n        }\n    }\n\n    onSave = (category: IAttributeGroup) => {\n        if (category.Id == 0) {\n            this.create(category);\n        } else {\n            this.edit(category);\n        }\n    }\n\n    onSaveAttribute = (attribute: ICreateAttribute) => {\n        if (attribute.Id == 0) {\n            this.createAttribute(attribute);\n        } else {\n            this.editAttribute(attribute);\n        }\n    }\n\n    onDelete = (type: \"group\" | \"attribute\") => {\n        if (type == \"group\" && this.state.deleteAttributeGroup) {\n            this.delete(this.state.deleteAttributeGroup);\n            this.setState({ deleteAttributeGroup: null });\n        } else if (type == \"attribute\" && this.state.deleteAttribute) {\n            this.deleteAttribute(this.state.deleteAttribute);\n            this.setState({ deleteAttribute: null });\n        }\n    }\n\n    onAddAttribute = (attrGroup: IAttributeGroup) => {\n        this.setState({ editAttribute: { AttributeGroupId: attrGroup.Id, Id: 0, PriceCorrectionPercent: 0, PriceCorrectionCurrent: 0, Description: \"\", Name: \"\", Position: attrGroup.attributes.length + 1 } })\n    }\n\n    // onReorderAttributes = (attributeGroup: IAttributeGroup, source: number, destination: number) => {\n    // if (result.source && result.destination) {\n    //     const items = reorder(this.state.categories, result.source.index, result.destination.index);\n    //     items.forEach((item, index) => { item.Position = index + 1 });\n    //     this.categoryClient.Positions(items.map(item => { return { id: item.Id, position: item.Position } })).then(response => {\n    //         this.setState({ categories: items })\n    //     });\n    // }\n    // }\n\n    onReorderAttributes = (result: DropResult) => {\n        if (result.source && result.destination) {\n            let attributeGroupId = Number(result.source.droppableId);\n            let attributeGroup = this.state.attributesGroups.find(x => x.Id == attributeGroupId);\n            if (attributeGroup) {\n                let attributes = reorder(attributeGroup.attributes, result.source.index, result.destination.index);\n                attributes.forEach((item, index) => { item.Position = index + 1 });\n                attributeGroup.attributes = attributes;\n                this.edit(attributeGroup);\n            }\n        }\n    }\n\n    onReorderAttributesGroups = (result: DropResult) => {\n        if (result.source && result.destination) {\n            let attributes = reorder(this.state.attributesGroups, result.source.index, result.destination.index);\n            attributes.forEach((item, index) => { item.Position = index + 1 });\n            this.attributesClient.Positions(attributes.map(item => { return { id: item.Id, position: item.Position } })).then(response => {\n                this.setState({ attributesGroups: attributes })\n            });\n        }\n    }\n\n    onDragEnd = (result: DropResult) => {\n        if (result.type.indexOf(\"attributeGroup\") > -1) {\n            this.onReorderAttributes(result);\n        } else if (result.type.indexOf(\"group\") > -1) {\n            this.onReorderAttributesGroups(result);\n        }\n\n        console.log(result);\n    }\n\n    get orderedAttributeGroups() {\n        let attributes: IAttributeGroup[] = this.state.attributesGroups;\n        return attributes.sort((a, b) => a.Position - b.Position);\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.loading && <div className=\"loading\" />}\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <div className=\"mb-2\">\n                            <div className=\"text-zero top-right-button-container\">\n                                <Button\n                                    color=\"primary\"\n                                    size=\"lg\"\n                                    className=\"top-right-button\"\n                                    onClick={() => this.setState({ editedAttributeGroup: { Id: 0, Position: 0, Name: \"\", attributes: [], Key: this.props.dataKey } })}\n                                >\n                                    <i className=\"simple-icon-plus\" /> ADD NEW ATTRIBUTE GROUP\n                                </Button>\n                                {'  '}\n                            </div>\n                            <Breadcrumb heading=\"Attributes\" match={this.props.match} />\n                        </div>\n                        <Separator className=\"mb-5\" />\n                    </Colxx>\n                </Row>\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <DragDropContext onDragEnd={this.onDragEnd}>\n                            <Droppable droppableId=\"attributeGroups\" type=\"group\">\n                                {(provided, snapshot) => (\n                                    <div {...provided.droppableProps} ref={provided.innerRef}>\n                                        {this.orderedAttributeGroups.map((p, index) => {\n                                            return (\n                                                <Draggable key={\"attrGroup\" + p.Id} draggableId={p.Id.toString()} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <div ref={provided.innerRef} {...provided.draggableProps}>\n                                                            <AttributeListItem groupDragHandler={provided.dragHandleProps} attributeGroup={p} onDelete={() => this.setState({ deleteAttributeGroup: p, deleteAttribute: null })} onEdit={() => this.setState({ editedAttributeGroup: p, editAttribute: null })} onCheckItem={() => { }} onEditAttribute={(attr) => this.setState({ editedAttributeGroup: null, editAttribute: attr })} onDeleteAttribute={(attr) => this.setState({ deleteAttributeGroup: null, deleteAttribute: attr })} onAddAttribute={(attrGroup) => this.onAddAttribute(attrGroup)} />\n                                                        </div>)}\n                                                </Draggable>)\n                                        })}\n                                        {provided.placeholder}\n                                    </div>)}\n                            </Droppable>\n                        </DragDropContext>\n                    </Colxx>\n                </Row>\n                <AddEditAttributeGroupModal attributeGroup={this.state.editedAttributeGroup} modalOpen={this.state.editedAttributeGroup != null} toggleModal={() => { this.setState({ editedAttributeGroup: null }) }} onSave={(attrGroup) => this.onSave(attrGroup)} />\n                <AddEditAttributeModal attribute={this.state.editAttribute} modalOpen={this.state.editAttribute != null} toggleModal={() => { this.setState({ editAttribute: null }) }} onSave={(attr) => this.onSaveAttribute(attr)} />\n                <DeleteModal isOpen={this.state.deleteAttributeGroup != null} body={`Do you really want delete attribute group ${this.state.deleteAttributeGroup?.Name}?`} header={\"Deleting attribute group\"} onDelete={() => this.onDelete(\"group\")} toggle={() => this.setState({ deleteAttributeGroup: null })} />\n                <DeleteModal isOpen={this.state.deleteAttribute != null} body={`Do you really want delete attribute ${this.state.deleteAttribute?.Name}?`} header={\"Deleting attribute group\"} onDelete={() => this.onDelete(\"attribute\")} toggle={() => this.setState({ deleteAttribute: null })} />\n            </>\n        )\n    }\n}\n\nexport default Attributes;","import React from \"react\";\nimport { ICategory } from \"./category\";\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\nimport { NavLink, Card, UncontrolledDropdown, DropdownToggle, DropdownItem, DropdownMenu, Badge } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\"\nimport { Draggable } from \"react-beautiful-dnd\";\n\n\ninterface ICategoryListItem {\n    category: ICategory;\n    onCheckItem: (e, id) => void;\n    onDelete: (product: ICategory) => void;\n    onEdit: (product: ICategory) => void;\n    onChangeVisible: (category: ICategory, visible: boolean) => void;\n    index: number\n}\n\nexport class CategoryListItem extends React.Component<ICategoryListItem, any> {\n\n    state = {\n        isImage: true\n    }\n\n    onImageError = () => {\n        this.setState({ isImage: false });\n    }\n\n    render() {\n        return (\n            <Draggable key={this.props.category.Id} draggableId={\"category-\" + this.props.category.Id} index={this.props.index}>\n                {(provided, snapshot) => (\n                    <div ref={provided.innerRef} {...provided.draggableProps} key={this.props.category.Id}>\n                        <Colxx xxs=\"12\" className=\"mb-3 productList\" >\n                            <ContextMenuTrigger id=\"product_menu\" collect={(props) => { return { data: props.data, product: this.props.category } }}>\n                                <Card\n                                    {...provided.dragHandleProps}\n                                    onClick={(event) => this.props.onCheckItem(event, this.props.category.Id)}\n                                    className={\"d-flex flex-row productList__card\"}>\n                                    < NavLink to={`?p=${this.props.category.Id}`} className=\"d-flex\">\n                                        <img alt={this.props.category.Name} src={this.state.isImage ? (this.props.category.FilePath || \"\") : \"https://via.placeholder.com/400?text=No%20image\"} className=\"list-thumbnail responsive border-0 card-img-left\" onError={() => this.onImageError()} />\n                                    </NavLink>\n                                    <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\n                                        <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\n                                            <NavLink to={`?p=1`} className=\"w-15\">\n                                                <p className=\"list-item-heading mb-1 truncate\">\n                                                    {this.props.category.Name}\n                                                </p>\n                                            </NavLink>\n                                            <p className=\"mb-1 text-muted text-small w-50\">{this.props.category.Description}</p>\n                                            <p className=\"mb-1  w-10 text-right\">\n                                                <Badge color={this.props.category.IsHidden ? \"danger\" : \"light\"} pill>\n                                                    {this.props.category.IsHidden ? \"Hidden\" : \"Visible\"}\n                                                </Badge>\n                                            </p>\n                                            <div className=\"mb-1 w-25 text-right pr-3\">\n                                                <UncontrolledDropdown className=\"productList__dropdown\">\n                                                    <DropdownToggle caret color=\"secondary\" outline>\n                                                        Actions\n                                                    </DropdownToggle>\n                                                    <DropdownMenu>\n                                                        <DropdownItem onClick={() => this.props.onEdit(this.props.category)}>\n                                                            <i className=\"simple-icon-docs\" /> <span>Edit</span>\n                                                        </DropdownItem>\n                                                        <DropdownItem onClick={() => this.props.onChangeVisible(this.props.category, this.props.category.IsHidden ? true : false)}>\n                                                            <i className=\"simple-icon-docs\" /> <span>Set {this.props.category.IsHidden ? \"Visible\" : \"Hidden\"}</span>\n                                                        </DropdownItem>\n                                                        <DropdownItem onClick={() => this.props.onDelete(this.props.category)}>\n                                                            <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                                                        </DropdownItem>\n                                                    </DropdownMenu>\n                                                </UncontrolledDropdown>\n                                            </div>\n                                            <div  >\n                                                <FontAwesomeIcon icon={faBars} />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </Card>\n                            </ContextMenuTrigger>\n                        </Colxx>\n                    </div>\n                )}\n            </Draggable>\n        );\n    }\n}\n\nexport default CategoryListItem;","import React from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    FormGroup,\n    InputGroup,\n    CustomInput,\n    InputGroupAddon,\n    InputGroupText,\n    FormText,\n} from 'reactstrap';\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport { Formik, Form, Field } from 'formik';\nimport { PhotoClient } from '../../../api/photoClient';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport { ICategory, ISaveCategory } from './category';\nimport { FileToBase64 } from '../../../helpers/FileHelper';\n\nexport interface IAddCategoryModalProps {\n    modalOpen: boolean,\n    toggleModal: () => void,\n    onSave: (category: ISaveCategory) => void,\n    category: ICategory | null,\n    dataKey: string\n}\n\nexport class AddEditCategoryModal extends React.Component<IAddCategoryModalProps, any> {\n    _initialValues = {\n        Name: \"\",\n        Description: \"\",\n        File: null,\n        Id: 0,\n        IsHidden: false\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customSize: false\n        }\n    }\n\n    get initialValues() {\n        if (this.props.category) {\n            return {\n                Name: this.props.category.Name,\n                Description: this.props.category.Description,\n                Id: this.props.category.Id,\n                File: null,\n                IsHidden: this.props.category.IsHidden\n            }\n        }\n        return this._initialValues;\n    }\n\n    onSubmit = async (values, formik) => {\n        let fileName = \"\";\n        let fileBase64 = \"\";\n        if (values.File) {\n            fileName = values.File.name;\n            fileBase64 = await FileToBase64(values.File);\n        }\n        this.props.onSave({ Id: values.Id, Description: values.Description || \"\", Name: values.Name || \"\", FileAsBase64: fileBase64, FileName: fileName, Key: this.props.dataKey, IsHidden: values.IsHidden });\n        this.props.toggleModal();\n        formik.setSubmitting(false);\n    }\n\n    render() {\n        return (<Formik\n            initialValues={this.initialValues}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n        >\n            {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                isSubmitting,\n                submitForm\n            }) => (\n                <Form><Modal\n                    isOpen={this.props.modalOpen}\n                    toggle={this.props.toggleModal}\n                    wrapClassName=\"modal-right\"\n                    backdrop=\"static\"\n                >\n                    <ModalHeader toggle={this.props.toggleModal}>\n                        {this.props.category?.Id == 0 ? \"Add category\" : \"Edit category\"}\n                    </ModalHeader>\n                    <ModalBody>\n\n                        <FormGroup>\n                            <Label for=\"Name\">\n                                Name\n                                </Label>\n                            <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Name\"} maxLength={20} />\n                            <FormText color=\"muted\">\n                                Maximum 20 letters\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"Description\">\n                                Description\n                                </Label>\n                            <Field className=\"form-control\" name=\"Description\" type=\"text\" id=\"Description\" placeholder={\"Description\"} maxLength={100} />\n                            <FormText color=\"muted\">\n                                Maximum 100 letters\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"File\">\n                                Image\n                                </Label>\n                            <InputGroup>\n                                <CustomInput\n                                    type=\"file\"\n                                    id=\"File\"\n                                    name=\"File\"\n\n                                    onChange={(event) => {\n                                        if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                            setFieldValue(\"File\", event.currentTarget.files[0]);\n                                        }\n                                    }} />\n                            </InputGroup>\n                            <FormText color=\"muted\">\n                                Maximum 800x800 pixels\n                                </FormText>\n                        </FormGroup>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" outline onClick={this.props.toggleModal}>\n                            Cancel\n                            </Button>\n                        <Button color=\"primary\" type=\"submit\" onClick={submitForm}>\n                            Save\n                            </Button>\n                    </ModalFooter>\n                </Modal>\n                </Form>)\n            }\n        </Formik>\n        );\n    }\n}\n\nexport default AddEditCategoryModal;\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\"\nimport CategoryListItem from \"./categorylistitem\";\nimport { ICategory, ISaveCategory } from \"./category\";\nimport AddEditCategoryModal from \"./categoryAddEditModal\";\nimport { DeleteModal } from \"../../../components/modals/delete/DeleteModal\";\nimport { DragDropContext, Draggable, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { CategoryClient } from \"../../../api/categoriesClient\";\nimport NotificationManager from \"../../../components/common/react-notifications/NotificationManager\";\nimport shortid from \"shortid\";\n\nexport interface ICategoriesState {\n    categories: ICategory[],\n    editedCategory: ICategory | null,\n    deletingCategory: ICategory | null\n    loading: boolean\n}\n\nconst reorder = (list: ICategory[], startIndex: number, endIndex: number): ICategory[] => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nexport class Categories extends React.Component<any, ICategoriesState> {\n\n    // private static Key: string = \"ProductCategories\"\n\n    categoryClient: CategoryClient\n\n    constructor(props) {\n        super(props);\n\n        this.categoryClient = new CategoryClient();\n\n        this.state = {\n            categories: [],\n            editedCategory: null,\n            deletingCategory: null,\n            loading: true\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.dataKey != prevProps.dataKey) {\n            this.setState({\n                categories: [],\n                editedCategory: null,\n                deletingCategory: null\n            }, () => {\n                this.componentDidMount();\n            });\n\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true });\n        this.categoryClient.List(this.props.dataKey).then(response => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'List categories error', 3000, null, null, '');\n                return;\n            }\n            var categories: ICategory[] = [];\n            response.data.Data.forEach(item => {\n                categories.push(this.responseItemToCategory(item));\n            });\n            this.setState({ categories: categories, loading: false });\n        });\n    }\n\n    responseItemToCategory = (item: any): ICategory => {\n        var category: ICategory = {\n            Name: item.name,\n            Id: item.id,\n            Description: item.description,\n            FilePath: item.imageUrl,\n            Position: item.position,\n            IsHidden: item.isHidden,\n            ProductsPositions: item.ProductsPositions\n        }\n        return category;\n    }\n\n    edit = (category: ISaveCategory) => {\n        let categories = [...this.state.categories];\n        let c = categories.find(x => x.Id == category.Id);\n        c = Object.assign(c, category);\n        NotificationManager.info(\"Saving...\", 'Saving category.', 3000, null, null, '');\n        this.categoryClient.Update(c as any, this.props.dataKey).then(response => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Update category error', 3000, null, null, '');\n                return;\n            }\n            NotificationManager.success(\"Category saved.\", 'Success', 3000, null, null, '');\n            let responseCategory = this.responseItemToCategory(response.data.Data);\n            let index = categories.findIndex(cat => cat.Id == responseCategory.Id)\n            if (index > -1) {\n                categories[index] = responseCategory;\n            }\n            this.setState({ categories: categories });\n        })\n\n    }\n\n    create = (category: ISaveCategory) => {\n        let categories = [...this.state.categories];\n        NotificationManager.info(\"Saving...\", 'Saving category.', 3000, null, null, '');\n        this.categoryClient.Add(category, this.props.dataKey).then(response => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Create category error', 3000, null, null, '');\n                return;\n            }\n            NotificationManager.success(\"Category saved.\", 'Success', 3000, null, null, '');\n            var category = this.responseItemToCategory(response.data.Data);\n            categories.push(category);\n            this.setState({ categories: categories });\n        });\n    }\n\n    delete = (category: ICategory) => {\n        let categories = [...this.state.categories];\n        NotificationManager.info(\"Deleting...\", 'Deleting category.', 3000, null, null, '');\n        this.categoryClient.Delete(category.Id).then(response => {\n            NotificationManager.success(\"Category deleted.\", 'Success', 3000, null, null, '');\n            let cindex = categories.findIndex(x => x.Id == category.Id);\n            if (cindex > -1) {\n                categories.splice(cindex, 1);\n                this.setState({ categories: categories });\n            }\n        });\n    }\n\n    changeVisible = (category: ICategory, isVisible: boolean) => {\n        category.IsHidden = !isVisible;\n\n        var saveCategory: ISaveCategory = {\n            Id: category.Id,\n            Key: this.props.dataKey,\n            Name: category.Name,\n            Description: category.Description,\n            IsHidden: category.IsHidden,\n            FileAsBase64: \"\",\n            FileName: \"\",\n        }\n\n        this.onSave(saveCategory)\n    }\n\n\n\n    onSave = (category: ISaveCategory) => {\n        if (category.Id == 0) {\n            this.create(category);\n        } else {\n            this.edit(category);\n        }\n    }\n\n    onDelete = () => {\n        if (this.state.deletingCategory) {\n            this.delete(this.state.deletingCategory);\n            this.setState({ deletingCategory: null });\n        }\n    }\n\n    onDragEnd = (result: DropResult) => {\n        if (result.source && result.destination) {\n            const items = reorder(this.state.categories, result.source.index, result.destination.index);\n            items.forEach((item, index) => { item.Position = index + 1 });\n            this.categoryClient.Positions(items.map(item => { return { id: item.Id, position: item.Position } })).then(response => {\n                this.setState({ categories: items })\n            });\n        }\n    }\n\n\n\n    get orderedCategories() {\n        let categories = [...this.state.categories];\n        return categories.sort((a, b) => a.Position - b.Position)\n    }\n\n    render() {\n        return (<>\n            {this.state.loading && <div className=\"loading\" />}\n            <Row>\n                <Colxx xxs=\"12\">\n                    <div className=\"mb-2\">\n                        <div className=\"text-zero top-right-button-container\">\n                            <Button\n                                color=\"primary\"\n                                size=\"lg\"\n                                className=\"top-right-button\"\n                                onClick={() => this.setState({ editedCategory: { Id: 0, Name: \"\", Description: \"\", FilePath: \"\", Position: 0, IsHidden: false, ProductsPositions: [] } })}\n                            >\n                                <i className=\"simple-icon-plus\" /> ADD NEW CATEGORY\n                            </Button>\n                            {'  '}\n                        </div>\n                        <Breadcrumb heading=\"Categories\" match={this.props.match} />\n                    </div>\n                    <Separator className=\"mb-5\" />\n                </Colxx>\n            </Row>\n            <Row>\n                <Colxx xxs=\"12\">\n                    <DragDropContext onDragEnd={this.onDragEnd}>\n                        <Droppable droppableId=\"categories\">\n                            {(provided, snapshot) => (\n                                <div {...provided.droppableProps} ref={provided.innerRef}>\n                                    {this.orderedCategories.map((p, index) => {\n                                        return (\n                                            <CategoryListItem onChangeVisible={(c, v) => this.changeVisible(c, v)} key={\"category\" + index} category={p} onDelete={() => this.setState({ deletingCategory: p })} onEdit={() => this.setState({ editedCategory: p })} onCheckItem={() => { }} index={index} />\n                                        )\n                                    })}\n                                    {provided.placeholder}\n                                </div>\n                            )}\n                        </Droppable>\n\n                    </DragDropContext>\n\n                </Colxx>\n            </Row>\n            <AddEditCategoryModal dataKey={this.props.dataKey} category={this.state.editedCategory} modalOpen={this.state.editedCategory != null} toggleModal={() => { this.setState({ editedCategory: null }) }} onSave={(category) => this.onSave(category)} />\n            <DeleteModal isOpen={this.state.deletingCategory != null} body={`Do you really want delete category ${this.state.deletingCategory?.Name}?`} header={\"Deleting category\"} onDelete={() => this.onDelete()} toggle={() => this.setState({ deletingCategory: null })} />\n        </>)\n    }\n}\n\nexport default Categories","import React from 'react';\nimport { Card, CardBody } from 'reactstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nconst IconCard = ({ className = 'mb-4', icon, title, value }) => {\n  return (\n    <div className={`icon-row-item ${className}`}>\n      <Card>\n        <CardBody className=\"text-center\">\n          <i className={icon} />\n          <p className=\"card-text font-weight-semibold mb-0\">\n            <IntlMessages id={title} />\n          </p>\n          <p className=\"lead text-center\">{value} days</p>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default React.memo(IconCard);\n","import React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Card, CardBody } from 'reactstrap';\nimport { Colxx, Separator } from '../../components/common/CustomBootstrap';\nimport Breadcrumb from '../../containers/navs/Breadcrumb';\nimport GlideComponent from '../../components/carousel/GlideComponent';\nimport IconCard from '../../components/cards/IconCard';\nimport { HomeClient } from '../../api/homeClient';\nimport NotificationManager from '../../components/common/react-notifications/NotificationManager';\n\nexport class DefaultDashboard extends React.Component<any, any> {\n\n  homeClient: HomeClient = new HomeClient();\n\n  state = {\n    data: [\n      { title: 'You can use photo order for', icon: 'iconsminds-clock', value: 0 },\n      { title: 'You can use photo hosting for', icon: 'iconsminds-clock', value: 0 },\n    ]\n  }\n\n  constructor(props: any) {\n    super(props);\n\n    this.homeClient.PhotographerDetails().then(response => {\n      if (response.data.Error) {\n        NotificationManager.error(response.data.Error, 'Error', 3000, null, null, '');\n      } else {\n        let data = [...this.state.data];\n        data[0].value = response.data.Data.AddEditPhotographerPopUpViewModel.EventSubscription;\n        data[1].value = response.data.Data.AddEditPhotographerPopUpViewModel.MobileSubscription;;\n        this.setState({\n          data: data\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Row>\n          <Colxx xxs=\"12\">\n            <Card className=\"mb-4\">\n              <CardBody>\n                <Row>\n                  <Colxx sm=\"6\">\n                    <img className=\"img-fluid border-radius\" src=\"/assets/img/dashboard.jpg\" />\n\n                  </Colxx>\n                  <Colxx sm=\"6\">\n                    <p className=\"font-weight-bold\">\n                      Welcome to our portal. We hope that you will find here everything you need to manage a modern photo studio.\n                          </p>\n                    <p>\n                      Thanks to our service, you can speed up and automate ordering wedding photos. By adding a link to the gallery, your website becomes a fully interactive place where your clients can easily and pleasantly select photos from the ceremony from any device.\n                    <br />Our new plug-in for the Light room software streamlines the work of any photographer.\n                      <br />Gain time and customer recognition.\n                      <br />For more information, please visit the \"Photo Hosting\" tab\n                    </p>\n                    <p>\n                      If you copy amateur photos, then you can't do without the Photo Order system.\n                      <br />All your customers can now send photos directly from their phone wherever they are.\n                      <br />If you have a website, add our link and it will become a fully functioning e-shop within a second.\n                      <br />Do not wait, be online 24/7 !!!\n                      <br />For more information visit the \"Photo Order\" tab\n                    </p>\n                    <p>\n                      We constantly strive to ensure that our products meets all your requirements.\n                      <br />This is very important to us, so if you have any comments please share with us and we will certainly take them into account in our next update.\n                      </p>\n                    <p className=\"font-weight-bold\">\n                      Black Point Team\n                          </p>\n                  </Colxx>\n                </Row>\n              </CardBody>\n            </Card>\n          </Colxx>\n        </Row>\n        <Row>\n          <Colxx lg=\"6\" xl=\"6\">\n            <div className='icon-cards-row'>\n              <div key={`icon_card_0`}>\n                <IconCard {...this.state.data[0]} className=\"mb-4\" />\n              </div>\n            </div>\n          </Colxx>\n          <Colxx lg=\"6\" xl=\"6\">\n            <div className='icon-cards-row'>\n              <div key={`icon_card_1`}>\n                <IconCard {...this.state.data[1]} className=\"mb-4\" />\n              </div>\n            </div>\n          </Colxx>\n        </Row>\n      </>);\n  }\n}\n\nexport default injectIntl(DefaultDashboard);\n","import React from \"react\";\nimport { Row, Card, Badge, CustomInput, Button, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, CardBody } from \"reactstrap\";\nimport { NavLink } from 'react-router-dom';\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport classnames from \"classnames\";\n\nimport IntlMessages from \"../../../helpers/IntlMessages\";\n\nimport \"./index.scss\";\nimport { HomeClient } from \"../../../api/homeClient\";\nimport { PhotoClient } from \"../../../api/photoClient\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport IconCard from \"../../../components/cards/IconCard\";\n\n\n\nexport class OverviewView extends React.Component<any, any> {\n\n    homeClient: HomeClient = new HomeClient();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: { title: 'You can use photo order for', icon: 'iconsminds-clock', value: 0 },\n        }\n    }\n\n\n\n    componentDidMount() {\n        this.homeClient.PhotographerDetails().then(response => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Error', 3000, null, null, '');\n            } else {\n                this.setState({\n                    ...this.state.data,\n                    data: {\n                        value: response.data.Data.AddEditPhotographerPopUpViewModel.MobileSubscription\n                    }\n                });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <Breadcrumb heading=\"Overview\" match={this.props.match} />\n                        <Separator className=\"mb-5\" />\n                    </Colxx>\n                </Row>\n                <Row>\n                    <Colxx xxs=\"12\" className=\"mb-3\">\n                        <Card className=\"mb-4\">\n                            <CardBody>\n                                <Row>\n                                    <Colxx sm=\"6\">\n                                        <img className=\"img-fluid border-radius\" src=\"/assets/img/photohosting.jpg\" />\n\n                                    </Colxx>\n                                    <Colxx sm=\"6\" className={\"d-flex\"} style={{ flexDirection: \"column\" }}>\n                                        <h3 style={{ fontWeight: \"bold\" }}>Photo Hosting - For professional photographers</h3>\n                                        <p>\n                                            If you want to automate the process of ordering photos from the ceremony, use our system.\n                                            <br />In just a few steps you can create a new photo folder, add product formats and pass the direct link to the customer.\n                                            <br />Ordering is very simple and accessible from all devices.\n                                            <br />When the finished order is delivered to you, our software will find the photos and complete them for you in a few seconds.\n                                            <br />You can use the Light room software, then you can synchronize the whole process with your collections directly.\n                                            <br />If you want, you can send pre-made reminder e-mails to the clients directly from our platform.\n                                            <br /><br /><strong>Upgrade your website now !!!</strong>\n                                            <br /><br />Interested? Contact us !!!\n                                        </p>\n                                        <Row style={{ flex: \"1 1 auto\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                                            <Colxx xss=\"12\">\n                                                <div className='icon-cards-row text-center'>\n                                                    <div key={`icon_card_0`}>\n                                                        <i className={'iconsminds-clock'} />\n                                                        <p className=\"card-text font-weight-semibold mb-0\">\n                                                            You can use photo hosting for\n                                                        </p>\n                                                        <p className=\"lead text-center\">{this.state.data.value} days</p>\n                                                    </div>\n                                                </div>\n                                            </Colxx>\n                                        </Row>\n                                    </Colxx>\n                                </Row>\n                            </CardBody>\n                        </Card>\n                    </Colxx>\n                </Row>\n            </>\n        );\n    }\n}\n\n\nexport default OverviewView;","import React from \"react\";\nimport { Row, Card, Badge, CustomInput, Button, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, CardBody, CardSubtitle } from \"reactstrap\";\nimport { NavLink } from 'react-router-dom';\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport classnames from \"classnames\";\n\nimport IntlMessages from \"../../../helpers/IntlMessages\";\n\nimport \"./index.scss\";\nimport { HomeClient } from \"../../../api/homeClient\";\nimport { PhotoClient } from \"../../../api/photoClient\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport IconCard from \"../../../components/cards/IconCard\";\nimport SingleLightbox from \"../../../components/pages/SingleLightbox\";\n\n\n\nexport class UpdatesView extends React.Component<any, any> {\n\n    homeClient: HomeClient = new HomeClient();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: { title: 'You can use photo order for', icon: 'iconsminds-clock', value: 0 },\n        }\n    }\n\n\n\n    componentDidMount() {\n        this.homeClient.PhotographerDetails().then(response => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Error', 3000, null, null, '');\n            } else {\n                this.setState({\n                    ...this.state.data,\n                    data: {\n                        value: response.data.Data.AddEditPhotographerPopUpViewModel.EventSubscription\n                    }\n                });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Row>\n                    <Colxx xxs=\"12\">\n                        <Breadcrumb heading=\"Plug-ins\" match={this.props.match} />\n                        <Separator className=\"mb-5\" />\n                    </Colxx>\n                </Row>\n                <Row>\n                    {\n                        [...Array(3)].map((e, i) => {\n                            return (\n                                <Colxx sm=\"4\" className=\"mb-3 pr-4 pl-4\" key={i}>\n                                    <Card className=\"mb-4\">\n                                        <SingleLightbox\n                                            thumb=\"/assets/img/comingsoon.jpg\"\n                                            large=\"/assets/img/comingsoon.jpg\"\n                                            className=\"card-img-top\"\n                                        />\n\n                                        <CardBody>\n                                            <p className=\"font-weight-bold\">\n                                                Be patient...\n                                </p>\n                                            <p className=\"mb-3\">\n                                                Soon we will expand your website with additional functionalities.                                </p>\n                                            {/* <p>\n                                                <p className=\"text-muted text-small mb-2\">\n                                                    Price\n                                                </p>\n                                                <p className=\"mb-3\">$3.99</p>\n                                            </p> \n                                            <p className={\"text-center\"}>\n                                                <Button color=\"primary\">Buy</Button>\n                                            </p>*/}\n                                        </CardBody>\n                                    </Card>\n                                </Colxx>)\n                        })\n                    }\n\n\n                </Row>\n            </>\n        );\n    }\n}\n\n\nexport default UpdatesView;","import React from \"react\";\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\nimport { Card, CardImg, CardBody, Row, CardSubtitle, Badge, CardText, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport { IEventListItemViewModel } from \"../../../models/EventListItemViewModel\";\nimport { NavLink } from \"react-router-dom\"\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from 'react-contextmenu';\nimport classnames from \"classnames\";\nimport IntlMessages from \"../../../helpers/IntlMessages\";\nimport { connect } from 'react-redux';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport \"./event.scss\";\nimport { EventClient, IEvent } from \"../../../api/eventsClient\";\nimport { IAuthUserState } from \"../../../redux/auth/authUserState\";\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport {\n    Redirect,\n} from 'react-router-dom';\nimport { BASE_URL } from \"../../../api/settings\";\n\nexport interface IEventListItemViewProps {\n    event: IEvent,\n    onDelete: (event: IEvent) => void;\n    onEdit: (event: IEvent) => void\n}\n\ntype IProps = IEventListItemViewProps & IAuthUserState\n\nexport class EventListItemView extends React.Component<IProps, any> {\n\n    eventClient: EventClient;\n\n    state = {\n        isImage: true,\n        data: {}\n    }\n\n    constructor(props: IProps) {\n        super(props);\n        this.eventClient = new EventClient();\n    }\n\n\n    onImageError = () => {\n        this.setState({ isImage: false })\n    }\n\n    onCopyDirectLink = (e) => {\n        e.preventDefault();\n\n    }\n\n    onEdit = (e) => {\n        e.preventDefault();\n        console.log('onedit', this.props.event);\n        this.props.onEdit(this.props.event);\n\n    }\n\n    onDelete = (e) => {\n        e.preventDefault();\n        this.props.onDelete(this.props.event);\n    }\n\n    directLink = (): string => {\n        let key = this.props.event.NoPassKey;\n        if (key == null) {\n            key = \"\"\n        }\n        return `${window.location.origin}/portal/direct/${key}`\n    }\n\n    render() {\n\n        return (<Colxx sm=\"6\" lg=\"4\" xl=\"3\" className=\"mb-3 eventListItem\" key={this.props.event.Id}>\n            <ContextMenuTrigger id=\"menu_id\" collect={(props) => { return { data: props.data, event: this.props.event } }}>\n                <NavLink to={`/photo-hosting/event/${this.props.event.Id}`} className=\"w-40 w-sm-100\">\n                    <Card onClick={() => { }}>\n                        <div className=\"position-relative\">\n                            <CardImg top alt={this.props.event.Name} src={this.state.isImage ? this.props.event.FileSrc : \"https://via.placeholder.com/600?text=No%20image\"} onError={(e => this.onImageError())} />\n\n                            {\n                                this.props.event.PassProtected && <Badge color=\"danger\" pill className=\"position-absolute badge-top-left\">PASSWORD</Badge>\n                            }\n                            {\n                                this.props.event.IsHidden && <Badge color=\"primary\" pill className={classnames(\"position-absolute\", { \"badge-top-left\": !this.props.event.PassProtected, \"badge-top-left-2\": this.props.event.PassProtected })}>HIDDEN</Badge>\n                            }\n\n                            <div className=\"eventListItem__menu\">\n                                <UncontrolledDropdown>\n                                    <DropdownToggle size=\"xs\" color=\"primary\" onClickCapture={e => e.preventDefault()}>\n                                        <i className=\"simple-icon-menu\" />\n                                    </DropdownToggle>\n                                    <DropdownMenu>\n                                        <CopyToClipboard text={this.directLink()} onCopy={() => { NotificationManager.success(\"URL copiedd to clipboard\", \"\", 3000, null, null, ''); }}>\n                                            <DropdownItem onClick={(e) => { e.preventDefault() }}>\n                                                <i className=\"simple-icon-link\" /> <span>Copy direct link</span>\n                                            </DropdownItem>\n                                        </CopyToClipboard>\n                                        <DropdownItem onClick={(e) => this.onEdit(e)}>\n                                            <i className=\"simple-icon-docs\" /> <span>Settings</span>\n                                        </DropdownItem>\n                                        <DropdownItem onClick={(e) => this.onDelete(e)}>\n                                            <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                                        </DropdownItem>\n                                    </DropdownMenu>\n                                </UncontrolledDropdown>\n                            </div>\n                        </div>\n                        <CardBody>\n                            <CardSubtitle className=\"mb-4\">\n                                {this.props.event.Name}\n                            </CardSubtitle>\n                        </CardBody>\n\n                    </Card>\n                </NavLink>\n            </ContextMenuTrigger>\n\n        </Colxx >)\n    }\n}\n\nconst mapStateToProps = ({ authUser }) => {\n    return authUser;\n};\n\n\nexport default connect(mapStateToProps)(EventListItemView);\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    CustomInput,\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    FormGroup,\n    InputGroup,\n    InputGroupAddon,\n    FormText,\n} from 'reactstrap';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\nimport { Formik, Form, Field } from 'formik';\nimport { IAddEditEventDialogViewModel, EventClient } from '../../../api/eventsClient';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\nexport interface IAddNewEventProps {\n    modalOpen: boolean,\n    toggleModal: () => void,\n    onCreate: () => void\n}\n\nexport class AddNewEventModal extends React.Component<IAddNewEventProps, any> {\n\n    eventClient: EventClient = new EventClient();\n\n    imageTypes = [\"13x18\", \"Album A\", \"Album B\", \"Canvas\"]\n\n    initialValues: IAddEditEventDialogViewModel | any = {\n        TimeToDelete: 365,\n        AdditionalInfo: \"\",\n        EmailToClient: \"\",\n        FirstFormat: \"\",\n        FourthFormat: \"\",\n        Id: 0,\n        IsHidden: false,\n        LinkForEmail: \"\",\n        Name: \"\",\n        NoPassKey: uuidv4(),\n        Password: \"\",\n        SecondFormat: \"\",\n        ThirdFormat: \"\",\n        File: null,\n        IsPasswordProtected: false,\n        NoPricing: false,\n        FirstFormatPrice: 0,\n        SecondFormatPrice: 0,\n        ThirdFormatPrice: 0,\n        FourthFormatPrice: 0,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            formats: this.imageTypes,\n        }\n    }\n\n    removeFormat = (index: number) => {\n        let formats = [...this.state.formats];\n        formats.splice(index, 1);\n        this.setState({ formats: formats });\n    }\n\n    directLink = (uuid: string): string => {\n        return `https://oistigmes.com/eventshow/${uuid}`\n    }\n\n    componentDidMount() {\n\n    }\n    resetUUid = () => {\n        this.setState({ uuid: uuidv4() })\n    }\n\n    addFormat = () => {\n        let formats = [...this.state.formats];\n        formats.push(\"\");\n        this.setState({ formats: formats });\n    }\n\n    onSubmit = (values, formik) => {\n        NotificationManager.info(\"Saving data...\", \"\", 3000, null, null, '');\n\n        this.eventClient.AddEvent(values).then((response) => {\n            if (response.data.Error) {\n                NotificationManager.error(\"Saving error\", response.data.Error, 3000, null, null, '');\n            } else {\n                this.props.onCreate();\n                this.props.toggleModal();\n            }\n            formik.setSubmitting(false);\n        });\n    }\n\n    render() {\n        return (<Formik\n            initialValues={this.initialValues}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n            validate={() => { }}\n        >\n            {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                isSubmitting,\n                submitForm\n            }) => (\n                <Form><Modal\n                    isOpen={this.props.modalOpen}\n                    toggle={this.props.toggleModal}\n                    wrapClassName=\"modal-right\"\n                    backdrop=\"static\"\n                >\n                    <ModalHeader toggle={this.props.toggleModal}>\n                        Add new Event\n                    </ModalHeader>\n                    <ModalBody>\n                        <FormGroup>\n                            <Label for=\"name\">\n                                Name\n                            </Label>\n                            <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Event name\"} maxLength={30} />\n                            <FormText color=\"muted\">\n                                Maximum 30 letters\n                            </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"info\">\n                                Info\n                            </Label>\n                            <Field className=\"form-control\" name=\"AdditionalInfo\" type=\"textarea\" id=\"AdditionalInfo\" placeholder={\"Description\"}>\n                                {({ field, form, meta }) => {\n                                    return <textarea rows={5} placeholder='Description' className=\"form-control\" value={field.value} onChange={field.onChange} id=\"AdditionalInfo\"></textarea>\n                                }}\n                            </Field>\n                        </FormGroup>\n                        <FormGroup className=\"mb-1\">\n                            <Label>\n                                Photo formats\n                            </Label>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>\n                                No pricing\n                            </Label>\n                            <Switch\n                                loadingIcon={null}\n                                className=\"custom-switch custom-switch-primary custom-switch-small\"\n                                checked={values.NoPricing}\n                                onChange={(nopricing) => setFieldValue(\"NoPricing\", nopricing)}\n                            />\n                        </FormGroup>\n                        <FormGroup className=\"mb-1\">\n                            <div className=\"row\">\n                                <div className=\"col-8\"><Field className=\"form-control\" name=\"FirstFormat\" type=\"text\" id=\"FirstFormat\" placeholder={\"First Format\"} /></div>\n                                <div className=\"col-4\"><Field className=\"form-control\" name=\"FirstFormatPrice\" type=\"number\" id=\"FirstFormatPrice\" placeholder={\"Price\"} /></div>\n                            </div>\n                        </FormGroup>\n                        <FormGroup className=\"mb-1\">\n                            <div className=\"row\">\n                                <div className=\"col-8\"><Field className=\"form-control\" name=\"SecondFormat\" type=\"text\" id=\"SecondFormat\" placeholder={\"Second Format\"} /></div>\n                                <div className=\"col-4\"><Field className=\"form-control\" name=\"SecondFormatPrice\" type=\"number\" id=\"SecondFormatPrice\" placeholder={\"Price\"} /></div>\n                            </div>\n                        </FormGroup>\n                        <FormGroup className=\"mb-1\">\n                            <div className=\"row\">\n                                <div className=\"col-8\"><Field className=\"form-control\" name=\"ThirdFormat\" type=\"text\" id=\"ThirdFormat\" placeholder={\"Third Format\"} /></div>\n                                <div className=\"col-4\"><Field className=\"form-control\" name=\"ThirdFormatPrice\" type=\"number\" id=\"ThirdFormatPrice\" placeholder={\"Price\"} /></div>\n                            </div>\n\n                        </FormGroup>\n                        <FormGroup>\n                            <div className=\"row\">\n                                <div className=\"col-8\"><Field className=\"form-control\" name=\"FourthFormat\" type=\"text\" id=\"FourthFormat\" placeholder={\"Fourth Format\"} /></div>\n                                <div className=\"col-4\"><Field className=\"form-control\" name=\"FourthFormatPrice\" type=\"number\" id=\"FourthFormatPrice\" placeholder={\"Price\"} /></div>\n                            </div>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"eventRemains\">\n                                Event remains for\n                            </Label>\n                            <Field className=\"form-control\" name=\"TimeToDelete\" type=\"number\" id=\"TimeToDelete\" />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>\n                                Is password protected?\n                            </Label>\n                            <Switch\n                                loadingIcon={null}\n                                className=\"custom-switch custom-switch-primary custom-switch-small\"\n                                checked={values.IsPasswordProtected}\n                                onChange={(isPasswordProtected) => setFieldValue(\"IsPasswordProtected\", isPasswordProtected)}\n                            />\n                        </FormGroup>\n                        {\n                            values.IsPasswordProtected && <FormGroup>\n                                <Label for=\"password\">\n                                    Password\n                                </Label>\n                                <Field className=\"form-control\" name=\"Password\" type=\"text\" id=\"Password\" placeholder={\"Password\"} />\n                            </FormGroup>\n                        }\n                        <FormGroup>\n                            <Label for=\"file\">\n                                Event cover\n                            </Label>\n                            <InputGroup>\n                                <CustomInput\n                                    type=\"file\"\n                                    id=\"File\"\n                                    name=\"File\"\n                                    onChange={(event) => {\n                                        if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                            setFieldValue(\"File\", event.currentTarget.files[0]);\n                                        }\n                                    }}\n                                />\n                            </InputGroup>\n                            <FormText color=\"muted\">\n                                Maximum 1920x1280 pixels\n                            </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>\n                                Is event hidden?\n                            </Label>\n                            <Switch\n                                loadingIcon={null}\n                                className=\"custom-switch custom-switch-primary custom-switch-small\"\n                                checked={values.IsHidden}\n                                onChange={(isHidden) => setFieldValue(\"IsHidden\", isHidden)}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"customerEmail\">\n                                Email to Customer\n                            </Label>\n                            <Field className=\"form-control\" name=\"EmailToClient\" type=\"email\" id=\"EmailToClientName\" placeholder={\"ex. email@gmail.com\"} />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"EmailLinkType\">\n                                Call to action\n                            </Label>\n                            <Field className=\"form-control\" name=\"EmailLinkType\" as=\"select\" id=\"EmailLinkType\" >\n                                <option disabled hidden selected>Choose a type of the link for e-mail</option>\n                                <option value={1}>Link to galery</option>\n                                <option value={2}>Direct link to event</option>\n                                <option value={3}>Add your Personal</option>\n                            </Field>\n                        </FormGroup>\n                        {\n                            values.EmailLinkType == 3 && <FormGroup>\n                                <Label for=\"LinkForEmail\">\n                                    Personal link\n                                </Label>\n                                <Field className=\"form-control\" name=\"LinkForEmail\" type=\"text\" id=\"LinkForEmail\" placeholder={\"Personal link\"} />\n                            </FormGroup>\n                        }\n\n                        <FormGroup>\n                            <Label for=\"directLink\">\n                                Direct link\n                            </Label>\n                            <InputGroup className=\"mb-3\">\n                                <Input disabled={true} value={this.directLink(values.NoPassKey)} type=\"text\" name=\"directLink\" id=\"directLink\" />\n                                <InputGroupAddon addonType=\"append\">\n                                    <Button onClick={() => setFieldValue(\"NoPassKey\", uuidv4())} outline color=\"secondary\">\n                                        RESET\n                                    </Button>\n                                </InputGroupAddon>\n                            </InputGroup>\n                        </FormGroup>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" outline onClick={this.props.toggleModal}>\n                            Cancel\n                        </Button>\n                        <Button disabled={isSubmitting} color=\"primary\" type=\"submit\" onClick={() => submitForm()}>\n                            {isSubmitting && <FontAwesomeIcon size=\"lg\" icon={faSpinner} spin={true} style={{ color: \"#fff\" }} />} Submit\n                        </Button>\n                    </ModalFooter>\n                </Modal>\n                </Form>\n            )}</Formik>\n        );\n    }\n}\n\nexport default AddNewEventModal;\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    CustomInput,\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    FormGroup,\n    InputGroup,\n    InputGroupAddon,\n    FormText,\n} from 'reactstrap';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\nimport { Formik, Form, Field } from 'formik';\nimport { IAddEditEventDialogViewModel, EventClient, IEvent } from '../../../api/eventsClient';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\n\nexport interface IEditEventProps {\n    modalOpen: boolean,\n    toggleModal: () => void,\n    onEdited: () => void,\n    event: IEvent\n}\n\nexport class EditEventModal extends React.Component<IEditEventProps, any> {\n\n    eventClient: EventClient = new EventClient();\n\n    imageTypes = [\"13x18\", \"Album A\", \"Album B\", \"Canvas\"]\n\n    _initialValues: IAddEditEventDialogViewModel | any = {\n        TimeToDelete: 365,\n        AdditionalInfo: \"\",\n        EmailToClient: \"\",\n        FirstFormat: \"\",\n        FourthFormat: \"\",\n        Id: 0,\n        IsHidden: false,\n        LinkForEmail: \"\",\n        Name: \"\",\n        NoPassKey: uuidv4(),\n        Password: \"\",\n        SecondFormat: \"\",\n        ThirdFormat: \"\",\n        File: null,\n        IsPasswordProtected: false,\n        NoPricing: false,\n        FirstFormatPrice: 0,\n        SecondFormatPrice: 0,\n        ThirdFormatPrice: 0,\n        FourthFormatPrice: 0,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            formats: this.imageTypes,\n        }\n    }\n\n    get initialValues() {\n        if (this.props.event) {\n            return { ...this.props.event, IsPasswordProtected: (this.props.event as any).Password ? true : false };\n        }\n\n        return this._initialValues;\n    }\n\n    removeFormat = (index: number) => {\n        let formats = [...this.state.formats];\n        formats.splice(index, 1);\n        this.setState({ formats: formats });\n    }\n\n    directLink = (uuid: string): string => {\n        if (uuid == null) {\n            uuid = \"\";\n        }\n        return `${window.location.origin}/portal/direct/${uuid}`\n    }\n\n    resetUUid = () => {\n        this.setState({ uuid: uuidv4() })\n    }\n\n    addFormat = () => {\n        let formats = [...this.state.formats];\n        formats.push(\"\");\n        this.setState({ formats: formats });\n    }\n\n    onSubmit = (values, formik) => {\n        values.Id = this.props.event.Id;\n        if (!values.IsPasswordProtected) {\n            values.Password = undefined;\n        }\n        delete values.FaceBookModel;\n        NotificationManager.info(\"Saving data...\", \"\", 3000, null, null, '');\n        this.eventClient.EditEvent(values).then((response) => {\n            if (response.data.Error) {\n                NotificationManager.error(\"Saving error\", response.data.Error, 3000, null, null, '');\n            } else {\n                this.props.onEdited();\n                this.props.toggleModal();\n            }\n            formik.setSubmitting(false);\n        });\n    }\n\n    render() {\n        return (<Formik\n            initialValues={this.initialValues}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n            validate={() => { }}\n        >\n            {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                isSubmitting,\n                submitForm\n            }) => (\n                <Form><Modal\n                    isOpen={this.props.modalOpen}\n                    toggle={this.props.toggleModal}\n                    wrapClassName=\"modal-right\"\n                    backdrop=\"static\"\n                >\n                    <ModalHeader toggle={this.props.toggleModal}>\n                        Edit Event\n                    </ModalHeader>\n                    <ModalBody>\n                        <FormGroup>\n                            <Label for=\"name\">\n                                Name\n                            </Label>\n                            <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Event name\"} maxLength={30} />\n                            <FormText color=\"muted\">\n                                Maximum 30 letters\n                            </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"info\">\n                                Info\n                            </Label>\n                            <Field className=\"form-control\" name=\"AdditionalInfo\" type=\"textarea\" id=\"AdditionalInfo\" placeholder={\"Description\"}>\n                                {({ field, form, meta }) => {\n                                    return <textarea rows={5} placeholder=\"Description\" className=\"form-control\" value={field.value} onChange={field.onChange} id=\"AdditionalInfo\"></textarea>\n                                }}\n                            </Field>\n                        </FormGroup>\n                        <FormGroup className=\"mb-1\">\n                            <Label>\n                                Photo formats\n                            </Label>\n\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>\n                                No pricing\n                            </Label>\n                            <Switch\n                                loadingIcon={null}\n                                className=\"custom-switch custom-switch-primary custom-switch-small\"\n                                checked={values.NoPricing}\n                                onChange={(nopricing) => setFieldValue(\"NoPricing\", nopricing)}\n                            />\n                        </FormGroup>\n                        <FormGroup className=\"mb-1\">\n                            <div className=\"row\">\n                                <div className=\"col-8\"><Field className=\"form-control\" name=\"FirstFormat\" type=\"text\" id=\"FirstFormat\" placeholder={\"First Format\"} /></div>\n                                <div className=\"col-4\"><Field className=\"form-control\" name=\"FirstFormatPrice\" type=\"number\" id=\"FirstFormatPrice\" placeholder={\"Price\"} /></div>\n                            </div>\n                        </FormGroup>\n                        <FormGroup className=\"mb-1\">\n                            <div className=\"row\">\n                                <div className=\"col-8\"><Field className=\"form-control\" name=\"SecondFormat\" type=\"text\" id=\"SecondFormat\" placeholder={\"Second Format\"} /></div>\n                                <div className=\"col-4\"><Field className=\"form-control\" name=\"SecondFormatPrice\" type=\"number\" id=\"SecondFormatPrice\" placeholder={\"Price\"} /></div>\n                            </div>\n                        </FormGroup>\n                        <FormGroup className=\"mb-1\">\n                            <div className=\"row\">\n                                <div className=\"col-8\"><Field className=\"form-control\" name=\"ThirdFormat\" type=\"text\" id=\"ThirdFormat\" placeholder={\"Third Format\"} /></div>\n                                <div className=\"col-4\"><Field className=\"form-control\" name=\"ThirdFormatPrice\" type=\"number\" id=\"ThirdFormatPrice\" placeholder={\"Price\"} /></div>\n                            </div>\n\n                        </FormGroup>\n                        <FormGroup>\n                            <div className=\"row\">\n                                <div className=\"col-8\"><Field className=\"form-control\" name=\"FourthFormat\" type=\"text\" id=\"FourthFormat\" placeholder={\"Fourth Format\"} /></div>\n                                <div className=\"col-4\"><Field className=\"form-control\" name=\"FourthFormatPrice\" type=\"number\" id=\"FourthFormatPrice\" placeholder={\"Price\"} /></div>\n                            </div>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Label for=\"eventRemains\">\n                                Event remains for\n                            </Label>\n                            <Field className=\"form-control\" name=\"TimeToDelete\" type=\"number\" id=\"TimeToDelete\" />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>\n                                Is password protected?\n                            </Label>\n                            <Switch\n                                loadingIcon={null}\n                                className=\"custom-switch custom-switch-primary custom-switch-small\"\n                                checked={values.IsPasswordProtected}\n                                onChange={(isPasswordProtected) => setFieldValue(\"IsPasswordProtected\", isPasswordProtected)}\n                            />\n                        </FormGroup>\n                        {\n                            values.IsPasswordProtected && <FormGroup>\n                                <Label for=\"password\">\n                                    Password\n                                </Label>\n                                <Field className=\"form-control\" name=\"Password\" type=\"text\" id=\"Password\" placeholder={\"Password\"} />\n                            </FormGroup>\n                        }\n                        <FormGroup>\n                            <Label for=\"file\">\n                                Event cover\n                            </Label>\n                            <InputGroup>\n                                <CustomInput\n                                    type=\"file\"\n                                    id=\"File\"\n                                    name=\"File\"\n                                    onChange={(event) => {\n                                        if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                            setFieldValue(\"File\", event.currentTarget.files[0]);\n                                        }\n                                    }}\n                                />\n                            </InputGroup>\n                            <FormText color=\"muted\">\n                                Maximum 1920x1280 pixels\n                            </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>\n                                Is event hidden?\n                            </Label>\n                            <Switch\n                                loadingIcon={null}\n                                className=\"custom-switch custom-switch-primary custom-switch-small\"\n                                checked={values.IsHidden}\n                                onChange={(isHidden) => setFieldValue(\"IsHidden\", isHidden)}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"customerEmail\">\n                                Email to Customer\n                            </Label>\n                            <Field className=\"form-control\" name=\"EmailToClient\" type=\"email\" id=\"EmailToClientName\" placeholder={\"ex. email@gmail.com\"} />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"EmailLinkType\">\n                                Call to action\n                            </Label>\n                            <Field className=\"form-control\" name=\"EmailLinkType\" as=\"select\" id=\"EmailLinkType\" >\n                                <option disabled hidden selected>Choose a type of the link for e-mail</option>\n                                <option value={1}>Link to galery</option>\n                                <option value={2}>Direct link to event</option>\n                                <option value={3}>Add your Personal</option>\n                            </Field>\n                        </FormGroup>\n                        {\n                            values.EmailLinkType == 3 && <FormGroup>\n                                <Label for=\"LinkForEmail\">\n                                    Personal link\n                                </Label>\n                                <Field className=\"form-control\" name=\"LinkForEmail\" type=\"text\" id=\"LinkForEmail\" placeholder={\"Personal link\"} />\n                            </FormGroup>\n                        }\n\n                        <FormGroup>\n                            <Label for=\"directLink\">\n                                Direct link\n                            </Label>\n                            <InputGroup className=\"mb-3\">\n                                <Input disabled={true} value={this.directLink(values.NoPassKey)} type=\"text\" name=\"directLink\" id=\"directLink\" />\n                                <InputGroupAddon addonType=\"append\">\n                                    <Button onClick={() => setFieldValue(\"NoPassKey\", uuidv4())} outline color=\"secondary\">\n                                        RESET\n                                    </Button>\n                                </InputGroupAddon>\n                            </InputGroup>\n                        </FormGroup>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" outline onClick={this.props.toggleModal}>\n                            Cancel\n                        </Button>\n                        <Button disabled={isSubmitting} color=\"primary\" type=\"submit\" onClick={() => submitForm()}>\n                            {isSubmitting && <FontAwesomeIcon size=\"lg\" icon={faSpinner} spin={true} style={{ color: \"#fff\" }} />} Submit\n                        </Button>\n                    </ModalFooter>\n                </Modal>\n                </Form>\n            )}</Formik>\n        );\n    }\n}\n\nexport default EditEventModal;\n","import React from \"react\";\nimport { Row, Button } from \"reactstrap\";\nimport { IEventListItemViewModel } from \"../../../models/EventListItemViewModel\";\nimport EventListItemView from \"./event\";\nimport Pagination from \"../../../containers/pages/Pagination\";\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport { AddNewEventModal } from \"./addevent\";\nimport { EventClient, IEvent, IEventClientListResponse } from \"../../../api/eventsClient\";\nimport { connect } from 'react-redux';\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport EditEventModal from \"./editevent\";\nimport { ContextMenu, MenuItem } from \"react-contextmenu\";\nimport ParallaxItem from \"../../../components/parallax/parallaxItem\";\nimport { Redirect } from 'react-router-dom'\nimport { BASE_URL } from \"../../../api/settings\";\nimport { AuthService } from \"../../../services/auth.service\";\n\nexport interface Event {\n    id: number,\n    img: string,\n    status: string,\n    statusColor: string,\n    date: string\n}\n\nexport interface IEventDefaultViewState {\n    events: IEvent[],\n    modalOpen: boolean,\n    modalEditOpen: boolean,\n    currentPage: number,\n    totalPage: number\n    editedEvent: any,\n    response: IEventClientListResponse | null,\n    loading: boolean\n}\n\nexport class DefaultView extends React.Component<any, IEventDefaultViewState> {\n    pageSizes = [4, 8, 12, 20];\n\n    eventClient: EventClient;\n\n    authService: AuthService = new AuthService();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: 1,\n            totalPage: 1,\n            events: [],\n            modalOpen: false,\n            modalEditOpen: false,\n            editedEvent: null,\n            response: null,\n            loading: true\n        }\n        this.eventClient = new EventClient();\n    }\n\n    componentDidMount() {\n        this.populateData();\n    }\n\n    populateData = () => {\n        this.setState({ loading: true })\n        this.eventClient.List(this.authService.getId()).then((response) => {\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Error', 3000, null, null, '');\n            } else {\n                if (response.data.Data != null) {\n                    this.setState({\n                        currentPage: response.data.Data.Page,\n                        totalPage: response.data.Data.PageCount,\n                        events: response.data.Data.EventsList || [],\n                        response: response.data.Data\n                    });\n                }\n            }\n            this.setState({ loading: false })\n        });\n    }\n\n    get events() {\n        let ev = [...this.state.events];\n        ev.reverse();\n        return ev;\n    }\n\n    setModalOpen = (modal: \"Add\" | \"Edit\", modalOpen: boolean) => {\n        if (modal == \"Add\") {\n            this.setState({ modalOpen: modalOpen });\n        } else {\n            this.setState({ modalEditOpen: modalOpen });\n        }\n    }\n\n    deleteEvent = (event: IEvent, index) => {\n        NotificationManager.info(\"Deleting event...\", \"\", 3000, null, null, '');\n        this.eventClient.Delete(event.Id).then((response) => {\n            if (response.data) {\n                // let d = [...this.state.events];\n                // d.splice(index, 1);\n                // this.setState({\n                //     events: d\n                // });\n                this.populateData();\n                NotificationManager.success(\"\", 'Event deleted', 3000, null, null, '');\n\n\n            }\n        });\n    }\n\n    editEvent = (event: IEvent) => {\n        this.eventClient.GetAddEventDialog(event.Id).then((response) => {\n            if (response.data.Error) {\n                NotificationManager.error(\"Cannot get data\", 'Error', 3000, null, null, '');\n                return;\n            }\n\n            console.log('response edit', response.data)\n\n            this.setState({ editedEvent: { ...response.data.Data, Id: event.Id } }, () => {\n                this.setState({ modalEditOpen: true });\n            })\n        });\n    }\n\n    onContextMenuClick = (e, data) => {\n        if (data.action == \"settings\") {\n            this.editEvent(data.event);\n        } else if (data.action == \"delete\") {\n            var indexOf = this.state.events.indexOf(data.event);\n            this.deleteEvent(data.event, indexOf);\n        }\n    };\n\n    onContextMenu = (e, data) => {\n        return true;\n    };\n\n    get parallaxData() {\n        if (this.state.response == null) {\n            return null;\n        }\n\n        return {\n            CoverPhoto: this.state.response.CoverPhotoUrl,\n            Top: this.state.response.CoverOffset ? this.state.response.CoverOffset : 0,\n            ObjectId: Number(this.state.response.PhotographerId),\n            Mode: \"photographer\",\n            CanEdit: true\n        }\n    }\n\n    render() {\n        if (!this.props.user) {\n            return (<Redirect to={`/redirect?url=${`${BASE_URL}/Event/List/${(this.props as any).match.params.photographerId}`}`} />)\n        }\n\n        if (!this.props.match.params.photographerId) {\n\n            return (<Redirect to={`/photo-hosting/${this.authService.getId()}`} />)\n        };\n        return (<>\n            {this.state.loading && <div className=\"loading\" />}\n            {!this.state.loading &&\n                <>\n                    <Row>\n                        <Colxx xxs=\"12\">\n                            <div className=\"mb-2\">\n                                <div className=\"text-zero top-right-button-container\">\n                                    <Button\n                                        color=\"primary\"\n                                        size=\"lg\"\n                                        className=\"top-right-button\"\n                                        onClick={() => this.setModalOpen(\"Add\", true)}\n                                    >\n                                        <i className=\"simple-icon-plus\" /> ADD NEW EVENT\n                                    </Button>\n                                    {'  '}\n\n                                </div>\n                                <Breadcrumb heading=\"Events\" match={this.props.match} />\n                            </div>\n                            <Separator className=\"mb-5\" />\n                        </Colxx>\n                    </Row>\n                    <Row className=\"mb-3\">\n                        <Colxx xxs=\"12\">\n                            {this.parallaxData != null && <ParallaxItem canEdit={this.parallaxData.CanEdit} coverPhoto={this.parallaxData.CoverPhoto} top={this.parallaxData.Top} mode={this.parallaxData.Mode} objectId={this.parallaxData.ObjectId} />}\n                        </Colxx>\n                    </Row>\n                    <div className=\"disable-text-selection\">\n                        <Row>\n                            {this.events?.map((event, index) => {\n                                return (<EventListItemView key={`${event.Id}-${index}`} event={event} onDelete={(ev) => this.deleteEvent(ev, index)} onEdit={(ev) => { this.editEvent(ev) }} />)\n                            })}\n                            <Pagination\n                                currentPage={this.state.currentPage}\n                                totalPage={this.state.totalPage}\n                                onChangePage={(i) => { }}\n                            />\n                        </Row>\n                    </div>\n                    <ContextMenu id=\"menu_id\" onShow={(e) => this.onContextMenu(e, e.detail.data)}>\n                        <MenuItem onClick={this.onContextMenuClick} data={{ action: 'settings' }}>\n                            <i className=\"simple-icon-docs\" /> <span>Settings</span>\n                        </MenuItem>\n\n                        <MenuItem onClick={this.onContextMenuClick} data={{ action: 'delete' }}>\n                            <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                        </MenuItem>\n                    </ContextMenu>\n                    <AddNewEventModal modalOpen={this.state.modalOpen} toggleModal={() => this.setModalOpen(\"Add\", !this.state.modalOpen)} onCreate={() => this.populateData()} />\n                    <EditEventModal event={this.state.editedEvent} modalOpen={this.state.modalEditOpen} toggleModal={() => this.setModalOpen(\"Edit\", !this.state.modalEditOpen)} onEdited={() => this.populateData()} />\n                </>}\n        </>)\n    }\n}\n\nconst mapStateToProps = ({ authUser }) => {\n    return authUser;\n};\n\nexport default connect(mapStateToProps)(DefaultView);\n","import React from \"react\";\nimport { Colxx } from \"../../../components/common/CustomBootstrap\";\nimport { Card, CardImg, CardBody, Row, CardSubtitle, Badge, CardText, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\"\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from 'react-contextmenu';\nimport { connect } from 'react-redux';\n\nimport \"./event.scss\";\nimport { EventClient, IEvent } from \"../../../api/eventsClient\";\nimport { IAuthUserState } from \"../../../redux/auth/authUserState\";\n\nexport interface ISubfolderListItemViewProps {\n    data: any,\n    onDelete: () => void,\n    onEdit: () => void,\n    eventId: number\n}\n\ntype IProps = ISubfolderListItemViewProps & IAuthUserState\n\nexport class SubfolderListItemView extends React.Component<IProps, any> {\n\n    eventClient: EventClient;\n\n    state = {\n        isImage: true,\n        data: {}\n    }\n\n    constructor(props: IProps) {\n        super(props);\n        this.eventClient = new EventClient();\n    }\n\n    onImageError = () => {\n        this.setState({ isImage: false })\n    }\n\n    onEdit = (e) => {\n        e.preventDefault();\n        this.props.onEdit();\n    }\n\n    onDelete = (e) => {\n        e.preventDefault();\n        this.props.onDelete();\n    }\n\n    render() {\n        return (<Colxx sm=\"6\" lg=\"4\" xl=\"3\" className=\"mb-3 eventListItem\" key={this.props.data.FolderId}>\n            <ContextMenuTrigger id=\"menu_id\" collect={(props) => { return { data: props.data, folderId: this.props.data.FolderId } }}>\n                <NavLink to={`/photo-hosting/event/${this.props.eventId}/${this.props.data.FolderId}`} className=\"w-40 w-sm-100\">\n                    <Card onClick={() => { }}>\n                        <div className=\"position-relative\">\n                            <CardImg top alt={this.props.data.Name} src={this.state.isImage ? this.props.data.ThumbSrc : \"https://via.placeholder.com/600?text=No%20image\"} onError={(e => this.onImageError())} />\n\n                            {\n                                this.props.data.Password && <Badge color=\"danger\" pill className=\"position-absolute badge-top-left\">PASSWORD</Badge>\n                            }\n\n                            <div className=\"eventListItem__menu\">\n                                <UncontrolledDropdown>\n                                    <DropdownToggle size=\"xs\" color=\"primary\" onClickCapture={e => e.preventDefault()}>\n                                        <i className=\"simple-icon-menu\" />\n                                    </DropdownToggle>\n                                    <DropdownMenu>\n                                        <DropdownItem onClick={(e) => this.onEdit(e)}>\n                                            <i className=\"simple-icon-docs\" /> <span>Settings</span>\n                                        </DropdownItem>\n                                        <DropdownItem onClick={(e) => this.onDelete(e)}>\n                                            <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                                        </DropdownItem>\n                                    </DropdownMenu>\n                                </UncontrolledDropdown>\n                            </div>\n                        </div>\n                        <CardBody>\n                            <CardSubtitle className=\"mb-4\">\n                                {this.props.data.Name}\n                            </CardSubtitle>\n                        </CardBody>\n\n                    </Card>\n                </NavLink>\n            </ContextMenuTrigger>\n\n        </Colxx >)\n    }\n}\n\nconst mapStateToProps = ({ authUser }) => {\n    return authUser;\n};\n\n\nexport default connect(mapStateToProps)(SubfolderListItemView);\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    CustomInput,\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    FormGroup,\n    InputGroup,\n    InputGroupAddon,\n    FormText,\n} from 'reactstrap';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\nimport { Formik, Form, Field } from 'formik';\nimport { IAddEditFolderDialogViewModel, EventClient } from '../../../../api/eventsClient';\nimport { NotificationManager } from '../../../../components/common/react-notifications';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nexport interface IAddNewSubfolderProps {\n    modalOpen: boolean,\n    toggleModal: () => void,\n    onCreate: () => void,\n    eventId: number\n}\n\nexport class AddNewSubfolder extends React.Component<IAddNewSubfolderProps, any> {\n\n    eventClient: EventClient = new EventClient();\n\n    initialValues: IAddEditFolderDialogViewModel | any = {\n        Id: 0,\n        EventId: 0,\n        Name: \"\",\n        Password: \"\",\n        FolderCoverPhoto: null,\n        IsPasswordProtected: false\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.initialValues.EventId = this.props.eventId;\n\n        this.state = {\n\n        }\n    }\n\n    onSubmit = (values, formik) => {\n        this.eventClient.SaveFolder(values).then((response) => {\n            if (response.data.Error) {\n                NotificationManager.error(\"Saving error\", response.data.Error, 3000, null, null, '');\n            } else {\n                NotificationManager.success(\"Data saved\", \"Data saved sucessfully.\", 3000, null, null, '');\n                this.props.onCreate();\n                this.props.toggleModal();\n            }\n            formik.setSubmitting(false);\n        });\n    }\n\n    render() {\n        return (<Formik\n            initialValues={this.initialValues}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n            validate={() => { }}\n        >\n            {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                isSubmitting,\n                submitForm\n            }) => (\n                <Form><Modal\n                    isOpen={this.props.modalOpen}\n                    toggle={this.props.toggleModal}\n                    wrapClassName=\"modal-right\"\n                    backdrop=\"static\"\n                >\n                    <ModalHeader toggle={this.props.toggleModal}>\n                        Add new subfolder\n                    </ModalHeader>\n                    <ModalBody>\n                        <FormGroup>\n                            <Label for=\"name\">\n                                Name\n                            </Label>\n                            <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Subfolder name\"} maxLength={30} />\n                            <FormText color=\"muted\">\n                                Maximum 30 letters\n                            </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"file\">\n                                Cover\n                            </Label>\n                            <InputGroup>\n                                <CustomInput\n                                    type=\"file\"\n                                    id=\"FolderCoverPhoto\"\n                                    name=\"FolderCoverPhoto\"\n                                    onChange={(event) => {\n                                        if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                            setFieldValue(\"FolderCoverPhoto\", event.currentTarget.files[0]);\n                                        }\n                                    }}\n                                />\n                            </InputGroup>\n                            <FormText color=\"muted\">\n                                Maximum 1920x1280 pixels\n                            </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>\n                                Is password protected?\n                            </Label>\n                            <Switch\n                                loadingIcon={null}\n                                className=\"custom-switch custom-switch-primary custom-switch-small\"\n                                checked={values.IsPasswordProtected}\n                                onChange={(isPasswordProtected) => { setFieldValue(\"IsPasswordProtected\", isPasswordProtected); if (!isPasswordProtected) { setFieldValue(\"Password\", \"\") } }}\n                            />\n                        </FormGroup>\n                        {\n                            values.IsPasswordProtected && <FormGroup>\n                                <Label for=\"password\">\n                                    Password\n                                </Label>\n                                <Field className=\"form-control\" name=\"Password\" type=\"text\" id=\"Password\" placeholder={\"Password\"} />\n                            </FormGroup>\n                        }\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" outline onClick={this.props.toggleModal}>\n                            Cancel\n                        </Button>\n                        <Button disabled={isSubmitting} color=\"primary\" type=\"submit\" onClick={() => submitForm()}>\n                            {isSubmitting && <FontAwesomeIcon size=\"lg\" icon={faSpinner} spin={true} style={{ color: \"#fff\" }} />} Submit\n                        </Button>\n                    </ModalFooter>\n                </Modal>\n                </Form>\n            )}</Formik>\n        );\n    }\n}\n\nexport default AddNewSubfolder;\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    CustomInput,\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Label,\n    FormGroup,\n    InputGroup,\n    InputGroupAddon,\n    FormText,\n} from 'reactstrap';\nimport Switch from 'rc-switch';\nimport 'rc-switch/assets/index.css';\nimport { Formik, Form, Field } from 'formik';\nimport { IAddEditFolderDialogViewModel, EventClient } from '../../../../api/eventsClient';\nimport { NotificationManager } from '../../../../components/common/react-notifications';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport interface IEditSubfolderProps {\n    modalOpen: boolean,\n    toggleModal: () => void,\n    onEdit: () => void,\n    eventId: number,\n    subfolder: any\n}\n\nexport class EditSubfolder extends React.Component<IEditSubfolderProps, any> {\n\n    eventClient: EventClient = new EventClient();\n\n    _initialValues: IAddEditFolderDialogViewModel | any = {\n        Id: 0,\n        EventId: 0,\n        Name: \"\",\n        Password: \"\",\n        FolderCoverPhoto: null,\n        IsPasswordProtected: false\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    get initialValues() {\n        if (this.props.subfolder) {\n            console.log(this.props.subfolder);\n            return {\n                Id: this.props.subfolder.FolderId,\n                EventId: this.props.eventId,\n                Name: this.props.subfolder.Name,\n                Password: this.props.subfolder.Password,\n                FolderCoverPhoto: null,\n                IsPasswordProtected: this.props.subfolder.Password ? true : false\n            }\n        } else {\n            return this._initialValues;\n        }\n    }\n\n    onSubmit = (values, formik) => {\n        this.eventClient.SaveFolder(values).then((response) => {\n            if (response.data.Error) {\n                NotificationManager.error(\"Saving error\", response.data.Error, 3000, null, null, '');\n            } else {\n                NotificationManager.success(\"Data saved\", \"Data saved sucessfully.\", 3000, null, null, '');\n                this.props.onEdit();\n                this.props.toggleModal();\n            }\n            formik.setSubmitting(false);\n        });\n    }\n\n    render() {\n        return (<Formik\n            initialValues={this.initialValues}\n            onSubmit={this.onSubmit}\n            enableReinitialize={true}\n            validate={() => { }}\n        >\n            {({\n                handleSubmit,\n                setFieldValue,\n                setFieldTouched,\n                handleChange,\n                handleBlur,\n                values,\n                errors,\n                touched,\n                isSubmitting,\n                submitForm\n            }) => (\n                <Form><Modal\n                    isOpen={this.props.modalOpen}\n                    toggle={this.props.toggleModal}\n                    wrapClassName=\"modal-right\"\n                    backdrop=\"static\"\n                >\n                    <ModalHeader toggle={this.props.toggleModal}>\n                        Edit subfolder\n                    </ModalHeader>\n                    <ModalBody>\n                        <FormGroup>\n                            <Label for=\"name\">\n                                Name\n                            </Label>\n                            <Field className=\"form-control\" name=\"Name\" type=\"text\" id=\"Name\" placeholder={\"Subfolder name\"} maxLength={30} />\n                            <FormText color=\"muted\">\n                                Maximum 30 letters\n                            </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"file\">\n                                Cover\n                            </Label>\n                            <InputGroup>\n                                <CustomInput\n                                    type=\"file\"\n                                    id=\"FolderCoverPhoto\"\n                                    name=\"FolderCoverPhoto\"\n                                    onChange={(event) => {\n                                        if (event != null && event.currentTarget != null && event.currentTarget.files) {\n                                            setFieldValue(\"FolderCoverPhoto\", event.currentTarget.files[0]);\n                                        }\n                                    }}\n                                />\n                            </InputGroup>\n                            <FormText color=\"muted\">\n                                Maximum 1920x1280 pixels\n                            </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>\n                                Is password protected?\n                            </Label>\n                            <Switch\n                                loadingIcon={null}\n                                className=\"custom-switch custom-switch-primary custom-switch-small\"\n                                checked={values.IsPasswordProtected}\n                                onChange={(isPasswordProtected) => { setFieldValue(\"IsPasswordProtected\", isPasswordProtected); if (!isPasswordProtected) { setFieldValue(\"Password\", \"\") } }}\n                            />\n                        </FormGroup>\n                        {\n                            values.IsPasswordProtected && <FormGroup>\n                                <Label for=\"password\">\n                                    Password\n                                </Label>\n                                <Field className=\"form-control\" name=\"Password\" type=\"text\" id=\"Password\" placeholder={\"Password\"} />\n                            </FormGroup>\n                        }\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" outline onClick={this.props.toggleModal}>\n                            Cancel\n                        </Button>\n                        <Button disabled={isSubmitting} color=\"primary\" type=\"submit\" onClick={() => submitForm()}>\n                            {isSubmitting && <FontAwesomeIcon size=\"lg\" icon={faSpinner} spin={true} style={{ color: \"#fff\" }} />}  Submit\n                        </Button>\n                    </ModalFooter>\n                </Modal>\n                </Form>\n            )}</Formik>\n        );\n    }\n}\n\nexport default EditSubfolder;\n","import React from \"react\";\nimport { Row, Button, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, ButtonDropdown } from \"reactstrap\";\nimport { IEventListItemViewModel } from \"../../../models/EventListItemViewModel\";\nimport EventListItemView from \"./event\";\nimport Pagination from \"../../../containers/pages/Pagination\";\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport { AddNewEventModal } from \"./addevent\";\nimport { EventClient, IEvent } from \"../../../api/eventsClient\";\nimport { connect } from 'react-redux';\nimport { NotificationManager } from \"../../../components/common/react-notifications\";\nimport SubfolderListItemView from \"./subfolderitem\";\nimport AddNewSubfolder from \"./subfolders/addSubfolder\";\nimport { ContextMenu, MenuItem } from \"react-contextmenu\";\nimport EditSubfolder from \"./subfolders/editSubfolder\";\nimport IntlMessages from \"../../../helpers/IntlMessages\";\nimport { ParallaxItem } from \"../../../components/parallax/parallaxItem\";\nimport { BASE_URL } from \"../../../api/settings\";\nimport { Redirect } from 'react-router-dom'\nimport {\n    Link,\n} from \"react-router-dom\";\nimport { AuthService } from \"../../../services/auth.service\";\n\n\nexport interface Event {\n    id: number,\n    img: string,\n    status: string,\n    statusColor: string,\n    date: string\n}\n\nexport interface IEventDefaultViewState {\n    eventData: any,\n    modalOpen: boolean,\n    modalEditOpen: boolean,\n    currentPage: number,\n    totalPage: number,\n    editedSubfolder: any,\n    droprownMenuShow: boolean,\n    response: any,\n    loading: boolean,\n    nextEvent: number,\n    previouseEvent: number\n}\n\nexport class SubfoldersView extends React.Component<any, IEventDefaultViewState> {\n\n    eventClient: EventClient;\n    authService: AuthService = new AuthService();\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentPage: 1,\n            totalPage: 1,\n            eventData: null,\n            modalOpen: false,\n            modalEditOpen: false,\n            editedSubfolder: null,\n            droprownMenuShow: false,\n            response: null,\n            loading: true,\n            nextEvent: 0,\n            previouseEvent: 0\n        }\n        this.eventClient = new EventClient();\n        this.populateData();\n    }\n\n    populateData = () => {\n        this.setState({ loading: true, nextEvent: 0, previouseEvent: 0 });\n\n        this.eventClient.List(this.authService.getId()).then(response => {\n            if (response.data.Data.EventsList.length == 1) {\n                this.setState({\n                    ...this.state,\n                    nextEvent: this.props.match.params.eventId,\n                    previouseEvent: this.props.match.params.eventId,\n                })\n            }\n            var currentIndex = response.data.Data.EventsList.findIndex(x => x.Id == this.props.match.params.eventId);\n            var nextIntex = (currentIndex + 1) % response.data.Data.EventsList.length;\n            var previouseIndex = currentIndex == 0 ? (response.data.Data.EventsList.length - 1) : (currentIndex - 1);\n            this.setState({\n                ...this.state,\n                nextEvent: response.data.Data.EventsList[nextIntex].Id,\n                previouseEvent: response.data.Data.EventsList[previouseIndex].Id\n            });\n        });\n\n        this.eventClient.EventFoldersList(this.props.match.params.eventId).then(response => {\n            this.setState({ eventData: response.data.Data });\n            if (response.data.Error) {\n                NotificationManager.error(response.data.Error, 'Error', 3000, null, null, '');\n            } else {\n                if (response.data.Data != null) {\n                    this.setState({\n                        currentPage: response.data.Data.Page,\n                        totalPage: response.data.Data.PageCount,\n                        eventData: response.data.Data,\n                        response: response.data.Data\n                    });\n                }\n            }\n            this.setState({ loading: false })\n        });\n    }\n\n    setModalOpen = (modalOpen: boolean, type: \"Add\" | \"Edit\") => {\n        if (type == \"Add\") {\n            this.setState({ modalOpen: modalOpen });\n        } else {\n            this.setState({ modalEditOpen: modalOpen });\n        }\n    }\n\n    editSubfolder = (id: number) => {\n        let subfolder = this.state.eventData.eventFolderList.Folders.find(x => x.FolderId == id);\n        if (subfolder) {\n            this.setState({ editedSubfolder: subfolder, modalEditOpen: true })\n        }\n    }\n\n    deleteSubfolder = (id: number) => {\n\n        let state = { ...this.props.state }\n\n        let subfolder = this.state.eventData.eventFolderList.Folders.find(x => x.FolderId == id);\n        if (subfolder) {\n            let index = this.state.eventData.eventFolderList.Folders.indexOf(subfolder);\n            if (index > -1) {\n                this.eventClient.DeleteFolder(this.props.match.params.eventId, id).then((response) => {\n                    if (response.data.Data) {\n                        let d = [...this.state.eventData?.eventFolderList.Folders];\n                        d.splice(index, 1);\n                        this.setState({\n                            ...this.state,\n                            eventData: {\n                                ...this.state.eventData,\n                                eventFolderList: {\n                                    ...this.state.eventData.eventFolderList,\n                                    Folders: d\n                                }\n                            }\n                        });\n                        NotificationManager.success(\"\", 'Subfolder deleted', 3000, null, null, '');\n                    }\n                });\n            }\n        }\n    }\n\n    sendToApplication = () => {\n        NotificationManager.info(\"\", 'Sending data to application...', 3000, null, null, '');\n        this.eventClient.GenerateEventXML(this.props.match.params.eventId).then((response) => {\n            if (response.data.Data) {\n                NotificationManager.success(\"\", 'Data sended sucessfully', 3000, null, null, '');\n            } else {\n                NotificationManager.error(\"\", response.data.Error, 3000, null, null, '');\n            }\n        })\n    }\n\n    get parallaxData() {\n        if (this.state.response == null) {\n            return null;\n        }\n\n        return {\n            CoverPhoto: this.state.response.eventFolderList.CoverPhoto,\n            Top: this.state.response.eventFolderList.CoverOffset ? this.state.response.eventFolderList.CoverOffset : 0,\n            ObjectId: Number(this.state.response.eventFolderList.EventId),\n            Mode: \"event\",\n            CanEdit: true\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.match.params.eventId != prevProps.match.params.eventId) {\n            this.populateData();\n        }\n    }\n\n\n    render() {\n        if (!this.props.user) {\n            return (<Redirect to={`/redirect?url=${`${BASE_URL}/Event/EventFoldersList?eventId=${(this.props as any).match.params.eventId}`}`} />)\n        }\n\n        return (<>\n            {this.state.loading && <div className=\"loading\" />}\n            {!this.state.loading && <>\n                <Row>\n                    <Colxx xxs=\"6\">\n                        <div className=\"d-flex\">\n                            <h1>{this.state.eventData ? this.state.eventData.eventFolderList.EventName : \"Event\"}</h1>\n                        </div>\n                    </Colxx>\n\n                    <Colxx xxs=\"6\">\n                        <div className=\"text-zero top-right-button-container\">\n                            <ButtonDropdown\n                                isOpen={this.state.droprownMenuShow}\n                                toggle={() => { this.setState({ droprownMenuShow: !this.state.droprownMenuShow }) }}\n                                size=\"lg\"\n                            >\n                                <Button\n                                    style={{ fontSize: \"0.8rem\" }}\n                                    color=\"primary\"\n                                    size=\"lg\"\n                                    className=\"top-right-button\"\n                                    onClick={() => this.setModalOpen(true, \"Add\")}\n                                >\n                                    <i className=\"simple-icon-plus\" /> ADD NEW SUBFOLDER\n                                </Button>\n                                <DropdownToggle\n                                    caret\n                                    color=\"primary\"\n                                    className=\"dropdown-toggle-split btn-lg\"\n                                />\n                                <DropdownMenu right>\n                                    <DropdownItem onClick={() => this.sendToApplication()}>\n                                        <i className=\"simple-icon-cloud-download\" /> Send to application\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </ButtonDropdown>\n                        </div>\n                    </Colxx>\n                    <Colxx xxs=\"12\">\n                        <Separator className=\"mb-5\" />\n                    </Colxx>\n                </Row>\n                <Row className=\"mb-3\">\n                    <Colxx xxs=\"12\">\n                        {this.parallaxData != null && <ParallaxItem canEdit={this.parallaxData.CanEdit} coverPhoto={this.parallaxData.CoverPhoto} top={this.parallaxData.Top} mode={this.parallaxData.Mode} objectId={this.parallaxData.ObjectId} />}\n                    </Colxx>\n                </Row>\n                <div className=\"disable-text-selection\">\n                    <Row>\n                        {this.state.eventData?.eventFolderList.Folders.map((subfolder, index) => {\n                            return (<SubfolderListItemView key={subfolder.FolderId} eventId={this.props.match.params.eventId} data={subfolder} onEdit={() => this.editSubfolder(subfolder.FolderId)} onDelete={() => this.deleteSubfolder(subfolder.FolderId)} />)\n                        })}\n                        <Pagination\n                            currentPage={this.state.currentPage}\n                            totalPage={this.state.totalPage}\n                            onChangePage={(i) => { }}\n                        />\n                    </Row>\n                </div>\n                <AddNewSubfolder eventId={this.props.match.params.eventId} modalOpen={this.state.modalOpen} toggleModal={() => this.setModalOpen(!this.state.modalOpen, \"Add\")} onCreate={() => { this.populateData() }} />\n                <EditSubfolder subfolder={this.state.editedSubfolder} eventId={this.props.match.params.eventId} modalOpen={this.state.modalEditOpen} toggleModal={() => this.setModalOpen(!this.state.modalEditOpen, \"Edit\")} onEdit={() => { this.populateData() }} />\n                <ContextMenu id={\"menu_id\"}>\n                    <MenuItem onClick={(e, data: any) => this.editSubfolder(data.folderId)} data={{ action: 'settings' }}>\n                        <i className=\"simple-icon-docs\" /> <span>Settings</span>\n                    </MenuItem>\n\n                    <MenuItem onClick={(e, data: any) => this.deleteSubfolder(data.folderId)} data={{ action: 'delete' }}>\n                        <i className=\"simple-icon-trash\" /> <span>Delete</span>\n                    </MenuItem>\n                </ContextMenu>\n            </>}\n        </>)\n    }\n}\n\nconst mapStateToProps = ({ authUser }) => {\n    return authUser;\n};\n\nexport default connect(mapStateToProps)(SubfoldersView);\n"],"sourceRoot":""}