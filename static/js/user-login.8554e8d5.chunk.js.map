{"version":3,"sources":["components/common/CustomBootstrap.js","helpers/IntlMessages.js","views/user/login.tsx"],"names":["Colxx","props","widths","Separator","className","injectIntl","withRef","validatePassword","value","error","length","validateEmail","test","Login","initialValues","email","password","onUserLogin","values","loading","loginUserAction","login","history","prevProps","this","NotificationManager","warning","xxs","md","to","id","onSubmit","errors","touched","name","validate","type","color","size","React","Component","connect","authUser"],"mappings":"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","file":"static/js/user-login.8554e8d5.chunk.js","sourcesContent":["import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React, { useState, useEffect } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport axios, { AxiosResponse } from \"axios\";\nimport { Formik, Form, Field } from 'formik';\nimport { NotificationManager } from '../../components/common/react-notifications';\nimport { ApiResponse } from \"../../models\"\n\nimport { login } from '../../redux/auth/thunk';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nconst validatePassword = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your password';\n  } else if (value.length < 4) {\n    error = 'Value must be longer than 3 characters';\n  }\n  return error;\n};\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nexport class Login extends React.Component<any, any> {\n\n  initialValues = { email: \"\", password: \"\" };\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.error && this.props.error != prevProps.error) {\n      NotificationManager.warning(this.props.error, 'Login Error', 3000, null, null, '');\n    }\n  }\n\n  onUserLogin = (values) => {\n    if (!this.props.loading) {\n      if (values.email !== '' && values.password !== '') {\n        this.props.loginUserAction({ login: values.email, password: values.password }, this.props.history);\n      }\n    }\n  };\n\n\n\n  render() {\n    return (<Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please use your credentials to login.\n              <br />\n              If you are not a member, please{' '}\n              <NavLink to=\"/user/register\" className=\"white\">\n                register\n              </NavLink>\n              .\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              <span className=\"logo-single\" />\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.login-title\" />\n            </CardTitle>\n\n            <Formik initialValues={this.initialValues} onSubmit={this.onUserLogin}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.email\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"email\"\n                      validate={validateEmail}\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.email}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      type=\"password\"\n                      name=\"password\"\n                      validate={validatePassword}\n                    />\n                    {errors.password && touched.password && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.password}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <NavLink to=\"/user/forgot-password\">\n                      <IntlMessages id=\"user.forgot-password-question\" />\n                    </NavLink>\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${this.props.loading ? 'show-spinner' : ''\n                        }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.login-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>);\n  }\n}\n\nconst mapStateToProps = ({ authUser }) => {\n  const { loading, error } = authUser;\n  return { loading, error };\n};\n\n\nexport default connect(mapStateToProps, {\n  loginUserAction: login,\n})(Login);\n"],"sourceRoot":""}