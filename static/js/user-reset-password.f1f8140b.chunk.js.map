{"version":3,"sources":["components/common/CustomBootstrap.js","helpers/IntlMessages.js","views/user/reset-password.js"],"names":["Colxx","props","widths","Separator","className","injectIntl","withRef","validateNewPassword","values","newPassword","newPasswordAgain","errors","connect","authUser","resetPasswordCode","loading","error","resetPasswordAction","resetPassword","location","history","useState","useEffect","NotificationManager","warning","success","initialValues","xxs","md","to","id","validate","onSubmit","oobCode","URLSearchParams","search","get","touched","name","type","color","size"],"mappings":"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","file":"static/js/user-reset-password.f1f8140b.chunk.js","sourcesContent":["import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React, { useState, useEffect } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { resetPassword } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nconst validateNewPassword = (values) => {\n  const { newPassword, newPasswordAgain } = values;\n  const errors = {};\n  if (newPasswordAgain && newPassword !== newPasswordAgain) {\n    errors.newPasswordAgain = 'Please check your new password';\n  }\n  return errors;\n};\n\nconst ResetPassword = ({\n  location,\n  history,\n  loading,\n  error,\n  resetPasswordAction,\n}) => {\n  const [newPassword] = useState('');\n  const [newPasswordAgain] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(\n        error,\n        'Forgot Password Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else if (!loading && newPassword === 'success')\n      NotificationManager.success(\n        'Please login with your new password.',\n        'Reset Password Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n  }, [error, loading, newPassword]);\n\n  const onResetPassword = (values) => {\n    if (!loading) {\n      const params = new URLSearchParams(location.search);\n      const oobCode = params.get('oobCode');\n      if (oobCode) {\n        if (values.newPassword !== '') {\n          resetPasswordAction({\n            newPassword: values.newPassword,\n            resetPasswordCode: oobCode,\n            history,\n          });\n        }\n      } else {\n        NotificationManager.warning(\n          'Please check your email url.',\n          'Reset Password Error',\n          3000,\n          null,\n          null,\n          ''\n        );\n      }\n    }\n  };\n\n  const initialValues = { newPassword, newPasswordAgain };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please use your e-mail to reset your password. <br />\n              If you are not a member, please{' '}\n              <NavLink to=\"/register\" className=\"white\">\n                register\n              </NavLink>\n              .\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              <span className=\"logo-single\" />\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.reset-password\" />\n            </CardTitle>\n\n            <Formik\n              validate={validateNewPassword}\n              initialValues={initialValues}\n              onSubmit={onResetPassword}\n            >\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"newPassword\"\n                      type=\"password\"\n                    />\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password-again\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"newPasswordAgain\"\n                      type=\"password\"\n                    />\n                    {errors.newPasswordAgain && touched.newPasswordAgain && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.newPasswordAgain}\n                      </div>\n                    )}\n                  </FormGroup>\n\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <NavLink to=\"/user/login\">\n                      <IntlMessages id=\"user.login-title\" />\n                    </NavLink>\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.reset-password-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { newPassword, resetPasswordCode, loading, error } = authUser;\n  return { newPassword, resetPasswordCode, loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  resetPasswordAction: resetPassword,\n})(ResetPassword);\n"],"sourceRoot":""}